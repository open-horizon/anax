#!/bin/bash

# Script to start, restart, and stop anax inside a docker container

# Note: this trap won't run while we are blocking on a foreground cmd, so when we start anax, we will have to run it in background and use wait.
trap trapHandler SIGTERM

# Note: the check for dont-unregister-on-exit is so we can do a restart/update of anax w/o unregistering.
trapHandler() {
	touch $HOME/container-stopping
	exit 0
}

ANAX_LOG_LEVEL=${ANAX_LOG_LEVEL:-3}

usage() {
	echo "Usage: $0 {start|restart|status|block}"
	exit 1
}

cmd="$1"

# Check the exit status of the previously run command and exit if nonzero
checkrc() {
  if [[ $1 -ne 0 ]]; then
  	if [[ -n "$2" ]]; then
  		fromStr="from: $2"
  	else
  		fromStr="from the last command"
  	fi
    echo "Error: exit code $1 $fromStr"
    exit $1
  fi
}

block() {
	echo "Sleeping forever..."
	while :; do sleep 2073600; done    # block forever w/o starting anax so the container stays up, and you can exec in, start anax manually, and debug
}

editFSSAPIListen() {
	echo "Edit FileSyncService.APIListen"
	anaxJsonFile='/etc/horizon/anax.json'
	echo "Modifying $anaxJsonFile for anax-in-k8s..."

	anaxJson=$(jq . $anaxJsonFile)
	checkrc $? "read anax.json"
	cp $anaxJsonFile $anaxJsonFile.orig
	checkrc $? "back up anax.json"

	anaxJson=$(jq ".Edge.FileSyncService.APIListen = \"0.0.0.0\" " <<< $anaxJson)
	checkrc $? "change FileSyncService.APIListen"

	anaxJson=$(jq ".Edge.FileSyncService.APIProtocol = \"secure\" " <<< $anaxJson)
	checkrc $? "change FileSyncService.APIProtocol"
	
	echo "$anaxJson" > $anaxJsonFile
	checkrc $? "write anax.json"
}

start() {
	# Handle special case environments
	if [[ "$1" == "block" ]]; then
		block   # a special case to just sleep forever so we can get into the container and examine it
	fi

	# Source and export the variables in /etc/default/horizon. This file was either put there by the deb pkg,
	# or mounted over by the launching horizon-container script
	if [[ -f /etc/default/horizon ]]; then
		echo "Sourcing/exporting /etc/default/horizon"
		set -a   # automatically export all variable assignments
		source /etc/default/horizon
		checkrc $? "source /etc/default/horizon"
		set +a   # undo
	fi

	editFSSAPIListen

	if [[ ! -d /var/horizon/policy.d ]]; then
		echo "creating directory: /var/horizon/policy.d"
		mkdir -m 744 /var/horizon/policy.d
	else
		chmod +wx /var/horizon/policy.d
	fi

	# Now repeatedly run anax...
	numInvocations=0
	while true; do
		((numInvocations++))
		anaxCmd="/usr/horizon/bin/anax -v $ANAX_LOG_LEVEL -logtostderr -config /etc/horizon/anax.json"
		echo "$anaxCmd"
		# We run this in the background and wait on it using wait, because that's the only way for traps to get control immediately
		$anaxCmd &
		pid=$!
		wait $pid
		if [[ $? -gt 128 ]]; then
			# This means a signal interrupted wait. If it was sigterm, then our trap will run immediately, clean up, and exit.
			# Else, we should go back to waiting on anax
			wait $pid
		fi
		echo "Anax run number $numInvocations ended with exit code $?." >&2
		if [[ -f $HOME/container-stopping ]]; then
			echo "The docker container is stopping, so not respawning anax." >&2
			break
		fi
		if [[ -n "$HZN_MAX_INVOCATIONS" && $numInvocations -ge $HZN_MAX_INVOCATIONS ]]; then
			echo "The number of times anax has been invoked is >= HZN_MAX_INVOCATIONS ($HZN_MAX_INVOCATIONS), so not respawning anax." >&2
			break
		fi
		echo "Respawning anax..." >&2
		sleep 1		# in case the cmd above is failing, this loop won't consume 100% cpu
	done
}

# Note: the way to stop anax w/o it restarting is to stop the container
#stopanax() {
#	killall /usr/horizon/bin/anax
#}

restart() {
	killall anax 		# the start function will automatically restart it
	#stopanax
	#start
}

psg() {
	ps aux|head -1
	ps aux|grep -i $*|grep -v 'grep -'
}

status() {
	psg /usr/horizon/bin/anax
}

# Main....
case "$cmd" in
	start)
		start
		;;
	# stop)
		# stopanax
		# ;;
	restart)
		restart
		;;
	status)
		status
		;;
	*)
		usage
esac
