{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the secure API for the agreement bot.",
    "title": "Agreement Bot Secure API",
    "version": "0.0.1"
  },
  "host": "localhost",
  "paths": {
    "/deploycheck/deploycompatible": {
      "get": {
        "description": "This API does compatibility check for the given deployment policy (or a pattern), service definition, node policy and node user input. It does both policy compatibility check and user input compatibility check. If the result is compatible, it means that, when deployed, the node will form an agreement with the agbot and the service will be running on the node.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check deployment compatibility.",
        "operationId": "deploy_compatible",
        "parameters": [
          {
            "type": "boolean",
            "description": "Return the compatibility check result for all the service versions referenced in the deployment policy or pattern.",
            "name": "checkAll",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Show the input which was used to come up with the result.",
            "name": "long",
            "in": "query"
          },
          {
            "description": "The payload body",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompCheck"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CompCheckOutput"
            }
          },
          "400": {
            "description": "Failure - No input found",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Failure - Failed to authenticate",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failure - Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/deploycheck/policycompatible": {
      "get": {
        "description": "This API does the policy compatibility check for the given deployment policy, node policy and service policy. The deployment policy and the service policy will be merged to check against the node policy. If the result is compatible, it means that, when deployed, the node will form an agreement with the agbot and the service will be running on the node.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check the policy compatibility",
        "operationId": "deployCheckPolicyCompatible",
        "parameters": [
          {
            "type": "boolean",
            "description": "Return the compatibility check result for all the service versions referenced in the deployment policy or pattern.",
            "name": "checkAll",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Show the input which was used to come up with the result.",
            "name": "long",
            "in": "query"
          },
          {
            "description": "The payload body",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyCheck"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CompCheckOutput"
            }
          },
          "400": {
            "description": "Failure - No input found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failure - Error",
            "schema": {
              "type": "string"
            }
          },
          "501": {
            "description": "Failure - Failed to authenticate",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/deploycheck/secretbindingcompatible": {
      "get": {
        "description": "This API does the secret binding compatibility check for the given deployment policy (or a pattern) and service definition. It checks if each secret defined in a serice has a binding associated in the given deployment policy (or pattern) and each bound secret exists in the secret manager. If the result is compatible, it means that, when deployed, the node will form an agreement with the agbot and the service will be running on the node.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check the secret binding compatibility.",
        "operationId": "secretbinding_compatible",
        "parameters": [
          {
            "type": "boolean",
            "description": "Return the compatibility check result for all the service versions referenced in the deployment policy or pattern.",
            "name": "checkAll",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Show the input which was used to come up with the result.",
            "name": "long",
            "in": "query"
          },
          {
            "description": "The payload body",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretBindingCheck"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CompCheckOutput"
            }
          },
          "400": {
            "description": "Failure - No input found",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Failure - Failed to authenticate",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failure - Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/deploycheck/userinputcompatible": {
      "get": {
        "description": "This API does the user input compatibility check for the given deployment policy (or a pattern), service definition and node user input. The user input values in the deployment policy and the node will be merged to check against the service uer input requirement defined in the service definition. If the result is compatible, it means that, when deployed, the node will form an agreement with the agbot and the service will be running on the node.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check the user input compatibility.",
        "operationId": "userinputCompatible",
        "parameters": [
          {
            "type": "boolean",
            "description": "Return the compatibility check result for all the service versions referenced in the deployment policy or pattern.",
            "name": "checkAll",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Show the input which was used to come up with the result.",
            "name": "long",
            "in": "query"
          },
          {
            "description": "The payload body",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInputCheck"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CompCheckOutput"
            }
          },
          "400": {
            "description": "Failure - No input found",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Failure - Failed to authenticate",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failure - Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/org/{org}/hagroup/{group}/nodemanagement/{node}/{nmpid}": {
      "post": {
        "description": "This API checks NMP update availability for the HA group node",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check node NMP update in the HA group",
        "operationId": "haNodeNMPUpdateRequest",
        "parameters": [
          {
            "type": "string",
            "description": "Return the compatibility check result for all the service versions referenced in the deployment policy or pattern.",
            "name": "org",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Show the input which was used to come up with the result.",
            "name": "group",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The exchange id of the node. Mutually exclusive with node_policy.",
            "name": "node",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The architecture of the node.",
            "name": "nmpID",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created - Node can begin upgrad",
            "schema": {
              "$ref": "#/definitions/PutPostDeleteStandardResponse"
            }
          },
          "400": {
            "description": "Failure - Query parameter invalid",
            "schema": {
              "$ref": "#/definitions/PutPostDeleteStandardResponse"
            }
          },
          "409": {
            "description": "Conflict - Node can begin upgrade",
            "schema": {
              "$ref": "#/definitions/PutPostDeleteStandardResponse"
            }
          },
          "500": {
            "description": "Failure - Error",
            "schema": {
              "#ref": "#/definitions/PutPostDeleteStandardResponse"
            }
          }
        }
      }
    },
    "/org/{org}/secrets": {},
    "/org/{org}/secrets/*": {
      "get": {
        "description": "Authenticates the node user with the exchange. Checks if the vault plugin being used is ready.\nPerforms sanity checks on the secret user and secret name provided.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Common setup required before using the vault to manage secrets.",
        "operationId": "secrets_setup",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to. Must be the same as the org the user node belongs to.",
            "name": "org",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The user owning the secret.",
            "name": "user",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The node the secret is for.",
            "name": "node",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "query"
          }
        ],
        "responses": {
          "400": {
            "description": "Secret org or name does not meet constraints.",
            "schema": {
              "type": "string"
            }
          },
          "503": {
            "description": "Secret provider not ready or not configured.",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AbstractPatternFile": {
      "type": "object",
      "properties": {
        "GetClusterNamespace": {
          "type": "string"
        },
        "GetOrg": {
          "type": "string"
        },
        "GetSecretBinding": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecretBinding"
          }
        },
        "GetServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceReference"
          }
        },
        "GetUserInputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          }
        },
        "IsPublic": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/common"
    },
    "AbstractServiceFile": {
      "type": "object",
      "properties": {
        "GetArch": {
          "type": "string"
        },
        "GetClusterDeployment": {},
        "GetDeployment": {},
        "GetOrg": {
          "type": "string"
        },
        "GetRequiredServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDependency"
          }
        },
        "GetServiceType": {
          "type": "string"
        },
        "GetURL": {
          "type": "string"
        },
        "GetUserInputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          }
        },
        "GetVersion": {
          "type": "string"
        },
        "NeedsUserInput": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/common"
    },
    "AgreementProtocol": {
      "type": "object",
      "properties": {
        "blockchains": {
          "$ref": "#/definitions/BlockchainList"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "protocolVersion": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProtocolVersion"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "AuthenticateOKBody": {
      "description": "AuthenticateOKBody authenticate o k body",
      "type": "object",
      "required": [
        "IdentityToken",
        "Status"
      ],
      "properties": {
        "IdentityToken": {
          "description": "An opaque token used to authenticate a user after a successful login",
          "type": "string"
        },
        "Status": {
          "description": "The status of the authentication",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/registry"
    },
    "Blockchain": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "organization": {
          "type": "string",
          "x-go-name": "Org"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "BlockchainList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Blockchain"
      },
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "BoundSecret": {
      "type": "object",
      "title": "a binding that maps a secret name to a secret manager secret name.",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/open-horizon/anax/exchangecommon"
    },
    "BusinessPolicy": {
      "description": "BusinessPolicy the business policy",
      "type": "object",
      "properties": {
        "constraints": {
          "$ref": "#/definitions/ConstraintExpression"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "properties": {
          "$ref": "#/definitions/PropertyList"
        },
        "secretBinding": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecretBinding"
          },
          "x-go-name": "SecretBinding"
        },
        "service": {
          "$ref": "#/definitions/ServiceRef"
        },
        "userInput": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          },
          "x-go-name": "UserInput"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/businesspolicy"
    },
    "ChangeType": {
      "description": "Can be one of:\n\n`0`: Modified (\"C\")\n`1`: Added (\"A\")\n`2`: Deleted (\"D\")",
      "type": "integer",
      "format": "uint8",
      "title": "ChangeType Kind of change",
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "CompCheck": {
      "description": "The input format for the comptible check",
      "type": "object",
      "properties": {
        "business_policy": {
          "$ref": "#/definitions/BusinessPolicy"
        },
        "business_policy_id": {
          "type": "string",
          "x-go-name": "BusinessPolId"
        },
        "node_arch": {
          "type": "string",
          "x-go-name": "NodeArch"
        },
        "node_cluster_namespace": {
          "type": "string",
          "x-go-name": "NodeClusterNS"
        },
        "node_id": {
          "type": "string",
          "x-go-name": "NodeId"
        },
        "node_namespace_scoped": {
          "type": "boolean",
          "x-go-name": "NodeNamespaceScoped"
        },
        "node_org": {
          "type": "string",
          "x-go-name": "NodeOrg"
        },
        "node_policy": {
          "$ref": "#/definitions/NodePolicy"
        },
        "node_type": {
          "type": "string",
          "x-go-name": "NodeType"
        },
        "node_user_input": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          },
          "x-go-name": "NodeUserInput"
        },
        "pattern": {
          "$ref": "#/definitions/AbstractPatternFile"
        },
        "pattern_id": {
          "type": "string",
          "x-go-name": "PatternId"
        },
        "service": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AbstractServiceFile"
          },
          "x-go-name": "Service"
        },
        "service_policy": {
          "$ref": "#/definitions/ExternalPolicy"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/compcheck"
    },
    "CompCheckOutput": {
      "description": "CompCheckOutput The output format for the compatibility check",
      "type": "object",
      "properties": {
        "compatible": {
          "type": "boolean",
          "x-go-name": "Compatible"
        },
        "input": {
          "$ref": "#/definitions/CompCheckResource"
        },
        "reason": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Reason"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/compcheck"
    },
    "CompCheckResource": {
      "description": "To store the resource (pattern, bp, services etc) used for compatibility check",
      "type": "object",
      "properties": {
        "business_policy": {
          "$ref": "#/definitions/BusinessPolicy"
        },
        "business_policy_id": {
          "type": "string",
          "x-go-name": "BusinessPolId"
        },
        "dependent_services": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ServiceDefinition"
          },
          "x-go-name": "DepServices"
        },
        "extraneous_secret_binding": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecretBinding"
          },
          "x-go-name": "ExtraneousSB"
        },
        "needed_secret_binding": {
          "description": "It is either empty or provides ALL the dependent services needed. It is expected the top level service definitions are provided\nin the 'Service' attribute when this attribute is not empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecretBinding"
          },
          "x-go-name": "NeededSB"
        },
        "node_arch": {
          "type": "string",
          "x-go-name": "NodeArch"
        },
        "node_cluster_namespace": {
          "type": "string",
          "x-go-name": "NodeClusterNS"
        },
        "node_id": {
          "type": "string",
          "x-go-name": "NodeId"
        },
        "node_namespace_scoped": {
          "type": "boolean",
          "x-go-name": "NodeNamespaceScoped"
        },
        "node_org": {
          "type": "string",
          "x-go-name": "NodeOrg"
        },
        "node_policy": {
          "$ref": "#/definitions/NodePolicy"
        },
        "node_type": {
          "type": "string",
          "x-go-name": "NodeType"
        },
        "node_user_input": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          },
          "x-go-name": "NodeUserInput"
        },
        "pattern": {
          "$ref": "#/definitions/AbstractPatternFile"
        },
        "pattern_id": {
          "type": "string",
          "x-go-name": "PatternId"
        },
        "service": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AbstractServiceFile"
          },
          "x-go-name": "Service"
        },
        "service_policy": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ExternalPolicy"
          },
          "x-go-name": "ServicePolicy"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/compcheck"
    },
    "ConstraintExpression": {
      "type": "array",
      "title": "This type implements all the ConstraintLanguage Plugin methods and delegates to plugin system.",
      "items": {
        "type": "string"
      },
      "x-go-package": "github.com/open-horizon/anax/externalpolicy"
    },
    "ContainerTopOKBody": {
      "description": "ContainerTopOKBody OK response to ContainerTop operation",
      "type": "object",
      "required": [
        "Processes",
        "Titles"
      ],
      "properties": {
        "Processes": {
          "description": "Each process running in the container, where each is process\nis an array of values corresponding to the titles.",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "Titles": {
          "description": "The ps column titles",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "ContainerUpdateOKBody": {
      "description": "ContainerUpdateOKBody OK response to ContainerUpdate operation",
      "type": "object",
      "required": [
        "Warnings"
      ],
      "properties": {
        "Warnings": {
          "description": "warnings",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "CreateResponse": {
      "description": "OK response to ContainerCreate operation",
      "type": "object",
      "title": "CreateResponse ContainerCreateResponse",
      "required": [
        "Id",
        "Warnings"
      ],
      "properties": {
        "Id": {
          "description": "The ID of the created container",
          "type": "string",
          "x-go-name": "ID"
        },
        "Warnings": {
          "description": "Warnings encountered when creating the container",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "DataVerification": {
      "type": "object",
      "properties": {
        "URL": {
          "type": "string"
        },
        "check_rate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CheckRate"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "interval": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Interval"
        },
        "metering": {
          "$ref": "#/definitions/Meter"
        },
        "password": {
          "type": "string",
          "x-go-name": "URLPassword"
        },
        "user": {
          "type": "string",
          "x-go-name": "URLUser"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "ExternalPolicy": {
      "description": "BusinessPolicy the external policy",
      "type": "object",
      "properties": {
        "constraints": {
          "$ref": "#/definitions/ConstraintExpression"
        },
        "properties": {
          "$ref": "#/definitions/PropertyList"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/externalpolicy"
    },
    "FilesystemChange": {
      "type": "object",
      "title": "FilesystemChange Change in the container's filesystem.",
      "required": [
        "Kind",
        "Path"
      ],
      "properties": {
        "Kind": {
          "$ref": "#/definitions/ChangeType"
        },
        "Path": {
          "description": "Path to file or directory that has changed.",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "HardwareRequirement": {
      "type": "object",
      "title": "This type is used to abstract the various edge node hardware requirements. The schema is left wide open.",
      "additionalProperties": {},
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "Input": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/policy"
    },
    "Meter": {
      "type": "object",
      "properties": {
        "notification_interval": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NotificationIntervalS"
        },
        "per_time_unit": {
          "type": "string",
          "x-go-name": "PerTimeUnit"
        },
        "tokens": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Tokens"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "NodeHealth": {
      "type": "object",
      "properties": {
        "check_agreement_status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CheckAgreementStatus"
        },
        "missing_heartbeat_interval": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MissingHBInterval"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/businesspolicy"
    },
    "NodePolicy": {
      "description": "NodePolicy the node policy\nThe properties and constraints defined in the top-level are common\nproperties and constraints that are used by both Deployment and Management.\nIf the same property name is defined in the second level (Deployment or Management),\nthe perperty value of the second level takes the precedence.\nIf there are constraints defined in the second level, all the constraints defined in\nthe top level will be ignored.",
      "type": "object",
      "properties": {
        "constraints": {
          "$ref": "#/definitions/ConstraintExpression"
        },
        "deployment": {
          "$ref": "#/definitions/ExternalPolicy"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "management": {
          "$ref": "#/definitions/ExternalPolicy"
        },
        "properties": {
          "$ref": "#/definitions/PropertyList"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchangecommon"
    },
    "PatternFile": {
      "description": "It is used when reading json file the user gives us as an input to create the pattern",
      "type": "object",
      "title": "PatternFile An implementation of AbstractPatternFile.",
      "properties": {
        "agreementProtocols": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementProtocol"
          },
          "x-go-name": "AgreementProtocols"
        },
        "clusterNamespace": {
          "type": "string",
          "x-go-name": "ClusterNamespace"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "org": {
          "type": "string",
          "x-go-name": "Org"
        },
        "public": {
          "type": "boolean",
          "x-go-name": "Public"
        },
        "secretBinding": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecretBinding"
          },
          "x-go-name": "SecretBinding"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceReferenceFile"
          },
          "x-go-name": "Services"
        },
        "userInput": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          },
          "x-go-name": "UserInput"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/common"
    },
    "PolicyCheck": {
      "description": "The input format for the policy check",
      "type": "object",
      "properties": {
        "business_policy": {
          "$ref": "#/definitions/BusinessPolicy"
        },
        "business_policy_id": {
          "type": "string",
          "x-go-name": "BusinessPolId"
        },
        "dependent_services": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ServiceDefinition"
          },
          "x-go-name": "DepServices"
        },
        "node_arch": {
          "type": "string",
          "x-go-name": "NodeArch"
        },
        "node_cluster_namespace": {
          "type": "string",
          "x-go-name": "NodeClusterNS"
        },
        "node_id": {
          "type": "string",
          "x-go-name": "NodeId"
        },
        "node_namespace_scoped": {
          "type": "boolean",
          "x-go-name": "NodeNamespaceScoped"
        },
        "node_policy": {
          "$ref": "#/definitions/NodePolicy"
        },
        "node_type": {
          "type": "string",
          "x-go-name": "NodeType"
        },
        "service": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AbstractServiceFile"
          },
          "x-go-name": "Service"
        },
        "service_policy": {
          "$ref": "#/definitions/ExternalPolicy"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/compcheck"
    },
    "Property": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/externalpolicy"
    },
    "PropertyList": {
      "description": "This struct represents property values advertised by the policy",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Property"
      },
      "x-go-package": "github.com/open-horizon/anax/externalpolicy"
    },
    "PutPostDeleteStandardResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "x-go-name": "Code"
        },
        "msg": {
          "type": "string",
          "x-go-name": "Msg"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "SecretBinding": {
      "description": "The secret binding that maps service secret names to secret manager secret names",
      "type": "object",
      "properties": {
        "enableNodeLevelSecrets": {
          "type": "boolean",
          "x-go-name": "EnableNodeLevelSecrets"
        },
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BoundSecret"
          },
          "x-go-name": "Secrets"
        },
        "serviceArch": {
          "type": "string",
          "x-go-name": "ServiceArch"
        },
        "serviceOrgid": {
          "type": "string",
          "x-go-name": "ServiceOrgid"
        },
        "serviceUrl": {
          "type": "string",
          "x-go-name": "ServiceUrl"
        },
        "serviceVersionRange": {
          "type": "string",
          "x-go-name": "ServiceVersionRange"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchangecommon"
    },
    "SecretBindingCheck": {
      "description": "The input format for the userinput check",
      "type": "object",
      "properties": {
        "business_policy": {
          "$ref": "#/definitions/BusinessPolicy"
        },
        "business_policy_id": {
          "type": "string",
          "x-go-name": "BusinessPolId"
        },
        "dependent_services": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ServiceDefinition"
          },
          "x-go-name": "DepServices"
        },
        "node_arch": {
          "type": "string",
          "x-go-name": "NodeArch"
        },
        "node_id": {
          "type": "string",
          "x-go-name": "NodeId"
        },
        "node_org": {
          "type": "string",
          "x-go-name": "NodeOrg"
        },
        "node_type": {
          "type": "string",
          "x-go-name": "NodeType"
        },
        "pattern": {
          "$ref": "#/definitions/AbstractPatternFile"
        },
        "pattern_id": {
          "type": "string",
          "x-go-name": "PatternId"
        },
        "service": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AbstractServiceFile"
          },
          "x-go-name": "Service"
        },
        "service_to_check": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ServiceToCheck"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/compcheck"
    },
    "ServiceChoiceFile": {
      "type": "object",
      "properties": {
        "deployment_overrides": {
          "x-go-name": "DeploymentOverrides"
        },
        "deployment_overrides_signature": {
          "type": "string",
          "x-go-name": "DeploymentOverridesSignature"
        },
        "priority": {
          "$ref": "#/definitions/WorkloadPriority"
        },
        "upgradePolicy": {
          "$ref": "#/definitions/UpgradePolicy"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/common"
    },
    "ServiceDefinition": {
      "type": "object",
      "title": "This is the structure of the object returned on a GET /service.",
      "properties": {
        "arch": {
          "type": "string",
          "x-go-name": "Arch"
        },
        "clusterDeployment": {
          "type": "string",
          "x-go-name": "ClusterDeployment"
        },
        "clusterDeploymentSignature": {
          "type": "string",
          "x-go-name": "ClusterDeploymentSignature"
        },
        "deployment": {
          "type": "string",
          "x-go-name": "Deployment"
        },
        "deploymentSignature": {
          "type": "string",
          "x-go-name": "DeploymentSignature"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "documentation": {
          "type": "string",
          "x-go-name": "Documentation"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "lastUpdated": {
          "type": "string",
          "x-go-name": "LastUpdated"
        },
        "matchHardware": {
          "$ref": "#/definitions/HardwareRequirement"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "public": {
          "type": "boolean",
          "x-go-name": "Public"
        },
        "requiredServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDependency"
          },
          "x-go-name": "RequiredServices"
        },
        "sharable": {
          "type": "string",
          "x-go-name": "Sharable"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "userInput": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          },
          "x-go-name": "UserInputs"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "ServiceDependency": {
      "type": "object",
      "title": "This type is a tuple used to refer to a specific service that is a dependency for the referencing service.",
      "properties": {
        "arch": {
          "type": "string",
          "x-go-name": "Arch"
        },
        "org": {
          "type": "string",
          "x-go-name": "Org"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        },
        "versionRange": {
          "type": "string",
          "x-go-name": "VersionRange"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchangecommon"
    },
    "ServiceFile": {
      "description": "It is used when reading json file the user gives us as input to create the service",
      "type": "object",
      "title": "ServiceFile An implementation of AbstractServiceFile",
      "properties": {
        "arch": {
          "type": "string",
          "x-go-name": "Arch"
        },
        "clusterDeployment": {
          "x-go-name": "ClusterDeployment"
        },
        "clusterDeploymentSignature": {
          "type": "string",
          "x-go-name": "ClusterDeploymentSignature"
        },
        "deployment": {
          "x-go-name": "Deployment"
        },
        "deploymentSignature": {
          "type": "string",
          "x-go-name": "DeploymentSignature"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "documentation": {
          "type": "string",
          "x-go-name": "Documentation"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "matchHardware": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "MatchHardware"
        },
        "org": {
          "type": "string",
          "x-go-name": "Org"
        },
        "public": {
          "type": "boolean",
          "x-go-name": "Public"
        },
        "requiredServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDependency"
          },
          "x-go-name": "RequiredServices"
        },
        "sharable": {
          "type": "string",
          "x-go-name": "Sharable"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "userInput": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          },
          "x-go-name": "UserInputs"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/common"
    },
    "ServiceRef": {
      "type": "object",
      "properties": {
        "arch": {
          "type": "string",
          "x-go-name": "Arch"
        },
        "clusterNamespace": {
          "type": "string",
          "x-go-name": "ClusterNamespace"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "nodeHealth": {
          "$ref": "#/definitions/NodeHealth"
        },
        "org": {
          "type": "string",
          "x-go-name": "Org"
        },
        "serviceVersions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadChoice"
          },
          "x-go-name": "ServiceVersions"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/businesspolicy"
    },
    "ServiceReference": {
      "type": "object",
      "properties": {
        "agreementLess": {
          "type": "boolean",
          "x-go-name": "AgreementLess"
        },
        "dataVerification": {
          "$ref": "#/definitions/DataVerification"
        },
        "nodeHealth": {
          "$ref": "#/definitions/NodeHealth"
        },
        "serviceArch": {
          "type": "string",
          "x-go-name": "ServiceArch"
        },
        "serviceOrgid": {
          "type": "string",
          "x-go-name": "ServiceOrg"
        },
        "serviceUrl": {
          "type": "string",
          "x-go-name": "ServiceURL"
        },
        "serviceVersions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadChoice"
          },
          "x-go-name": "ServiceVersions"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "ServiceReferenceFile": {
      "type": "object",
      "properties": {
        "agreementLess": {
          "type": "boolean",
          "x-go-name": "AgreementLess"
        },
        "dataVerification": {
          "$ref": "#/definitions/DataVerification"
        },
        "nodeHealth": {
          "$ref": "#/definitions/NodeHealth"
        },
        "serviceArch": {
          "type": "string",
          "x-go-name": "ServiceArch"
        },
        "serviceOrgid": {
          "type": "string",
          "x-go-name": "ServiceOrg"
        },
        "serviceUrl": {
          "type": "string",
          "x-go-name": "ServiceURL"
        },
        "serviceVersions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceChoiceFile"
          },
          "x-go-name": "ServiceVersions"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/common"
    },
    "UpgradePolicy": {
      "type": "object",
      "properties": {
        "lifecycle": {
          "type": "string",
          "x-go-name": "Lifecycle"
        },
        "time": {
          "type": "string",
          "x-go-name": "Time"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/businesspolicy"
    },
    "UserInput": {
      "type": "object",
      "title": "UserInput This type is used to describe a configuration variable that the node owner/user has to set before the service is able to execute on the edge node.",
      "properties": {
        "defaultValue": {
          "type": "string",
          "x-go-name": "DefaultValue"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchangecommon"
    },
    "UserInputCheck": {
      "description": "The input format for the userinput check",
      "type": "object",
      "properties": {
        "business_policy": {
          "$ref": "#/definitions/BusinessPolicy"
        },
        "business_policy_id": {
          "type": "string",
          "x-go-name": "BusinessPolId"
        },
        "dependent_services": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ServiceDefinition"
          },
          "x-go-name": "DepServices"
        },
        "node_arch": {
          "type": "string",
          "x-go-name": "NodeArch"
        },
        "node_cluster_namespace": {
          "type": "string",
          "x-go-name": "NodeClusterNS"
        },
        "node_id": {
          "type": "string",
          "x-go-name": "NodeId"
        },
        "node_namespace_scoped": {
          "type": "boolean",
          "x-go-name": "NodeNamespaceScoped"
        },
        "node_type": {
          "type": "string",
          "x-go-name": "NodeType"
        },
        "node_user_input": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          },
          "x-go-name": "NodeUserInput"
        },
        "pattern": {
          "$ref": "#/definitions/AbstractPatternFile"
        },
        "pattern_id": {
          "type": "string",
          "x-go-name": "PatternId"
        },
        "service": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AbstractServiceFile"
          },
          "x-go-name": "Service"
        },
        "service_to_check": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ServiceToCheck"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/compcheck"
    },
    "WaitExitError": {
      "description": "WaitExitError container waiting error, if any",
      "type": "object",
      "properties": {
        "Message": {
          "description": "Details of an error",
          "type": "string"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "WaitResponse": {
      "description": "OK response to ContainerWait operation",
      "type": "object",
      "title": "WaitResponse ContainerWaitResponse",
      "required": [
        "StatusCode"
      ],
      "properties": {
        "Error": {
          "$ref": "#/definitions/WaitExitError"
        },
        "StatusCode": {
          "description": "Exit code of the container",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/docker/docker/api/types/container"
    },
    "WorkloadChoice": {
      "type": "object",
      "properties": {
        "deployment_overrides": {
          "type": "string",
          "x-go-name": "DeploymentOverrides"
        },
        "deployment_overrides_signature": {
          "type": "string",
          "x-go-name": "DeploymentOverridesSignature"
        },
        "priority": {
          "$ref": "#/definitions/WorkloadPriority"
        },
        "upgradePolicy": {
          "$ref": "#/definitions/UpgradePolicy"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "WorkloadPriority": {
      "type": "object",
      "properties": {
        "priority_value": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PriorityValue"
        },
        "retries": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Retries"
        },
        "retry_durations": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RetryDurationS"
        },
        "verified_durations": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "VerifiedDurationS"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/businesspolicy"
    }
  }
}