// NLS_CHARSET=UTF-8
{
  "language": "en",
  "messages": [
    {

      "id": "failed to unmarshal json input file {FilePath}: {Err}",

      "translation": "failed to unmarshal json input file {FilePath}: {Err}"
    },
    {

      "id": "Incorrect node policy format in file {JsonFilePath}: {Err}",

      "translation": "Incorrect node policy format in file {JsonFilePath}: {Err}"
    },
    {

      "id": "No pattern or node policy is specified. Will proceeed with the existing node policy.",

      "translation": "No pattern or node policy is specified. Will proceeed with the existing node policy."
    },
    {

      "id": "Reading input file {InputFile}...",

      "translation": "Reading input file {InputFile}..."
    },
    {

      "id": "hzn cli is configured with exchange url {ExchUrlBase} from {ExchangeUrlLocation} and the horizon agent is configured with exchange url {AnaxExchUrlBase} from {ExchangeUrlLocationFromAnax}. hzn register will not work with mismatched exchange urls.",

      "translation": "hzn cli is configured with exchange url {ExchUrlBase} from {ExchangeUrlLocation} and the horizon agent is configured with exchange url {AnaxExchUrlBase} from {ExchangeUrlLocationFromAnax}. hzn register will not work with mismatched exchange urls."
    },
    {

      "id": "Horizon Exchange base URL: {ExchUrlBase}",

      "translation": "Horizon Exchange base URL: {ExchUrlBase}"
    },
    {

      "id": "Failed to get proper response from the Horizon agent",

      "translation": "Failed to get proper response from the Horizon agent"
    },
    {

      "id": "Please specify the node id and token using -n flag or HZN_EXCHANGE_NODE_AUTH environment variable.",

      "translation": "Please specify the node id and token using -n flag or HZN_EXCHANGE_NODE_AUTH environment variable."
    },
    {

      "id": "Using node ID '{NodeId}' from the Horizon agent",

      "translation": "Using node ID '{NodeId}' from the Horizon agent"
    },
    {

      "id": "could not create a random token",

      "translation": "could not create a random token"
    },
    {

      "id": "node '{Org}/{NodeId}' does not exist in the exchange with the specified token, and the -u flag was not specified to provide exchange user credentials to create/update it.",

      "translation": "node '{Org}/{NodeId}' does not exist in the exchange with the specified token, and the -u flag was not specified to provide exchange user credentials to create/update it."
    },
    {

      "id": "Node {Org}/{NodeId} does not exist in the exchange with the specified token, creating/updating it...",

      "translation": "Node {Org}/{NodeId} does not exist in the exchange with the specified token, creating/updating it..."
    },
    {

      "id": "Node {Org}/{NodeId} exists in the exchange",

      "translation": "Node {Org}/{NodeId} exists in the exchange"
    },
    {

      "id": "this Horizon node is already registered or in the process of being registered. If you want to register it differently, run 'hzn unregister' first.",

      "translation": "this Horizon node is already registered or in the process of being registered. If you want to register it differently, run 'hzn unregister' first."
    },
    {

      "id": "Registration failed because {Matches0} Please update the services section in the input file {InputFile}. Run 'hzn unregister' and then 'hzn register...' again",

      "translation": "Registration failed because {Matches0} Please update the services section in the input file {InputFile}. Run 'hzn unregister' and then 'hzn register...' again"
    },
    {

      "id": "{Errstring}. Please define variables for service {Matches2} in the input file {InputFile}. Run 'hzn unregister' and then 'hzn register...' again",

      "translation": "{Errstring}. Please define variables for service {Matches2} in the input file {InputFile}. Run 'hzn unregister' and then 'hzn register...' again"
    },
    {

      "id": "{Errstring}. Please create an input file, define variables for service {Matches2}. Run 'hzn unregister' and then 'hzn register...' again with the -f flag to specify the input file.",

      "translation": "{Errstring}. Please create an input file, define variables for service {Matches2}. Run 'hzn unregister' and then 'hzn register...' again with the -f flag to specify the input file."
    },
    {

      "id": "-o and -p are mutually exclusive with <nodeorg> and <pattern> arguments.",

      "translation": "-o and -p are mutually exclusive with <nodeorg> and <pattern> arguments."
    },
    {

      "id": "--policy is mutually exclusive with -p.",

      "translation": "--policy is mutually exclusive with -p."
    },
    {

      "id": "--policy is mutually exclusive with <pattern> argument.",

      "translation": "--policy is mutually exclusive with <pattern> argument."
    },
    {

      "id": "Please specify the node organization id.",

      "translation": "Please specify the node organization id."
    },
    {

      "id": "invalid version range '{Vr}': {Err}",

      "translation": "invalid version range '{Vr}': {Err}"
    },
    {

      "id": "unable to verify that {Version} is within {VRange}, error {Err}",

      "translation": "unable to verify that {Version} is within {VRange}, error {Err}"
    },
    {

      "id": "found no services in the exchange matching: org={Org}, url={Url}, arch={Arch}",

      "translation": "found no services in the exchange matching: org={Org}, url={Url}, arch={Arch}"
    },
    {

      "id": "error comparing version {ServiceshighestKey} with version {Version}. {Err}",

      "translation": "error comparing version {ServiceshighestKey} with version {Version}. {Err}"
    },
    {

      "id": "found no services in the exchange matched: org={Org}, specRef={Url}, version range={VersionRanges}, arch={Arch}",

      "translation": "found no services in the exchange matched: org={Org}, specRef={Url}, version range={VersionRanges}, arch={Arch}"
    },
    {

      "id": "found: {Org}, {Url}, {Arch}, {VersionRange}",

      "translation": "found: {Org}, {Url}, {Arch}, {VersionRange}"
    },
    {

      "id": "did not find pattern '{PatKey}' as expected",

      "translation": "did not find pattern '{PatKey}' as expected"
    },
    {

      "id": "Ignoring service that is a different architecture: {ServiceOrg}, {ServiceURL}, {ServiceArch}",

      "translation": "Ignoring service that is a different architecture: {ServiceOrg}, {ServiceURL}, {ServiceArch}"
    },
    {

      "id": "failed to marshal the user input template file: {Err}",

      "translation": "failed to marshal the user input template file: {Err}"
    },
    {

      "id": "problem writing the user input template file: {Err}",

      "translation": "problem writing the user input template file: {Err}"
    },
    {

      "id": "Wrote {InputFile}",

      "translation": "Wrote {InputFile}"
    },
    {

      "id": "Reading configuration file: {ConfigFile}",

      "translation": "Reading configuration file: {ConfigFile}"
    },
    {

      "id": "Unable to read config file: {ConfigFile}. {Err}",

      "translation": "Unable to read config file: {ConfigFile}. {Err}"
    },
    {

      "id": "Unable to decode content of config file {ConfigFile}. {Err}",

      "translation": "Unable to decode content of config file {ConfigFile}. {Err}"
    },
    {

      "id": "Config file does not exist: {ConfigFile}.",

      "translation": "Config file does not exist: {ConfigFile}."
    },
    {

      "id": "Failed to set the environment variable defined in the MetadataVars attribute in file {ConfigFile}. {Err}",

      "translation": "Failed to set the environment variable defined in the MetadataVars attribute in file {ConfigFile}. {Err}"
    },
    {

      "id": "Failed to set the environment variable in top level in file {ConfigFile}. {Err}",

      "translation": "Failed to set the environment variable in top level in file {ConfigFile}. {Err}"
    },
    {

      "id": "Failed to set the environment variable defined in file {ConfigFile}. {Err}",

      "translation": "Failed to set the environment variable defined in file {ConfigFile}. {Err}"
    },
    {

      "id": "Local configuration {LocalConfigFile} has been setup at the beginning of this command. Will not setup twice.",

      "translation": "Local configuration {LocalConfigFile} has been setup at the beginning of this command. Will not setup twice."
    },
    {

      "id": "Failed to set the environment variable from the local configuration file {LocalConfigFile} for file {FilePath}. Error: {Err}",

      "translation": "Failed to set the environment variable from the local configuration file {LocalConfigFile} for file {FilePath}. Error: {Err}"
    },
    {

      "id": "Failed to restore the environment variable after using local configuration file {UseLocalConfig}. {Err}",

      "translation": "Failed to restore the environment variable after using local configuration file {UseLocalConfig}. {Err}"
    },
    {

      "id": "Failed to get the absolute path for file {ConfigFilepkg}. {Err}",

      "translation": "Failed to get the absolute path for file {ConfigFilepkg}. {Err}"
    },
    {

      "id": "Error reading environment variables from file {ConfigFilepkg}. {Err}",

      "translation": "Error reading environment variables from file {ConfigFilepkg}. {Err}"
    },
    {

      "id": "Error reading environment variables from file /etc/default/horizon. {Err}",

      "translation": "Error reading environment variables from file /etc/default/horizon. {Err}"
    },
    {

      "id": "Failed to get the absolute path for file ~/.hzn/hzn.json. {Err}",

      "translation": "Failed to get the absolute path for file ~/.hzn/hzn.json. {Err}"
    },
    {

      "id": "Error getting project level configuration file name. {Err}",

      "translation": "Error getting project level configuration file name. {Err}"
    },
    {

      "id": "No project level configuration file found.",

      "translation": "No project level configuration file found."
    },
    {

      "id": "failed to marshal 'hzn status -l' output: {Err}",

      "translation": "failed to marshal 'hzn status -l' output: {Err}"
    },
    {

      "id": "failed to marshal 'hzn status' output: {Err}",

      "translation": "failed to marshal 'hzn status' output: {Err}"
    },
    {

      "id": "Version_Expression: Whitespace is not permitted in {Expr}.",

      "translation": "Version_Expression: Whitespace is not permitted in {Expr}."
    },
    {

      "id": "Version_Expression: {Verstring} is not a valid version string.",

      "translation": "Version_Expression: {Verstring} is not a valid version string."
    },
    {

      "id": "Version_Expression: {Verstring} does not begin with an inclusion or exclusion directive.",

      "translation": "Version_Expression: {Verstring} does not begin with an inclusion or exclusion directive."
    },
    {

      "id": "Version_Expression: {Verstring} does not end with an inclusion or exclusion directive.",

      "translation": "Version_Expression: {Verstring} does not end with an inclusion or exclusion directive."
    },
    {

      "id": "Version_Expression: Incorrect number of versions in expression: {Expr}.",

      "translation": "Version_Expression: Incorrect number of versions in expression: {Expr}."
    },
    {

      "id": "Input version string {V1} or {V2} is not a valid single version string.",

      "translation": "Input version string {V1} or {V2} is not a valid single version string."
    },
    {

      "id": "The selection string {V} is not valid.",

      "translation": "The selection string {V} is not valid."
    },
    {

      "id": "failed to marshal 'hzn eventlog list' output: {Err}",

      "translation": "failed to marshal 'hzn eventlog list' output: {Err}"
    },
    {

      "id": "Are you sure you want to unregister this Horizon node?",

      "translation": "Are you sure you want to unregister this Horizon node?"
    },
    {

      "id": "Horizon node delete call successful with return code: {Output}",

      "translation": "Horizon node delete call successful with return code: {Output}"
    },
    {

      "id": "Timeout in {TotalWait} seconds ...",

      "translation": "Timeout in {TotalWait} seconds ..."
    },
    {

      "id": "Waiting for Horizon node unregister to complete: {UpdateStatus}",

      "translation": "Waiting for Horizon node unregister to complete: {UpdateStatus}"
    },
    {

      "id": "No Timeout specified ...",

      "translation": "No Timeout specified ..."
    },
    {

      "id": "Stopping horizon...",

      "translation": "Stopping horizon..."
    },
    {

      "id": "Node configuration state: {State}",

      "translation": "Node configuration state: {State}"
    },
    {

      "id": "Timeout waiting for node change to 'unconfigured' state.",

      "translation": "Timeout waiting for node change to 'unconfigured' state."
    },
    {

      "id": "unable to list containers, {Err}",

      "translation": "unable to list containers, {Err}"
    },
    {

      "id": "Error deleting container {Names0}. {Err}",

      "translation": "Error deleting container {Names0}. {Err}"
    },
    {

      "id": "Removed service container: {Names0}",

      "translation": "Removed service container: {Names0}"
    },
    {

      "id": "Error pruning docker networks. {Err}",

      "translation": "Error pruning docker networks. {Err}"
    },
    {

      "id": "New dependency created: {Target} .",

      "translation": "New dependency created: {Target} ."
    },
    {

      "id": "'{DEPENDENCYCOMMAND} {DEPENDENCYLISTCOMMAND}' unable to create json object from dependencies, {Err}",

      "translation": "'{DEPENDENCYCOMMAND} {DEPENDENCYLISTCOMMAND}' unable to create json object from dependencies, {Err}"
    },
    {

      "id": "Unable to set env var 'HZN_DONT_SUBST_ENV_VARS', error {Err}",

      "translation": "Unable to set env var 'HZN_DONT_SUBST_ENV_VARS', error {Err}"
    },
    {

      "id": "Unable to restore env var 'HZN_DONT_SUBST_ENV_VARS', error {Err}",

      "translation": "Unable to restore env var 'HZN_DONT_SUBST_ENV_VARS', error {Err}"
    },
    {

      "id": "unable to get list of dependency files in {DepPath}, error: {Err}",

      "translation": "unable to get list of dependency files in {DepPath}, error: {Err}"
    },
    {

      "id": "could not create dependency directory {NewDir}, error: {Err}",

      "translation": "could not create dependency directory {NewDir}, error: {Err}"
    },
    {

      "id": "dependency validation failed, unable to read {Name}, error: {Err}",

      "translation": "dependency validation failed, unable to read {Name}, error: {Err}"
    },
    {

      "id": "dependency validation failed, dependency {Name} has an invalid version {Version}, error: {Err}",

      "translation": "dependency validation failed, dependency {Name} has an invalid version {Version}, error: {Err}"
    },
    {

      "id": "dependency validation failed, unable to verify version range {Version} is within required range {Expression}, error: {Err}",

      "translation": "dependency validation failed, unable to verify version range {Version} is within required range {Expression}, error: {Err}"
    },
    {

      "id": "dependency {URL} at version {VersionRange} does not exist in {Joindirectory_DEFAULTDEPENDENCYDIR}.",

      "translation": "dependency {URL} at version {VersionRange} does not exist in {Joindirectory_DEFAULTDEPENDENCYDIR}."
    },
    {

      "id": "dependency {Name} did not validate, error: {Err}",

      "translation": "dependency {Name} did not validate, error: {Err}"
    },
    {

      "id": "variable {Name} has no default and must be specified in {UserInputsFilePath}",

      "translation": "variable {Name} has no default and must be specified in {UserInputsFilePath}"
    },
    {

      "id": "--specRef is mutually exclusive with --url.",

      "translation": "--specRef is mutually exclusive with --url."
    },
    {

      "id": "--project is mutually exclusive with --specRef, --org and --url.",

      "translation": "--project is mutually exclusive with --specRef, --org and --url."
    },
    {

      "id": "one of --project, or --specRef and --org, or --url and --org must be specified.",

      "translation": "one of --project, or --specRef and --org, or --url and --org must be specified."
    },
    {

      "id": "either --specRef and --org, or --url and --org must be specified.",

      "translation": "either --specRef and --org, or --url and --org must be specified."
    },
    {

      "id": "use --url with service projects.",

      "translation": "use --url with service projects."
    },
    {

      "id": "--project {Project} does not contain Horizon service metadata.",

      "translation": "--project {Project} does not contain Horizon service metadata."
    },
    {

      "id": "Reading Horizon metadata from {Dir}",

      "translation": "Reading Horizon metadata from {Dir}"
    },
    {

      "id": "--specRef or --url is required for remove.",

      "translation": "--specRef or --url is required for remove."
    },
    {

      "id": "--specRef and --url are mutually exclusive.",

      "translation": "--specRef and --url are mutually exclusive."
    },
    {

      "id": "Service project {Dir} verified.",

      "translation": "Service project {Dir} verified."
    },
    {

      "id": "Unable to set env var 'HZN_DONT_SUBST_ENV_VARS' to zero, error {Err}",

      "translation": "Unable to set env var 'HZN_DONT_SUBST_ENV_VARS' to zero, error {Err}"
    },
    {

      "id": "Failed to get the hzn.json configuration file under {Project} directory. Error: {Err}",

      "translation": "Failed to get the hzn.json configuration file under {Project} directory. Error: {Err}"
    },
    {

      "id": "Failed to set the environment variables from configuration file {Projconfigfile}. Error: {Err}",

      "translation": "Failed to set the environment variables from configuration file {Projconfigfile}. Error: {Err}"
    },
    {

      "id": "Reading Horizon metadata from dependency: {AbsProject}",

      "translation": "Reading Horizon metadata from dependency: {AbsProject}"
    },
    {

      "id": "Found dependency {URL}, Org: {Org}",

      "translation": "Found dependency {URL}, Org: {Org}"
    },
    {

      "id": "Failed to restore the environment variables. {Err}",

      "translation": "Failed to restore the environment variables. {Err}"
    },
    {

      "id": "Updated {HomeDirectory}/{USERINPUTFILE} with the dependency's variable and global attribute configuration.",

      "translation": "Updated {HomeDirectory}/{USERINPUTFILE} with the dependency's variable and global attribute configuration."
    },
    {

      "id": "To ensure that the dependency operates correctly, please add variable values to the userinput.json file if this service needs any.",

      "translation": "To ensure that the dependency operates correctly, please add variable values to the userinput.json file if this service needs any."
    },
    {

      "id": "The current project already has userinputs defined for this dependency.",

      "translation": "The current project already has userinputs defined for this dependency."
    },
    {

      "id": "Updated {HomeDirectory}/{USERINPUTFILE} with the dependency's variable configuration.",

      "translation": "Updated {HomeDirectory}/{USERINPUTFILE} with the dependency's variable configuration."
    },
    {

      "id": "unsupported project type",

      "translation": "unsupported project type"
    },
    {

      "id": "Created {FilePath}/{FileName} as a new dependency.",

      "translation": "Created {FilePath}/{FileName} as a new dependency."
    },
    {

      "id": "unable to find highest version of {Surl} {Org} in the exchange: {Services}",

      "translation": "unable to find highest version of {Surl} {Org} in the exchange: {Services}"
    },
    {

      "id": "no services found in the exchange.",

      "translation": "no services found in the exchange."
    },
    {

      "id": "Creating dependency on: {ServiceDef}, Org: {Org}",

      "translation": "Creating dependency on: {ServiceDef}, Org: {Org}"
    },
    {

      "id": "failed to unmarshal deployment {Deployment}: {Err}",

      "translation": "failed to unmarshal deployment {Deployment}: {Err}"
    },
    {

      "id": "The image docker auths for the service {Org}/{Surl} are: {Imgauths}",

      "translation": "The image docker auths for the service {Org}/{Surl} are: {Imgauths}"
    },
    {

      "id": "failed to get images for {Org}/{Surl}: {Err}",

      "translation": "failed to get images for {Org}/{Surl}: {Err}"
    },
    {

      "id": "Unable to get dependency info for {Sp} , error {Err}",

      "translation": "Unable to get dependency info for {Sp} , error {Err}"
    },
    {

      "id": "'dependency {DEPENDENCYREMOVECOMMAND}' failed to get a list of dependecies. Error {Err}",

      "translation": "'dependency {DEPENDENCYREMOVECOMMAND}' failed to get a list of dependecies. Error {Err}"
    },
    {

      "id": "All dependencies are: {Deps}",

      "translation": "All dependencies are: {Deps}"
    },
    {

      "id": "Found dependency: {Name}",

      "translation": "Found dependency: {Name}"
    },
    {

      "id": "Will not remove dependency {Name} because it is referenced by other services.",

      "translation": "Will not remove dependency {Name} because it is referenced by other services."
    },
    {

      "id": "'dependency {DEPENDENCYREMOVECOMMAND}' dependency not found.",

      "translation": "'dependency {DEPENDENCYREMOVECOMMAND}' dependency not found."
    },
    {

      "id": "Could not read the dependency file {Name}. Error: {Err}",

      "translation": "Could not read the dependency file {Name}. Error: {Err}"
    },
    {

      "id": "Error updating project definition: {Err}",

      "translation": "Error updating project definition: {Err}"
    },
    {

      "id": "Dependency {Name} could not be removed. Error: {Err}",

      "translation": "Dependency {Name} could not be removed. Error: {Err}"
    },
    {

      "id": "Error updating userinputs: {Err}",

      "translation": "Error updating userinputs: {Err}"
    },
    {

      "id": "Removed dependency {Arch}.",

      "translation": "Removed dependency {Arch}."
    },
    {

      "id": "Removed dependency's dependency {Arch}.",

      "translation": "Removed dependency's dependency {Arch}."
    },
    {

      "id": "error creating {DOCKERFILE} for service image. {Err}",

      "translation": "error creating {DOCKERFILE} for service image. {Err}"
    },
    {

      "id": "Edge $SERVICE_NAME Service Pattern for $ARCH",

      "translation": "Edge $SERVICE_NAME Service Pattern for $ARCH"
    },
    {

      "id": "Pattern for $SERVICE_NAME for $ARCH",

      "translation": "Pattern for $SERVICE_NAME for $ARCH"
    },
    {

      "id": "Edge $SERVICE_NAME Service Pattern for all architectures",

      "translation": "Edge $SERVICE_NAME Service Pattern for all architectures"
    },
    {

      "id": "Pattern for $SERVICE_NAME",

      "translation": "Pattern for $SERVICE_NAME"
    },
    {

      "id": "'{SERVICECOMMAND} {SERVICECREATIONCOMMAND}' Failed to get the service name from the image name. {Err}",

      "translation": "'{SERVICECOMMAND} {SERVICECREATIONCOMMAND}' Failed to get the service name from the image name. {Err}"
    },
    {

      "id": "Creating config file for environmental variables: {Dir}/{HZNENVFILE}",

      "translation": "Creating config file for environmental variables: {Dir}/{HZNENVFILE}"
    },
    {

      "id": "Creating user input file: {Dir}/{USERINPUTFILE}",

      "translation": "Creating user input file: {Dir}/{USERINPUTFILE}"
    },
    {

      "id": "Creating service definition file: {Dir}/{SERVICEDEFINITIONFILE}",

      "translation": "Creating service definition file: {Dir}/{SERVICEDEFINITIONFILE}"
    },
    {

      "id": "Creating pattern definition file: {Dir}/{PATTERNDEFINITIONFILE}",

      "translation": "Creating pattern definition file: {Dir}/{PATTERNDEFINITIONFILE}"
    },
    {

      "id": "Creating service policy file: {Dir}/{SERVICEPOLICYFILE}",

      "translation": "Creating service policy file: {Dir}/{SERVICEPOLICYFILE}"
    },
    {

      "id": "Creating .gitignore files for source code management.",

      "translation": "Creating .gitignore files for source code management."
    },
    {

      "id": "Creating image generation files under {Currentdir} directory.",

      "translation": "Creating image generation files under {Currentdir} directory."
    },
    {

      "id": "Created image generation files in {Currentdir} and horizon metadata files in {Dir}. Edit these files to define and configure your new {SERVICECOMMAND}.",

      "translation": "Created image generation files in {Currentdir} and horizon metadata files in {Dir}. Edit these files to define and configure your new {SERVICECOMMAND}."
    },
    {

      "id": "Created horizon metadata files in {Dir}. Edit these files to define and configure your new {SERVICECOMMAND}.",

      "translation": "Created horizon metadata files in {Dir}. Edit these files to define and configure your new {SERVICECOMMAND}."
    },
    {

      "id": "must specify either --org or set the {DEVTOOLHZNORG} environment variable.",

      "translation": "must specify either --org or set the {DEVTOOLHZNORG} environment variable."
    },
    {

      "id": "invalid version string: {Version}",

      "translation": "invalid version string: {Version}"
    },
    {

      "id": "only support one image for a service unless --noImageGen flag is specified.",

      "translation": "only support one image for a service unless --noImageGen flag is specified."
    },
    {

      "id": "image {Image} has invalid format.",

      "translation": "image {Image} has invalid format."
    },
    {

      "id": "please specify the image name with -i flag.",

      "translation": "please specify the image name with -i flag."
    },
    {

      "id": "unsupported deployment config type: {Dconfig}",

      "translation": "unsupported deployment config type: {Dconfig}"
    },
    {

      "id": "$SERVICE_NAME for $ARCH",

      "translation": "$SERVICE_NAME for $ARCH"
    },
    {

      "id": "Who to say hello to",

      "translation": "Who to say hello to"
    },
    {

      "id": "unknown deployment type: {DeploymentType}",

      "translation": "unknown deployment type: {DeploymentType}"
    },
    {

      "id": "{FilePath}: URL must be set.",

      "translation": "{FilePath}: URL must be set."
    },
    {

      "id": "{FilePath}: version must be set to a specific version, e.g. 1.0.0.",

      "translation": "{FilePath}: version must be set to a specific version, e.g. 1.0.0."
    },
    {

      "id": "{FilePath}: org must be set.",

      "translation": "{FilePath}: org must be set."
    },
    {

      "id": "{FilePath}: deployment configuration, {Err}",

      "translation": "{FilePath}: deployment configuration, {Err}"
    },
    {

      "id": "{FilePath}: userInput array index {Ix} does not have name and type specified.",

      "translation": "{FilePath}: userInput array index {Ix} does not have name and type specified."
    },
    {

      "id": "Updated {HomeDirectory}/{SERVICEDEFINITIONFILE} dependencies.",

      "translation": "Updated {HomeDirectory}/{SERVICEDEFINITIONFILE} dependencies."
    },
    {

      "id": "No need to update {HomeDirectory}/{SERVICEDEFINITIONFILE} dependencies.",

      "translation": "No need to update {HomeDirectory}/{SERVICEDEFINITIONFILE} dependencies."
    },
    {

      "id": "error creating {HORIZONGITIGNOREFILE} for source code management. {Err}",

      "translation": "error creating {HORIZONGITIGNOREFILE} for source code management. {Err}"
    },
    {

      "id": "unable to demarshal {UserInputFilePath} file, error: {Err}",

      "translation": "unable to demarshal {UserInputFilePath} file, error: {Err}"
    },
    {

      "id": "Converted userinput attribute: {GlobalSet} to API attribute: {Attr}",

      "translation": "Converted userinput attribute: {GlobalSet} to API attribute: {Attr}"
    },
    {

      "id": "{GlobalSet} encountered error: {Error}",

      "translation": "{GlobalSet} encountered error: {Error}"
    },
    {

      "id": "Converted API Attributes: {Global} to persistent attributes: {Attributes}",

      "translation": "Converted API Attributes: {Global} to persistent attributes: {Attributes}"
    },
    {

      "id": "{OriginalUserInputFilePath}: global array element ({GlobalSet}) has an empty type, must be one of the supported attribute types. See the Horizon agent /attribute API.",

      "translation": "{OriginalUserInputFilePath}: global array element ({GlobalSet}) has an empty type, must be one of the supported attribute types. See the Horizon agent /attribute API."
    },
    {

      "id": "{USERINPUTFILE} has error: {Err}",

      "translation": "{USERINPUTFILE} has error: {Err}"
    },
    {

      "id": "{OriginalUserInputFilePath}: services array element at index {Ix} is {MicroWork} {Err}",

      "translation": "{OriginalUserInputFilePath}: services array element at index {Ix} is {MicroWork} {Err}"
    },
    {

      "id": "{OriginalUserInputFilePath}: services array does not contain an element for {URL}. Error: {Err}",

      "translation": "{OriginalUserInputFilePath}: services array does not contain an element for {URL}. Error: {Err}"
    },
    {

      "id": "please provice a user input file for service {URL}. Error: {Err}",

      "translation": "please provice a user input file for service {URL}. Error: {Err}"
    },
    {

      "id": "has empty org, must be set to the name of the organization that owns the service.",

      "translation": "has empty org, must be set to the name of the organization that owns the service."
    },
    {

      "id": "has empty url. Must be set to this service's url or a dependency's url.",

      "translation": "has empty url. Must be set to this service's url or a dependency's url."
    },
    {

      "id": "sets variable {VarName} using a value of {Err}.",

      "translation": "sets variable {VarName} using a value of {Err}."
    },
    {

      "id": "sets variable {VarName} of type {VarValue} that is not defined.",

      "translation": "sets variable {VarName} of type {VarValue} that is not defined."
    },
    {

      "id": "Updated {HomeDirectory}/{USERINPUTFILE}.",

      "translation": "Updated {HomeDirectory}/{USERINPUTFILE}."
    },
    {

      "id": "No need to update {HomeDirectory}/{USERINPUTFILE}.",

      "translation": "No need to update {HomeDirectory}/{USERINPUTFILE}."
    },
    {

      "id": "could not create directory {NewDepDir}, error: {Err}",

      "translation": "could not create directory {NewDepDir}, error: {Err}"
    },
    {

      "id": "could not get status of directory {NewDepDir}, error: {Err}",

      "translation": "could not get status of directory {NewDepDir}, error: {Err}"
    },
    {

      "id": "Using working directory: {Dir}",

      "translation": "Using working directory: {Dir}"
    },
    {

      "id": "horizon project in {Dir} already contains {FileName}.",

      "translation": "horizon project in {Dir} already contains {FileName}."
    },
    {

      "id": "error checking for {FileName}: {Err}",

      "translation": "error checking for {FileName}: {Err}"
    },
    {

      "id": "failed to unmarshal {FilePath}, error: {Err}",

      "translation": "failed to unmarshal {FilePath}, error: {Err}"
    },
    {

      "id": "failed to create json object for {FileName}, error: {Err}",

      "translation": "failed to create json object for {FileName}, error: {Err}"
    },
    {

      "id": "unable to write json object for {FileName} to file {FilePath}, error: {Err}",

      "translation": "unable to write json object for {FileName} to file {FilePath}, error: {Err}"
    },
    {

      "id": "Must set environment variable {DEVTOOLHZNORG} or specify the user as 'org/user' on the --user-pw flag",

      "translation": "Must set environment variable {DEVTOOLHZNORG} or specify the user as 'org/user' on the --user-pw flag"
    },
    {

      "id": "Must set environment variable {DEVTOOLHZNUSER} or specify user exchange credentials with --user-pw",

      "translation": "Must set environment variable {DEVTOOLHZNUSER} or specify user exchange credentials with --user-pw"
    },
    {

      "id": "Unable to set env var {DEVTOOLHZNEXCHANGEURL} to {ExchangeUrl}, error {Err}",

      "translation": "Unable to set env var {DEVTOOLHZNEXCHANGEURL} to {ExchangeUrl}, error {Err}"
    },
    {

      "id": "Environment variable {DEVTOOLHZNEXCHANGEURL} must be set.",

      "translation": "Environment variable {DEVTOOLHZNEXCHANGEURL} must be set."
    },
    {

      "id": "project has no horizon metadata directory. Use hzn dev to create a new project. Error: {Err}",

      "translation": "project has no horizon metadata directory. Use hzn dev to create a new project. Error: {Err}"
    },
    {

      "id": "'{ProjectType} {Cmd}' project does not validate. {Derr}",

      "translation": "'{ProjectType} {Cmd}' project does not validate. {Derr}"
    },
    {

      "id": "'{ProjectType} {Cmd}' project does not validate. {Verr}",

      "translation": "'{ProjectType} {Cmd}' project does not validate. {Verr}"
    },
    {

      "id": "'{ProjectType} {Cmd}' Must specify configuration file type (-t) when a configuration file is specified (-m).",

      "translation": "'{ProjectType} {Cmd}' Must specify configuration file type (-t) when a configuration file is specified (-m)."
    },
    {

      "id": "'{ProjectType} {Cmd}' configuration file {FileRef} error {Err}",

      "translation": "'{ProjectType} {Cmd}' configuration file {FileRef} error {Err}"
    },
    {

      "id": "project does not validate. {Verr}",

      "translation": "project does not validate. {Verr}"
    },
    {

      "id": "project in {Dir} is not a horizon project.",

      "translation": "project in {Dir} is not a horizon project."
    },
    {

      "id": "Final Attributes: {Attrs}",

      "translation": "Final Attributes: {Attrs}"
    },
    {

      "id": "global attribute conversion error: {Cerr}",

      "translation": "global attribute conversion error: {Cerr}"
    },
    {

      "id": "'{ProjectType} {Cmd}' unable to create Container Worker, {Cerr}",

      "translation": "'{ProjectType} {Cmd}' unable to create Container Worker, {Cerr}"
    },
    {

      "id": "unable to list existing containers: {Err}",

      "translation": "unable to list existing containers: {Err}"
    },
    {

      "id": "Found main network for service {Nwname}, {ContainerNetwork}",

      "translation": "Found main network for service {Nwname}, {ContainerNetwork}"
    },
    {

      "id": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' {StartErr} for dependency {URL}",

      "translation": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' {StartErr} for dependency {URL}"
    },
    {

      "id": "unable to retrieve dependency metadata: {Err}",

      "translation": "unable to retrieve dependency metadata: {Err}"
    },
    {

      "id": "unable to start dependencies: {Err}",

      "translation": "unable to start dependencies: {Err}"
    },
    {

      "id": "Skipping service because it has no deployment configuration: {DepConfig}",

      "translation": "Skipping service because it has no deployment configuration: {DepConfig}"
    },
    {

      "id": "unable to generate instance ID: {Err}",

      "translation": "unable to generate instance ID: {Err}"
    },
    {

      "id": "unable to create environment variables",

      "translation": "unable to create environment variables"
    },
    {

      "id": "Passing environment variables: {EnvironmentAdditions}",

      "translation": "Passing environment variables: {EnvironmentAdditions}"
    },
    {

      "id": "Start {LogName}: {CLIString} with instance id prefix {Id}",

      "translation": "Start {LogName}: {CLIString} with instance id prefix {Id}"
    },
    {

      "id": "unable to start container using {CLIString}, error: {StartErr}",

      "translation": "unable to start container using {CLIString}, error: {StartErr}"
    },
    {

      "id": "Running {LogName}.",

      "translation": "Running {LogName}."
    },
    {

      "id": "Stopping dependencies.",

      "translation": "Stopping dependencies."
    },
    {

      "id": "unable to stop dependencies: {Err}",

      "translation": "unable to stop dependencies: {Err}"
    },
    {

      "id": "Found containers {Containers}",

      "translation": "Found containers {Containers}"
    },
    {

      "id": "Stop {LogName}: {CLIString} with instance id prefix {MsId}",

      "translation": "Stop {LogName}: {CLIString} with instance id prefix {MsId}"
    },
    {

      "id": "failed to create docker client, error: {Derr}",

      "translation": "failed to create docker client, error: {Derr}"
    },
    {

      "id": "failed to convert global attributes in {USERINPUTFILE}, error: {Err}",

      "translation": "failed to convert global attributes in {USERINPUTFILE}, error: {Err}"
    },
    {

      "id": "failed to extract authentication attribute from {USERINPUTFILE}, error: {Err}",

      "translation": "failed to extract authentication attribute from {USERINPUTFILE}, error: {Err}"
    },
    {

      "id": "getting container images into docker.",

      "translation": "getting container images into docker."
    },
    {

      "id": "failed to get container images, error: {Err}",

      "translation": "failed to get container images, error: {Err}"
    },
    {

      "id": "invalid image format: {Image}",

      "translation": "invalid image format: {Image}"
    },
    {

      "id": "file {FilePath} exists already",

      "translation": "file {FilePath} exists already"
    },
    {

      "id": "unable to write content to file {FilePath}, error: {Err}",

      "translation": "unable to write content to file {FilePath}, error: {Err}"
    },
    {

      "id": "horizon api agreement output did not include 'agreements' key",

      "translation": "horizon api agreement output did not include 'agreements' key"
    },
    {

      "id": "horizon api agreement output did not include '{WhichAgreements}' key",

      "translation": "horizon api agreement output did not include '{WhichAgreements}' key"
    },
    {

      "id": "failed to marshal 'hzn metering list' output: {Err}",

      "translation": "failed to marshal 'hzn metering list' output: {Err}"
    },
    {

      "id": "unable to set env var 'HORIZON_URL', error {Err}",

      "translation": "unable to set env var 'HORIZON_URL', error {Err}"
    },
    {

      "id": "failed to marshal 'agreement list' output: {Err}",

      "translation": "failed to marshal 'agreement list' output: {Err}"
    },
    {

      "id": "either an agreement ID or -a must be specified.",

      "translation": "either an agreement ID or -a must be specified."
    },
    {

      "id": "Canceling agreement {Id} ...",

      "translation": "Canceling agreement {Id} ..."
    },
    {

      "id": "failed to marshal 'hzn node list' output: {Err}",

      "translation": "failed to marshal 'hzn node list' output: {Err}"
    },
    {

      "id": "failed to marshal 'policy list' output: {Err}",

      "translation": "failed to marshal 'policy list' output: {Err}"
    },
    {

      "id": "Error: The organization '{Org}' does not exist.",

      "translation": "Error: The organization '{Org}' does not exist."
    },
    {

      "id": "Error: Either the organization '{Org}' does not exist or the policy '{Name}' is not hosted by this agbot.",

      "translation": "Error: Either the organization '{Org}' does not exist or the policy '{Name}' is not hosted by this agbot."
    },
    {

      "id": "failed to marshal 'exchange agbot list' output: {Err}",

      "translation": "failed to marshal 'exchange agbot list' output: {Err}"
    },
    {

      "id": "agbot '{Agbot}' not found in org {Org}",

      "translation": "agbot '{Agbot}' not found in org {Org}"
    },
    {

      "id": "both patternorg and pattern must be specified (or neither)",

      "translation": "both patternorg and pattern must be specified (or neither)"
    },
    {

      "id": "pattern '{Pattern}' with org '{PatternOrg}' and node org '{NodeOrg}' not found in agbot '{Agbot}'",

      "translation": "pattern '{Pattern}' with org '{PatternOrg}' and node org '{NodeOrg}' not found in agbot '{Agbot}'"
    },
    {

      "id": "Pattern '{Pattern}' with org '{PatternOrg}' and node org '{NodeOrg}' already exists in agbot '{Agbot}'",

      "translation": "Pattern '{Pattern}' with org '{PatternOrg}' and node org '{NodeOrg}' already exists in agbot '{Agbot}'"
    },
    {

      "id": "Adding Business policy org {PolOrg}' to agbot '{Agbot}'. The agbot will start looking for nodes that are compatible with this policy.",

      "translation": "Adding Business policy org {PolOrg}' to agbot '{Agbot}'. The agbot will start looking for nodes that are compatible with this policy."
    },
    {

      "id": "Business policy org {PolOrg}' already exists in agbot '{Agbot}'",

      "translation": "Business policy org {PolOrg}' already exists in agbot '{Agbot}'"
    },
    {

      "id": "Removing Business policy org {PolOrg}' to agbot '{Agbot}'. The agbot is no longer looking for nodes that are compatible with this policy.",

      "translation": "Removing Business policy org {PolOrg}' to agbot '{Agbot}'. The agbot is no longer looking for nodes that are compatible with this policy."
    },
    {

      "id": "Policy {Policy} not found in org {PolOrg}",

      "translation": "Policy {Policy} not found in org {PolOrg}"
    },
    {

      "id": "failed to marshal 'hzn exchange business listpolicy' output: {Err}",

      "translation": "failed to marshal 'hzn exchange business listpolicy' output: {Err}"
    },
    {

      "id": "Incorrect business policy format in file {JsonFilePath}: {Err}",

      "translation": "Incorrect business policy format in file {JsonFilePath}: {Err}"
    },
    {

      "id": "Business policy: {Org}/{Policy} updated in the Horizon Exchange",

      "translation": "Business policy: {Org}/{Policy} updated in the Horizon Exchange"
    },
    {

      "id": "Business policy: {Org}/{Policy} added in the Horizon Exchange",

      "translation": "Business policy: {Org}/{Policy} added in the Horizon Exchange"
    },
    {

      "id": "failed to unmarshal attribute input {Attribute}: {Err}",

      "translation": "failed to unmarshal attribute input {Attribute}: {Err}"
    },
    {

      "id": "Updating Policy {Org}/{PolicyName} in the Horizon Exchange and re-evaluating all agreements based on this Business policy. Existing agreements might be cancelled and re-negotiated.",

      "translation": "Updating Policy {Org}/{PolicyName} in the Horizon Exchange and re-evaluating all agreements based on this Business policy. Existing agreements might be cancelled and re-negotiated."
    },
    {

      "id": "Policy {Org}/{PolicyName} updated in the Horizon Exchange",

      "translation": "Policy {Org}/{PolicyName} updated in the Horizon Exchange"
    },
    {

      "id": "Invalid format for properties: {Err}",

      "translation": "Invalid format for properties: {Err}"
    },
    {

      "id": "Invalid format for constraints: {Err}",

      "translation": "Invalid format for constraints: {Err}"
    },
    {

      "id": "Business policy attribute to be updated is not found in the input file. Supported attributes are: label, description, service, properties, constraints, and userInput.",

      "translation": "Business policy attribute to be updated is not found in the input file. Supported attributes are: label, description, service, properties, constraints, and userInput."
    },
    {

      "id": "Are you sure you want to remove business policy {Policy} for org {Org} from the Horizon Exchange?",

      "translation": "Are you sure you want to remove business policy {Policy} for org {Org} from the Horizon Exchange?"
    },
    {

      "id": "Policy {Org}/{Policy} not found in the Horizon Exchange",

      "translation": "Policy {Org}/{Policy} not found in the Horizon Exchange"
    },
    {

      "id": "Removing Business policy {Org}/{Policy} and re-evaluating all agreements based on just the built-in node policy. Existing agreements might be cancelled and re-negotiated",

      "translation": "Removing Business policy {Org}/{Policy} and re-evaluating all agreements based on just the built-in node policy. Existing agreements might be cancelled and re-negotiated"
    },
    {

      "id": "Business policy {Org}/{Policy} removed",

      "translation": "Business policy {Org}/{Policy} removed"
    },
    {

      "id": "Business policy label.",

      "translation": "Business policy label."
    },
    {

      "id": "Business policy description.",

      "translation": "Business policy description."
    },
    {

      "id": "The name of the service.",

      "translation": "The name of the service."
    },
    {

      "id": "The org of the service.",

      "translation": "The org of the service."
    },
    {

      "id": "Set to '*' to use services of any hardware architecture.",

      "translation": "Set to '*' to use services of any hardware architecture."
    },
    {

      "id": "A list of service versions.",

      "translation": "A list of service versions."
    },
    {

      "id": "A list of policy properties that describe the service being dployed.",

      "translation": "A list of policy properties that describe the service being dployed."
    },
    {

      "id": "A list of constraint expressions of the form <property name> <operator> <property value>,",

      "translation": "A list of constraint expressions of the form <property name> <operator> <property value>,"
    },
    {

      "id": "separated by boolean operators AND (&&) or OR (||).",

      "translation": "separated by boolean operators AND (&&) or OR (||)."
    },
    {

      "id": "A list of userInput variables to set when the service runs, listed by service.",

      "translation": "A list of userInput variables to set when the service runs, listed by service."
    },
    {

      "id": "The service version range to which these variables should be applied.",

      "translation": "The service version range to which these variables should be applied."
    },
    {

      "id": "The input variables to be set.",

      "translation": "The input variables to be set."
    },
    {

      "id": "Flags -s and -l are mutually exclusive.",

      "translation": "Flags -s and -l are mutually exclusive."
    },
    {

      "id": "failed to marshal 'hzn exchange catalog servicelist -l' output: {Err}",

      "translation": "failed to marshal 'hzn exchange catalog servicelist -l' output: {Err}"
    },
    {

      "id": "failed to marshal 'hzn exchange catalog servicelist -s' output: {Err}",

      "translation": "failed to marshal 'hzn exchange catalog servicelist -s' output: {Err}"
    },
    {

      "id": "failed to marshal 'hzn exchange catalog servicelist' output: {Err}",

      "translation": "failed to marshal 'hzn exchange catalog servicelist' output: {Err}"
    },
    {

      "id": "failed to marshal 'hzn exchange catalog patternlist -l' output: {Err}",

      "translation": "failed to marshal 'hzn exchange catalog patternlist -l' output: {Err}"
    },
    {

      "id": "failed to marshal 'hzn exchange catalog patternlist -s' output: {Err}",

      "translation": "failed to marshal 'hzn exchange catalog patternlist -s' output: {Err}"
    },
    {

      "id": "failed to marshal 'hzn exchange catalog patternlist' output: {Err}",

      "translation": "failed to marshal 'hzn exchange catalog patternlist' output: {Err}"
    },
    {

      "id": "no service name",

      "translation": "no service name"
    },
    {

      "id": "no docker image for service {ServiceName}",

      "translation": "no docker image for service {ServiceName}"
    },
    {

      "id": "failed to marshal body for {D}: {Err}",

      "translation": "failed to marshal body for {D}: {Err}"
    },
    {

      "id": "failed to unmarshal json for deployment field {StringjsonBytes}: {Err}",

      "translation": "failed to unmarshal json for deployment field {StringjsonBytes}: {Err}"
    },
    {

      "id": "failed to marshal 'exchange node list' output: {Err}",

      "translation": "failed to marshal 'exchange node list' output: {Err}"
    },
    {

      "id": "node '{Node}' not found in org {Org}",

      "translation": "node '{Node}' not found in org {Org}"
    },
    {

      "id": "if node or token are specified then they both must be specified",

      "translation": "if node or token are specified then they both must be specified"
    },
    {

      "id": "do not specify both the -n flag and the node and token positional arguments. They mean the same thing.",

      "translation": "do not specify both the -n flag and the node and token positional arguments. They mean the same thing."
    },
    {

      "id": "either the node and token positional arguments, or the -n flag must be specified.",

      "translation": "either the node and token positional arguments, or the -n flag must be specified."
    },
    {

      "id": "User {Org}/{User} does not exist in the exchange with the specified password, creating it...",

      "translation": "User {Org}/{User} does not exist in the exchange with the specified password, creating it..."
    },
    {

      "id": "user '{Org}/{User}' does not exist with the specified password or -e was not specified to be able to create it in the 'public' org.",

      "translation": "user '{Org}/{User}' does not exist with the specified password or -e was not specified to be able to create it in the 'public' org."
    },
    {

      "id": "key '{OrgAndCredsorg_nodeId}' not found in exchange nodes output",

      "translation": "key '{OrgAndCredsorg_nodeId}' not found in exchange nodes output"
    },
    {

      "id": "can not update existing node {NodeId} because it is owned by another user ({Owner})",

      "translation": "can not update existing node {NodeId} because it is owned by another user ({Owner})"
    },
    {

      "id": "Node {Org}/{Node} not found in the Horizon Exchange.",

      "translation": "Node {Org}/{Node} not found in the Horizon Exchange."
    },
    {

      "id": "Node {Node} updated in the Horizon Exchange.",

      "translation": "Node {Node} updated in the Horizon Exchange."
    },
    {

      "id": "-n is mutually exclusive with <node> and <token> arguments.",

      "translation": "-n is mutually exclusive with <node> and <token> arguments."
    },
    {

      "id": "Please specify both node and token.",

      "translation": "Please specify both node and token."
    },
    {

      "id": "Are you sure you want to remove node {Org}/{Node} from the Horizon Exchange (should not be done while an edge node is registered with this node id)?",

      "translation": "Are you sure you want to remove node {Org}/{Node} from the Horizon Exchange (should not be done while an edge node is registered with this node id)?"
    },
    {

      "id": "node '{Org}/{Node}' not found.",

      "translation": "node '{Org}/{Node}' not found."
    },
    {

      "id": "Incorrect policy format in file {JsonFilePath}: {Err}",

      "translation": "Incorrect policy format in file {JsonFilePath}: {Err}"
    },
    {

      "id": "Node policy not found for node {Node}/{Org}",

      "translation": "Node policy not found for node {Node}/{Org}"
    },
    {

      "id": "Invalid property list {Attribute}: {Err}",

      "translation": "Invalid property list {Attribute}: {Err}"
    },
    {

      "id": "Updating Node {Node} policy properties in the horizon exchange and re-evaluating all agreements based on this policy. Existing agreements might be cancelled and re-negotiated.",

      "translation": "Updating Node {Node} policy properties in the horizon exchange and re-evaluating all agreements based on this policy. Existing agreements might be cancelled and re-negotiated."
    },
    {

      "id": "Node {Node} policy properties updated in the horizon exchange.",

      "translation": "Node {Node} policy properties updated in the horizon exchange."
    },
    {

      "id": "Invalid constraint expression {Attribute}: {Err}",

      "translation": "Invalid constraint expression {Attribute}: {Err}"
    },
    {

      "id": "Updating Node {Node} policy constraints in the horizon exchange and re-evaluating all agreements based on this policy. Existing agreements might be cancelled and re-negotiated.",

      "translation": "Updating Node {Node} policy constraints in the horizon exchange and re-evaluating all agreements based on this policy. Existing agreements might be cancelled and re-negotiated."
    },
    {

      "id": "Node {Node} policy constraints updated in the horizon exchange.",

      "translation": "Node {Node} policy constraints updated in the horizon exchange."
    },
    {

      "id": "Failed to find valid attribute to update in input {Attribute}. Attributes are constraints and properties.",

      "translation": "Failed to find valid attribute to update in input {Attribute}. Attributes are constraints and properties."
    },
    {

      "id": "Are you sure you want to remove node policy for {Org}/{Node} from the Horizon Exchange?",

      "translation": "Are you sure you want to remove node policy for {Org}/{Node} from the Horizon Exchange?"
    },
    {

      "id": "Removing Node policy and re-evaluating all agreements based on just the built-in node policy. Existing agreements might be cancelled and re-negotiated.",

      "translation": "Removing Node policy and re-evaluating all agreements based on just the built-in node policy. Existing agreements might be cancelled and re-negotiated."
    },
    {

      "id": "failed to marshal 'exchange pattern list' output: {Err}",

      "translation": "failed to marshal 'exchange pattern list' output: {Err}"
    },
    {

      "id": "pattern '{Pattern}' not found in org {PatOrg}",

      "translation": "pattern '{Pattern}' not found in org {PatOrg}"
    },
    {

      "id": "failed to marshal 'hzn exchange pattern list' output: {Err}",

      "translation": "failed to marshal 'hzn exchange pattern list' output: {Err}"
    },
    {

      "id": "Pattern {Pattern}/{PatOrg} updated in the Horizon exchange.",

      "translation": "Pattern {Pattern}/{PatOrg} updated in the Horizon exchange."
    },
    {

      "id": "failed to unmarshal json for deployment overrides field {StringjsonBytes}: {Err}",

      "translation": "failed to unmarshal json for deployment overrides field {StringjsonBytes}: {Err}"
    },
    {

      "id": "the org specified in the input file ({Org}) must match the org specified on the command line ({Org_1})",

      "translation": "the org specified in the input file ({Org}) must match the org specified on the command line ({Org_1})"
    },
    {

      "id": "the pattern definition ({Services}) must contain services, unable to proceed",

      "translation": "the pattern definition ({Services}) must contain services, unable to proceed"
    },
    {

      "id": "Signing deployment_overrides field in service {I__1}, serviceVersion number {J__1}",

      "translation": "Signing deployment_overrides field in service {I__1}, serviceVersion number {J__1}"
    },
    {

      "id": "failed to marshal deployment_overrides field in service {I__1}, serviceVersion number {J__1}: {Err}",

      "translation": "failed to marshal deployment_overrides field in service {I__1}, serviceVersion number {J__1}: {Err}"
    },
    {

      "id": "problem signing the deployment_overrides string with {KeyFilePath}: {Err}",

      "translation": "problem signing the deployment_overrides string with {KeyFilePath}: {Err}"
    },
    {

      "id": "Updating {ExchId} in the exchange...",

      "translation": "Updating {ExchId} in the exchange..."
    },
    {

      "id": "Creating {ExchId} in the exchange...",

      "translation": "Creating {ExchId} in the exchange..."
    },
    {

      "id": "Storing {BaseName} with the pattern in the exchange...",

      "translation": "Storing {BaseName} with the pattern in the exchange..."
    },
    {

      "id": "key '{Org____pattern}' not found in resources returned from exchange",

      "translation": "key '{Org____pattern}' not found in resources returned from exchange"
    },
    {

      "id": "verifying deployment_overrides string in service {I__1}, serviceVersion number {J__1}",

      "translation": "verifying deployment_overrides string in service {I__1}, serviceVersion number {J__1}"
    },
    {

      "id": "problem verifying deployment_overrides string in service {I__1}, serviceVersion number {J__1} with {KeyFilePath}: {Err}",

      "translation": "problem verifying deployment_overrides string in service {I__1}, serviceVersion number {J__1} with {KeyFilePath}: {Err}"
    },
    {

      "id": "Deployment_overrides string in service {I__1}, serviceVersion number {J__1} was not signed with the private key associated with this public key {KeyFilePath}.",

      "translation": "Deployment_overrides string in service {I__1}, serviceVersion number {J__1} was not signed with the private key associated with this public key {KeyFilePath}."
    },
    {

      "id": "Are you sure you want to remove pattern {Org}/{Pattern} from the Horizon Exchange?",

      "translation": "Are you sure you want to remove pattern {Org}/{Pattern} from the Horizon Exchange?"
    },
    {

      "id": "key '{KeyName}' not found",

      "translation": "key '{KeyName}' not found"
    },
    {

      "id": "user input {Name} has no default value and is not set",

      "translation": "user input {Name} has no default value and is not set"
    },
    {

      "id": "failed to marshal 'hzn exchange service list' output: {Err}",

      "translation": "failed to marshal 'hzn exchange service list' output: {Err}"
    },
    {

      "id": "service '{Service}' not found in org {SvcOrg}",

      "translation": "service '{Service}' not found in org {SvcOrg}"
    },
    {

      "id": "Flags -I and -P are mutually exclusive.",

      "translation": "Flags -I and -P are mutually exclusive."
    },
    {

      "id": "Adding service policy for service: {ServiceAddPolicyService}",

      "translation": "Adding service policy for service: {ServiceAddPolicyService}"
    },
    {

      "id": "Service policy added for service: {ServiceAddPolicyService}",

      "translation": "Service policy added for service: {ServiceAddPolicyService}"
    },
    {

      "id": "the 'deploymentSignature' field is non-blank, but being ignored, because the 'deployment' field is null",

      "translation": "the 'deploymentSignature' field is non-blank, but being ignored, because the 'deployment' field is null"
    },
    {

      "id": "unable to sign deployment config: {Err}",

      "translation": "unable to sign deployment config: {Err}"
    },
    {

      "id": "the 'deployment' field is a non-empty string, which implies this service is pre-signed, but the 'deploymentSignature' field is empty",

      "translation": "the 'deployment' field is a non-empty string, which implies this service is pre-signed, but the 'deploymentSignature' field is empty"
    },
    {

      "id": "'deployment' field is invalid type. It must be either a json object or a string (for pre-signed)",

      "translation": "'deployment' field is invalid type. It must be either a json object or a string (for pre-signed)"
    },
    {

      "id": "Service {Org}/{ExchId} exists in the exchange, do you want to overwrite it?",

      "translation": "Service {Org}/{ExchId} exists in the exchange, do you want to overwrite it?"
    },
    {

      "id": "Storing {BaseName} with the service in the exchange...",

      "translation": "Storing {BaseName} with the service in the exchange..."
    },
    {

      "id": "Error: registry-token value of '{RegTok}' is not in the required format: registry:user:token. Not storing that in the Horizon exchange.",

      "translation": "Error: registry-token value of '{RegTok}' is not in the required format: registry:user:token. Not storing that in the Horizon exchange."
    },
    {

      "id": "unable to get container images from deployment: {Err}",

      "translation": "unable to get container images from deployment: {Err}"
    },
    {

      "id": "problem verifying deployment string with {KeyFilePath}: {Err}",

      "translation": "problem verifying deployment string with {KeyFilePath}: {Err}"
    },
    {

      "id": "Deployment string was not signed with the private key associated with this public key {KeyFilePath}.",

      "translation": "Deployment string was not signed with the private key associated with this public key {KeyFilePath}."
    },
    {

      "id": "Are you sure you want to remove service {Org}/{Service} from the Horizon Exchange?",

      "translation": "Are you sure you want to remove service {Org}/{Service} from the Horizon Exchange?"
    },
    {

      "id": "keys not found",

      "translation": "keys not found"
    },
    {

      "id": "docker auth {AuthId} not found",

      "translation": "docker auth {AuthId} not found"
    },
    {

      "id": "docker auths not found",

      "translation": "docker auths not found"
    },
    {

      "id": "service '{Org}/{Service}' not found.",

      "translation": "service '{Org}/{Service}' not found."
    },
    {

      "id": "failed to marshal 'hzn exchange service listpolicy' output: {Err}",

      "translation": "failed to marshal 'hzn exchange service listpolicy' output: {Err}"
    },
    {

      "id": "Updating Service policy  and re-evaluating all agreements based on this Service policy. Existing agreements might be cancelled and re-negotiated.",

      "translation": "Updating Service policy  and re-evaluating all agreements based on this Service policy. Existing agreements might be cancelled and re-negotiated."
    },
    {

      "id": "Are you sure you want to remove service policy for {Org}/{Service} from the Horizon Exchange?",

      "translation": "Are you sure you want to remove service policy for {Org}/{Service} from the Horizon Exchange?"
    },
    {

      "id": "Removing Service policy and re-evaluating all agreements based on just the built-in node policy. Existing agreements might be cancelled and re-negotiated.",

      "translation": "Removing Service policy and re-evaluating all agreements based on just the built-in node policy. Existing agreements might be cancelled and re-negotiated."
    },
    {

      "id": "theUser '{TrimPrefixtheUser_}' not found in org {Org}",

      "translation": "theUser '{TrimPrefixtheUser_}' not found in org {Org}"
    },
    {

      "id": "failed to marshal 'exchange user list' output: {Err}",

      "translation": "failed to marshal 'exchange user list' output: {Err}"
    },
    {

      "id": "the email must be specified via -e if the username is not an email address.",

      "translation": "the email must be specified via -e if the username is not an email address."
    },
    {

      "id": "Warning: this will also delete all Exchange resources owned by this user (nodes, services, patterns, etc). Are you sure you want to remove user {Org}/{User} from the Horizon Exchange?",

      "translation": "Warning: this will also delete all Exchange resources owned by this user (nodes, services, patterns, etc). Are you sure you want to remove user {Org}/{User} from the Horizon Exchange?"
    },
    {

      "id": "user '{User}' not found in org {Org}",

      "translation": "user '{User}' not found in org {Org}"
    },
    {

      "id": "Error parsing the selections {Form}. {Err}",

      "translation": "Error parsing the selections {Form}. {Err}"
    },
    {

      "id": "Error getting {Resource} for output, error {Err}",

      "translation": "Error getting {Resource} for output, error {Err}"
    },
    {

      "id": "Error parsing input for node configuration/registration. Input body couldn't be deserialized to node object: {Arg_1}, error: {Arg_2}",

      "translation": "Error parsing input for node configuration/registration. Input body couldn't be deserialized to node object: {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error parsing input for node configuration/registration. Input body couldn't be deserialized to configstate object: {Arg_1}, error: {Arg_2}",

      "translation": "Error parsing input for node configuration/registration. Input body couldn't be deserialized to configstate object: {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error parsing input for node update. Input body couldn't be deserialized to node object: {Arg_1}, error: {Arg_2}",

      "translation": "Error parsing input for node update. Input body couldn't be deserialized to node object: {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error parsing input for node policy. Input body could not be deserialized as a policy object: {Arg_1}, error: {Arg_2}",

      "translation": "Error parsing input for node policy. Input body could not be deserialized as a policy object: {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error parsing input for node policy patch. Input body could not be deserialized into a Constraint Expression or Property List: {Arg_1}, error: {Arg_2}",

      "translation": "Error parsing input for node policy patch. Input body could not be deserialized into a Constraint Expression or Property List: {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error parsing input for node policy patch. Input body did not contain a Constraint Expression or Property List: {Arg_1}, error: {Arg_2}",

      "translation": "Error parsing input for node policy patch. Input body did not contain a Constraint Expression or Property List: {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error parsing input for node user input. Input body could not be deserialized as a UserInput object: {Arg_1}, error: {Arg_2}",

      "translation": "Error parsing input for node user input. Input body could not be deserialized as a UserInput object: {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error in node configuration/registration for node {Arg_1}. {Arg_2}",

      "translation": "Error in node configuration/registration for node {Arg_1}. {Arg_2}"
    },
    {

      "id": "Error in updating node {Arg_1}. {Arg_2}",

      "translation": "Error in updating node {Arg_1}. {Arg_2}"
    },
    {

      "id": "Error in node unregistration. {Arg_1}",

      "translation": "Error in node unregistration. {Arg_1}"
    },
    {

      "id": "Error verifiying exchange version. error: {Arg_1}",

      "translation": "Error verifiying exchange version. error: {Arg_1}"
    },
    {

      "id": "Error in creating or replacing node policy. {Arg_1}",

      "translation": "Error in creating or replacing node policy. {Arg_1}"
    },
    {

      "id": "Error in patching node policy. {Arg_1}",

      "translation": "Error in patching node policy. {Arg_1}"
    },
    {

      "id": "Error in deleting node policy. {Arg_1}",

      "translation": "Error in deleting node policy. {Arg_1}"
    },
    {

      "id": "Error in updating node user input. {Arg_1}",

      "translation": "Error in updating node user input. {Arg_1}"
    },
    {

      "id": "Error in patching node user input. {Arg_1}",

      "translation": "Error in patching node user input. {Arg_1}"
    },
    {

      "id": "Error in deleting node userinput. {Arg_1}",

      "translation": "Error in deleting node userinput. {Arg_1}"
    },
    {

      "id": "Start node configuration/registration for node {Arg_1}.",

      "translation": "Start node configuration/registration for node {Arg_1}."
    },
    {

      "id": "Start updating node {Arg_1}.",

      "translation": "Start updating node {Arg_1}."
    },
    {

      "id": "Complete node update for {Arg_1}.",

      "translation": "Complete node update for {Arg_1}."
    },
    {

      "id": "Start node unregistration.",

      "translation": "Start node unregistration."
    },
    {

      "id": "Node unregistration complete for node {Arg_1}.",

      "translation": "Node unregistration complete for node {Arg_1}."
    },
    {

      "id": "Error unregistring the node. The node is not found from the database.",

      "translation": "Error unregistring the node. The node is not found from the database."
    },
    {

      "id": "Error unregistring the node. The node must be in 'configured' or 'configuring' state in order to unconfigure it.",

      "translation": "Error unregistring the node. The node must be in 'configured' or 'configuring' state in order to unconfigure it."
    },
    {

      "id": "Input error for node unregistration. {Arg_1} is an incorrect value for removeNode",

      "translation": "Input error for node unregistration. {Arg_1} is an incorrect value for removeNode"
    },
    {

      "id": "Input error for node unregistration. {Arg_1} is an incorrect value for deepClean",

      "translation": "Input error for node unregistration. {Arg_1} is an incorrect value for deepClean"
    },
    {

      "id": "Input error for node unregistration. {Arg_1} is an incorrect value for block",

      "translation": "Input error for node unregistration. {Arg_1} is an incorrect value for block"
    },
    {

      "id": "Unable to read node object from database, error {Arg_1}",

      "translation": "Unable to read node object from database, error {Arg_1}"
    },
    {

      "id": "Error saving new node config state (unconfiguring) in the database: {Arg_1}",

      "translation": "Error saving new node config state (unconfiguring) in the database: {Arg_1}"
    },
    {

      "id": "Error in node configuration. The node is not found from the database.",

      "translation": "Error in node configuration. The node is not found from the database."
    },
    {

      "id": "Error in node configuration. The node must be in 'configured' or 'configuring' state in order to change the state to {Arg_1}.",

      "translation": "Error in node configuration. The node must be in 'configured' or 'configuring' state in order to change the state to {Arg_1}."
    },
    {

      "id": "Node state transition from '{Arg_1}' to '{Arg_2}' is not supported.",

      "translation": "Node state transition from '{Arg_1}' to '{Arg_2}' is not supported."
    },
    {

      "id": "Failed get user input from local db. {Arg_1}",

      "translation": "Failed get user input from local db. {Arg_1}"
    },
    {

      "id": "Failed to find preferences for service {Arg_1}/{Arg_2} from the local user input, error: {Arg_3}",

      "translation": "Failed to find preferences for service {Arg_1}/{Arg_2} from the local user input, error: {Arg_3}"
    },
    {

      "id": "Error saving new node config state to database: {Arg_1}",

      "translation": "Error saving new node config state to database: {Arg_1}"
    },
    {

      "id": "Complete node configuration/registration for node {Arg_1}.",

      "translation": "Complete node configuration/registration for node {Arg_1}."
    },
    {

      "id": "Error in service configuration for {Arg_1}. {Arg_2}",

      "translation": "Error in service configuration for {Arg_1}. {Arg_2}"
    },
    {

      "id": "Error getting service references for pattern {Arg_1}. {Arg_2}",

      "translation": "Error getting service references for pattern {Arg_1}. {Arg_2}"
    },
    {

      "id": "New node policy: {Arg_1}",

      "translation": "New node policy: {Arg_1}"
    },
    {

      "id": "Deleted node policy",

      "translation": "Deleted node policy"
    },
    {

      "id": "New node user input: {Arg_1}",

      "translation": "New node user input: {Arg_1}"
    },
    {

      "id": "No node user input to detele",

      "translation": "No node user input to detele"
    },
    {

      "id": "Deleted all node user input",

      "translation": "Deleted all node user input"
    },
    {

      "id": "Start service configuration with user input for {Arg_1}/{Arg_2}.",

      "translation": "Start service configuration with user input for {Arg_1}/{Arg_2}."
    },
    {

      "id": "Start service auto configuration for {Arg_1}/{Arg_2}.",

      "translation": "Start service auto configuration for {Arg_1}/{Arg_2}."
    },
    {

      "id": "Complete service configuration for {Arg_1}/{Arg_2}.",

      "translation": "Complete service configuration for {Arg_1}/{Arg_2}."
    },
    {

      "id": "Complete service auto configuration for {Arg_1}/{Arg_2}.",

      "translation": "Complete service auto configuration for {Arg_1}/{Arg_2}."
    },
    {

      "id": "Variable {Arg_1} is missing in the service configuration for {Arg_2}/{Arg_3}. It may cause agreement not formed if the business policy does not contain the setting for the missing variable.",

      "translation": "Variable {Arg_1} is missing in the service configuration for {Arg_2}/{Arg_3}. It may cause agreement not formed if the business policy does not contain the setting for the missing variable."
    },
    {

      "id": "Error configuring service {Arg_1}. {Arg_2}",

      "translation": "Error configuring service {Arg_1}. {Arg_2}"
    },
    {

      "id": "Error changing service configstate {Arg_1}, error {Arg_2}",

      "translation": "Error changing service configstate {Arg_1}, error {Arg_2}"
    },
    {

      "id": "Start changing service configuration state to {Arg_1} for {Arg_2} for the node.",

      "translation": "Start changing service configuration state to {Arg_1} for {Arg_2} for the node."
    },
    {

      "id": "Complete changing service configuration state to {Arg_1} for {Arg_2} for the node.",

      "translation": "Complete changing service configuration state to {Arg_1} for {Arg_2} for the node."
    },
    {

      "id": "Error converting the selections into Selectors: {Err}",

      "translation": "Error converting the selections into Selectors: {Err}"
    },
    {

      "id": "properties contains an invalid property: {Err}",

      "translation": "properties contains an invalid property: {Err}"
    },
    {

      "id": "Property must include a name and a value: {Property}",

      "translation": "Property must include a name and a value: {Property}"
    },
    {

      "id": "Property {Name} has invalid property type {DeclaredType}. Allowed property types are: version, string, int, boolean, float, and list of string.",

      "translation": "Property {Name} has invalid property type {DeclaredType}. Allowed property types are: version, string, int, boolean, float, and list of string."
    },
    {

      "id": "Property value is of type {ActualType}, expected type {DeclaredType}",

      "translation": "Property value is of type {ActualType}, expected type {DeclaredType}"
    },
    {

      "id": "Value {Value} of property {Name} is not an integer type",

      "translation": "Value {Value} of property {Name} is not an integer type"
    },
    {

      "id": "Value {Value} of property {Name} is not a valid string. Please define type or change value to a string.",

      "translation": "Value {Value} of property {Name} is not a valid string. Please define type or change value to a string."
    },
    {

      "id": "Property {Name} with value {Value} is not a valid verion string",

      "translation": "Property {Name} with value {Value} is not a valid verion string"
    },
    {

      "id": "Property {Name} has invalid value type {ActualType}",

      "translation": "Property {Name} has invalid value type {ActualType}"
    },
    {

      "id": "failed to marshal 'hzn policy list' output: {Err}",

      "translation": "failed to marshal 'hzn policy list' output: {Err}"
    },
    {

      "id": "Are you sure you want to remove the node policy?",

      "translation": "Are you sure you want to remove the node policy?"
    },
    {

      "id": "A list of policy properties that describe the object.",

      "translation": "A list of policy properties that describe the object."
    },
    {

      "id": "unable to make directory for self signed MMS API certificate, error {Err}",

      "translation": "unable to make directory for self signed MMS API certificate, error {Err}"
    },
    {

      "id": "unable to generate random number for MMS API certificate serial number, error {Err}",

      "translation": "unable to generate random number for MMS API certificate serial number, error {Err}"
    },
    {

      "id": "unable to generate private key for MMS API certificate, error {Err}",

      "translation": "unable to generate private key for MMS API certificate, error {Err}"
    },
    {

      "id": "unable to create MMS API certificate, error {Err}",

      "translation": "unable to create MMS API certificate, error {Err}"
    },
    {

      "id": "unable to write MMS API certificate to file {ServerCertificate}, error {Err}",

      "translation": "unable to write MMS API certificate to file {ServerCertificate}, error {Err}"
    },
    {

      "id": "unable to encode MMS API certificate to file {ServerCertificate}, error {Err}",

      "translation": "unable to encode MMS API certificate to file {ServerCertificate}, error {Err}"
    },
    {

      "id": "unable to close MMS API certificate file {ServerCertificate}, error {Err}",

      "translation": "unable to close MMS API certificate file {ServerCertificate}, error {Err}"
    },
    {

      "id": "unable to write MMS API certificate private key to file {ServerKey}, error {Err}",

      "translation": "unable to write MMS API certificate private key to file {ServerKey}, error {Err}"
    },
    {

      "id": "unable to encode MMS API certificate private key to file {ServerKey}, error {Err}",

      "translation": "unable to encode MMS API certificate private key to file {ServerKey}, error {Err}"
    },
    {

      "id": "unable to close MMS API certificate private key file {ServerKey}, error {Err}",

      "translation": "unable to close MMS API certificate private key file {ServerKey}, error {Err}"
    },
    {

      "id": "this command can not be run before running 'hzn register'",

      "translation": "this command can not be run before running 'hzn register'"
    },
    {

      "id": "horizon api attributes output did not include 'attributes' key",

      "translation": "horizon api attributes output did not include 'attributes' key"
    },
    {

      "id": "failed to marshal 'hzn attribute list' output: {Err}",

      "translation": "failed to marshal 'hzn attribute list' output: {Err}"
    },
    {

      "id": "failed to marshal agreement with index {I}: {Err}",

      "translation": "failed to marshal agreement with index {I}: {Err}"
    },
    {

      "id": "agreement id {AgreementId} not found",

      "translation": "agreement id {AgreementId} not found"
    },
    {

      "id": "failed to marshal 'hzn agreement list' output: {Err}",

      "translation": "failed to marshal 'hzn agreement list' output: {Err}"
    },
    {

      "id": "deployment config {Dep} is not supported",

      "translation": "deployment config {Dep} is not supported"
    },
    {

      "id": "starting test mode is not supported for this project",

      "translation": "starting test mode is not supported for this project"
    },
    {

      "id": "Failed to get proper response from Horizon agent",

      "translation": "Failed to get proper response from Horizon agent"
    },
    {

      "id": "Horizon CLI version: {HORIZONVERSION}",

      "translation": "Horizon CLI version: {HORIZONVERSION}"
    },
    {

      "id": "Horizon Agent version: {HorizonVersion}",

      "translation": "Horizon Agent version: {HorizonVersion}"
    },
    {

      "id": "must specify exchange credentials to access the model management service.",

      "translation": "must specify exchange credentials to access the model management service."
    },
    {

      "id": "must specify object ID when requesting object details.",

      "translation": "must specify object ID when requesting object details."
    },
    {

      "id": "no objects type '{ObjType}' found in org {Org}",

      "translation": "no objects type '{ObjType}' found in org {Org}"
    },
    {

      "id": "object '{ObjId}' of type '{ObjType}' not found in org {Org}",

      "translation": "object '{ObjId}' of type '{ObjType}' not found in org {Org}"
    },
    {

      "id": "destination detail for object '{ObjId}' of type '{ObjType}' not found in org {Org}",

      "translation": "destination detail for object '{ObjId}' of type '{ObjType}' not found in org {Org}"
    },
    {

      "id": "Object status: {Stringresp}",

      "translation": "Object status: {Stringresp}"
    },
    {

      "id": "Required: A unique identifier of the object.",

      "translation": "Required: A unique identifier of the object."
    },
    {

      "id": "Required: The type of the object.",

      "translation": "Required: The type of the object."
    },
    {

      "id": "Required: The organization ID of the object (an object belongs to exactly one organization).",

      "translation": "Required: The organization ID of the object (an object belongs to exactly one organization)."
    },
    {

      "id": "The node id (without org prefix) where the object should be placed.",

      "translation": "The node id (without org prefix) where the object should be placed."
    },
    {

      "id": "If omitted the object is sent to all nodes the same destinationType.",

      "translation": "If omitted the object is sent to all nodes the same destinationType."
    },
    {

      "id": "Delete this field when you are using destinationPolicy.",

      "translation": "Delete this field when you are using destinationPolicy."
    },
    {

      "id": "The pattern in use by nodes that should receive this object.",

      "translation": "The pattern in use by nodes that should receive this object."
    },
    {

      "id": "If omitted (and if destinationsList is omitted too) the object is broadcast to all known nodes.",

      "translation": "If omitted (and if destinationsList is omitted too) the object is broadcast to all known nodes."
    },
    {

      "id": "Delete this field when you are using policy.",

      "translation": "Delete this field when you are using policy."
    },
    {

      "id": "The list of destinations as an array of pattern:nodeId pairs that should receive this object.",

      "translation": "The list of destinations as an array of pattern:nodeId pairs that should receive this object."
    },
    {

      "id": "If provided, destinationType and destinationID must be omitted.",

      "translation": "If provided, destinationType and destinationID must be omitted."
    },
    {

      "id": "The policy specification that should be used to distribute this object.",

      "translation": "The policy specification that should be used to distribute this object."
    },
    {

      "id": "Delete these fields if the target node is using a pattern.",

      "translation": "Delete these fields if the target node is using a pattern."
    },
    {

      "id": "Valid types are string, bool, int, float, list of string (comma separated), version.",

      "translation": "Valid types are string, bool, int, float, list of string (comma separated), version."
    },
    {

      "id": "Type can be omitted if the type is discernable from the value, e.g. unquoted true is boolean.",

      "translation": "Type can be omitted if the type is discernable from the value, e.g. unquoted true is boolean."
    },
    {

      "id": "A list of constraint expressions of the form <property name> <operator> <property value>, separated by boolean operators AND (&&) or OR (||).",

      "translation": "A list of constraint expressions of the form <property name> <operator> <property value>, separated by boolean operators AND (&&) or OR (||)."
    },
    {

      "id": "The service(s) that will use this object.",

      "translation": "The service(s) that will use this object."
    },
    {

      "id": "Set to '*' to indcate services of any hardware architecture.",

      "translation": "Set to '*' to indcate services of any hardware architecture."
    },
    {

      "id": "A version range.",

      "translation": "A version range."
    },
    {

      "id": "A timestamp/date indicating when the object expires (it is automatically deleted). The timestamp should be provided in RFC3339 format.",

      "translation": "A timestamp/date indicating when the object expires (it is automatically deleted). The timestamp should be provided in RFC3339 format."
    },
    {

      "id": "Arbitrary string value. The value is not semantically interpreted. The Model Management System does not keep multiple version of an object.",

      "translation": "Arbitrary string value. The value is not semantically interpreted. The Model Management System does not keep multiple version of an object."
    },
    {

      "id": "An arbitrary description.",

      "translation": "An arbitrary description."
    },
    {

      "id": "A timestamp/date as to when this object should automatically be activated. The timestamp should be provided in RFC3339 format.",

      "translation": "A timestamp/date as to when this object should automatically be activated. The timestamp should be provided in RFC3339 format."
    },
    {

      "id": "must specify exchange credentials to access the model management service",

      "translation": "must specify exchange credentials to access the model management service"
    },
    {

      "id": "must specify --type with --id",

      "translation": "must specify --type with --id"
    },
    {

      "id": "must specify --id with --type",

      "translation": "must specify --id with --type"
    },
    {

      "id": "cannot specify --id and --type with --def",

      "translation": "cannot specify --id and --type with --def"
    },
    {

      "id": "must specify either --type and --id or --def",

      "translation": "must specify either --type and --id or --def"
    },
    {

      "id": "cannot specify --pattern with --def",

      "translation": "cannot specify --pattern with --def"
    },
    {

      "id": "unable to read definition file {ObjMetadataFile}: {Err}",

      "translation": "unable to read definition file {ObjMetadataFile}: {Err}"
    },
    {

      "id": "failed to unmarshal definition file {ObjMetadataFile}: {Err}",

      "translation": "failed to unmarshal definition file {ObjMetadataFile}: {Err}"
    },
    {

      "id": "unable to open object file {ObjFile}: {Err}",

      "translation": "unable to open object file {ObjFile}: {Err}"
    },
    {

      "id": "Object {ObjFile} uploaded to org {Org} in the Model Management Service",

      "translation": "Object {ObjFile} uploaded to org {Org} in the Model Management Service"
    },
    {

      "id": "Object {ObjectID} added to org {Org} in the Model Management Service",

      "translation": "Object {ObjectID} added to org {Org} in the Model Management Service"
    },
    {

      "id": "Object {ObjId} deleted from org {Org} in the Model Management Service",

      "translation": "Object {ObjId} deleted from org {Org} in the Model Management Service"
    },
    {

      "id": "health status API returned HTTP code {HttpCode}",

      "translation": "health status API returned HTTP code {HttpCode}"
    },
    {

      "id": "unable to create network {NETWORKNAME} for file sync service, error {Err}",

      "translation": "unable to create network {NETWORKNAME} for file sync service, error {Err}"
    },
    {

      "id": "unable to start CSS, error {Err}",

      "translation": "unable to start CSS, error {Err}"
    },
    {

      "id": "unable to load file objects into CSS, error {Err}",

      "translation": "unable to load file objects into CSS, error {Err}"
    },
    {

      "id": "unable to start ESS, error {Err}",

      "translation": "unable to start ESS, error {Err}"
    },
    {

      "id": "Unable to stop {MakeLabelNameESSNAME}, error {Err}",

      "translation": "Unable to stop {MakeLabelNameESSNAME}, error {Err}"
    },
    {

      "id": "Unable to remove network {NETWORKNAME} for file sync service, error {Err}",

      "translation": "Unable to remove network {NETWORKNAME} for file sync service, error {Err}"
    },
    {

      "id": "unable to list existing docker images, error {Err}",

      "translation": "unable to list existing docker images, error {Err}"
    },
    {

      "id": "Found docker image {Name} locally.",

      "translation": "Found docker image {Name} locally."
    },
    {

      "id": "unable to pull CSS container using image {GetFSSFullImageName}, error {Err}. Set environment variable {DEVTOOLHZNFSSIMAGETAG} to use a different image tag.",

      "translation": "unable to pull CSS container using image {GetFSSFullImageName}, error {Err}. Set environment variable {DEVTOOLHZNFSSIMAGETAG} to use a different image tag."
    },
    {

      "id": "Pulled docker image {Name}.",

      "translation": "Pulled docker image {Name}."
    },
    {

      "id": "unable to create CSS container using image {GetFSSImageName}, error {Err}. Set environment variable {DEVTOOLHZNFSSIMAGETAG} to use a diferent image tag.",

      "translation": "unable to create CSS container using image {GetFSSImageName}, error {Err}. Set environment variable {DEVTOOLHZNFSSIMAGETAG} to use a diferent image tag."
    },
    {

      "id": "unable to start CSS container, error {Err}",

      "translation": "unable to start CSS container, error {Err}"
    },
    {

      "id": "Created {MakeLabelNameCSSNAME} container, listening on host port {GetCSSPort}",

      "translation": "Created {MakeLabelNameCSSNAME} container, listening on host port {GetCSSPort}"
    },
    {

      "id": "File sync service container {MakeLabelNameCSSNAME} listening on host port {GetCSSPort}",

      "translation": "File sync service container {MakeLabelNameCSSNAME} listening on host port {GetCSSPort}"
    },
    {

      "id": "unable to create SSL certificate for ESS, error {Err}",

      "translation": "unable to create SSL certificate for ESS, error {Err}"
    },
    {

      "id": "unable to open ESS SSL Certificate file {ESSSSLClientCertPath}, error {Err}",

      "translation": "unable to open ESS SSL Certificate file {ESSSSLClientCertPath}, error {Err}"
    },
    {

      "id": "unable to read ESS SSL Certificate file {ESSSSLClientCertPath}, error {Err}",

      "translation": "unable to read ESS SSL Certificate file {ESSSSLClientCertPath}, error {Err}"
    },
    {

      "id": "unable to open ESS SSL Certificate Key file {ESSSSLCertKeyPath}, error {Err}",

      "translation": "unable to open ESS SSL Certificate Key file {ESSSSLCertKeyPath}, error {Err}"
    },
    {

      "id": "unable to read ESS SSL Certificate Key file {ESSSSLCertKeyPath}, error {Err}",

      "translation": "unable to read ESS SSL Certificate Key file {ESSSSLCertKeyPath}, error {Err}"
    },
    {

      "id": "unable to create ESS container, error {Err}",

      "translation": "unable to create ESS container, error {Err}"
    },
    {

      "id": "unable to start ESS container, error {Err}",

      "translation": "unable to start ESS container, error {Err}"
    },
    {

      "id": "Created {MakeLabelNameESSNAME} container",

      "translation": "Created {MakeLabelNameESSNAME} container"
    },
    {

      "id": "unable to list docker containers, error {Err}",

      "translation": "unable to list docker containers, error {Err}"
    },
    {

      "id": "unable to stop docker container {Name}, error {Err}",

      "translation": "unable to stop docker container {Name}, error {Err}"
    },
    {

      "id": "unable to remove docker container {Name}, error {Err}",

      "translation": "unable to remove docker container {Name}, error {Err}"
    },
    {

      "id": "Stopped {Name} container",

      "translation": "Stopped {Name} container"
    },
    {

      "id": "Loading {FileName} into CSS",

      "translation": "Loading {FileName} into CSS"
    },
    {

      "id": "unable to open file object {FileName}, error {Err}",

      "translation": "unable to open file object {FileName}, error {Err}"
    },
    {

      "id": "unable to read file object {FileName}, error {Err}",

      "translation": "unable to read file object {FileName}, error {Err}"
    },
    {

      "id": "unable to add file {FileName} to the CSS, error {Err}",

      "translation": "unable to add file {FileName} to the CSS, error {Err}"
    },
    {

      "id": "Configuration files {FileObjects} loaded into the File sync service.",

      "translation": "Configuration files {FileObjects} loaded into the File sync service."
    },
    {

      "id": "unable to marshal CSS file PUT for {Metadata}, error {Err}",

      "translation": "unable to marshal CSS file PUT for {Metadata}, error {Err}"
    },
    {

      "id": "unable to create CSS file PUT request for {Metadata}, error {Err}",

      "translation": "unable to create CSS file PUT request for {Metadata}, error {Err}"
    },
    {

      "id": "unable to send CSS file PUT request to CSS for {Metadata}, error {Err}",

      "translation": "unable to send CSS file PUT request to CSS for {Metadata}, error {Err}"
    },
    {

      "id": "HTTP code: {StatusCode}",

      "translation": "HTTP code: {StatusCode}"
    },
    {

      "id": "unable to PUT file {Metadata} into CSS, HTTP code {StatusCode}",

      "translation": "unable to PUT file {Metadata} into CSS, HTTP code {StatusCode}"
    },
    {

      "id": "Created network {Name}",

      "translation": "Created network {Name}"
    },
    {

      "id": "unable to list docker networks, error {Err}",

      "translation": "unable to list docker networks, error {Err}"
    },
    {

      "id": "unable to remove docker network {Name}, error {Err}",

      "translation": "unable to remove docker network {Name}, error {Err}"
    },
    {

      "id": "Name, or Org is empty string.",

      "translation": "Name, or Org is empty string."
    },
    {

      "id": "The serviceVersions array is empty.",

      "translation": "The serviceVersions array is empty."
    },
    {

      "id": "The constraint expression: {Dconstraints} is type {Dconstraints_1}, but is expected to be an array of strings",

      "translation": "The constraint expression: {Dconstraints} is type {Dconstraints_1}, but is expected to be an array of strings"
    },
    {

      "id": "unable to convert policy constraint {Remainder} into internal format, error {Err}",

      "translation": "unable to convert policy constraint {Remainder} into internal format, error {Err}"
    },
    {

      "id": "Logical operator {NextLogicalOperator} is not valid, expecting AND, OR, &&, ||",

      "translation": "Logical operator {NextLogicalOperator} is not valid, expecting AND, OR, &&, ||"
    },
    {

      "id": "found {Lenpieces} token(s), expecting 3 in an expression {Expression}, expected form is <property> == <value>",

      "translation": "found {Lenpieces} token(s), expecting 3 in an expression {Expression}, expected form is <property> == <value>"
    },
    {

      "id": "found {Lenpieces} token(s), expecting 3 in an expression {Expression}, expected form is expression with 3 tokens: <property> <operator> <value> in constraint expression",

      "translation": "found {Lenpieces} token(s), expecting 3 in an expression {Expression}, expected form is expression with 3 tokens: <property> <operator> <value> in constraint expression"
    },
    {

      "id": "Expression: {Expression} should contain valid comparison operator - wrong operator {Pieces1}. Allowed operators: {Lessthan}, {Greaterthan}, {Equalto}, {Doubleequalto}, {Lessthaneq}, {Greaterthaneq}, {Notequalto}, {Inoperator}",

      "translation": "Expression: {Expression} should contain valid comparison operator - wrong operator {Pieces1}. Allowed operators: {Lessthan}, {Greaterthan}, {Equalto}, {Doubleequalto}, {Lessthaneq}, {Greaterthaneq}, {Notequalto}, {Inoperator}"
    },
    {

      "id": "Comparison operator: {CompOp} is not supported for numeric value: {Value}",

      "translation": "Comparison operator: {CompOp} is not supported for numeric value: {Value}"
    },
    {

      "id": "Comparison operator: {CompOp} is not supported for boolean value: {Value}",

      "translation": "Comparison operator: {CompOp} is not supported for boolean value: {Value}"
    },
    {

      "id": "Comparison operator: {CompOp} is not supported for string list value: {Value}",

      "translation": "Comparison operator: {CompOp} is not supported for string list value: {Value}"
    },
    {

      "id": "Comparison operator: {CompOp} is not supported for string value: {Value}",

      "translation": "Comparison operator: {CompOp} is not supported for string value: {Value}"
    },
    {

      "id": "Comparison operator: {CompOp} is not supported for single version: {Value}",

      "translation": "Comparison operator: {CompOp} is not supported for single version: {Value}"
    },
    {

      "id": "Comparison operator: {CompOp} is not supported for version expression: {Value}",

      "translation": "Comparison operator: {CompOp} is not supported for version expression: {Value}"
    },
    {

      "id": "Expression: {Expression} is not valid",

      "translation": "Expression: {Expression} is not valid"
    },
    {

      "id": "Command line interface for Horizon agent. Most of the sub-commands use the Horizon Agent API at the default location http://localhost (see environment Environment Variables section to override this).\n\nEnvironment Variables:\n  HORIZON_URL:  Override the URL at which hzn contacts the Horizon Agent API.\n      This can facilitate using a remote Horizon Agent via an ssh tunnel.\n  HZN_EXCHANGE_URL:  Override the URL that the 'hzn exchange' sub-commands use\n      to communicate with the Horizon Exchange, for example\n      https://exchange.bluehorizon.network/api/v1. (By default hzn will ask the\n      Horizon Agent for the URL.)\n  HZN_ORG_ID:  Default value for the 'hzn exchange -o' flag,\n      to specify the organization ID'.\n  HZN_EXCHANGE_USER_AUTH:  Default value for the 'hzn exchange -u' or 'hzn\n\t  register -u' flag, in the form '[org/]user:pw'. Notice that HZN_ORG_ID can be set \n\t  if org is omitted when HZN_EXCHANGE_USER_AUTH is set.\n  HZN_FSS_CSSURL:  Override the URL that the 'hzn mms' sub-commands use\n      to communicate with the Horizon Model Management Service, for example\n      https://exchange.bluehorizon.network/css/. (By default hzn will ask the\n      Horizon Agent for the URL.)\n\n  All these environment variables and ones mentioned in the command help can be\n  specified in user's configuration file: ~/.hzn/hzn.json with JSON format.\n  For example:\n  {Com____}",

      "translation": "Command line interface for Horizon agent. Most of the sub-commands use the Horizon Agent API at the default location http://localhost (see environment Environment Variables section to override this).\n\nEnvironment Variables:\n  HORIZON_URL:  Override the URL at which hzn contacts the Horizon Agent API.\n      This can facilitate using a remote Horizon Agent via an ssh tunnel.\n  HZN_EXCHANGE_URL:  Override the URL that the 'hzn exchange' sub-commands use\n      to communicate with the Horizon Exchange, for example\n      https://exchange.bluehorizon.network/api/v1. (By default hzn will ask the\n      Horizon Agent for the URL.)\n  HZN_ORG_ID:  Default value for the 'hzn exchange -o' flag,\n      to specify the organization ID'.\n  HZN_EXCHANGE_USER_AUTH:  Default value for the 'hzn exchange -u' or 'hzn\n\t  register -u' flag, in the form '[org/]user:pw'. Notice that HZN_ORG_ID can be set \n\t  if org is omitted when HZN_EXCHANGE_USER_AUTH is set.\n  HZN_FSS_CSSURL:  Override the URL that the 'hzn mms' sub-commands use\n      to communicate with the Horizon Model Management Service, for example\n      https://exchange.bluehorizon.network/css/. (By default hzn will ask the\n      Horizon Agent for the URL.)\n\n  All these environment variables and ones mentioned in the command help can be\n  specified in user's configuration file: ~/.hzn/hzn.json with JSON format.\n  For example:\n  {Com____}"
    },
    {

      "id": "Verbose output.",

      "translation": "Verbose output."
    },
    {

      "id": "When calling the Horizon or Exchange API, do GETs, but don't do PUTs, POSTs, or DELETEs.",

      "translation": "When calling the Horizon or Exchange API, do GETs, but don't do PUTs, POSTs, or DELETEs."
    },
    {

      "id": "Show the Horizon version.",

      "translation": "Show the Horizon version."
    },
    {

      "id": "Show the architecture of this machine (as defined by Horizon and golang).",

      "translation": "Show the architecture of this machine (as defined by Horizon and golang)."
    },
    {

      "id": "List and manage Horizon Exchange resources.",

      "translation": "List and manage Horizon Exchange resources."
    },
    {

      "id": "The Horizon exchange organization ID. If not specified, HZN_ORG_ID will be used as a default.",

      "translation": "The Horizon exchange organization ID. If not specified, HZN_ORG_ID will be used as a default."
    },
    {

      "id": "Horizon Exchange user credentials to query and create exchange resources. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default. If you don't prepend it with the user's org, it will automatically be prepended with the -o value. As an alternative to using -o, you can set HZN_ORG_ID with the Horizon exchange organization ID",

      "translation": "Horizon Exchange user credentials to query and create exchange resources. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default. If you don't prepend it with the user's org, it will automatically be prepended with the -o value. As an alternative to using -o, you can set HZN_ORG_ID with the Horizon exchange organization ID"
    },
    {

      "id": "Display the version of the Horizon Exchange.",

      "translation": "Display the version of the Horizon Exchange."
    },
    {

      "id": "Display the status of the Horizon Exchange.",

      "translation": "Display the status of the Horizon Exchange."
    },
    {

      "id": "List and manage users in the Horizon Exchange.",

      "translation": "List and manage users in the Horizon Exchange."
    },
    {

      "id": "Display the user resource from the Horizon Exchange. (Normally you can only display your own user. If the user does not exist, you will get an invalid credentials error.)",

      "translation": "Display the user resource from the Horizon Exchange. (Normally you can only display your own user. If the user does not exist, you will get an invalid credentials error.)"
    },
    {

      "id": "List this one user. Default is your own user. Only admin users can list other users.",

      "translation": "List this one user. Default is your own user. Only admin users can list other users."
    },
    {

      "id": "List all users in the org. Will only do this if you are a user with admin privilege.",

      "translation": "List all users in the org. Will only do this if you are a user with admin privilege."
    },
    {

      "id": "When listing all of the users, show only the usernames, instead of each entire resource.",

      "translation": "When listing all of the users, show only the usernames, instead of each entire resource."
    },
    {

      "id": "Create the user resource in the Horizon Exchange.",

      "translation": "Create the user resource in the Horizon Exchange."
    },
    {

      "id": "Your username for this user account when creating it in the Horizon exchange.",

      "translation": "Your username for this user account when creating it in the Horizon exchange."
    },
    {

      "id": "Your password for this user account when creating it in the Horizon exchange.",

      "translation": "Your password for this user account when creating it in the Horizon exchange."
    },
    {

      "id": "Your email address that should be associated with this user account when creating it in the Horizon exchange. If your username is an email address, this argument can be omitted.",

      "translation": "Your email address that should be associated with this user account when creating it in the Horizon exchange. If your username is an email address, this argument can be omitted."
    },
    {

      "id": "This user should be an administrator, capable of managing all resources in this org of the exchange.",

      "translation": "This user should be an administrator, capable of managing all resources in this org of the exchange."
    },
    {

      "id": "Change the existing user to be an admin user (like root in his/her org) or to no longer be an admin user. Can only be run by exchange root or another admin user.",

      "translation": "Change the existing user to be an admin user (like root in his/her org) or to no longer be an admin user. Can only be run by exchange root or another admin user."
    },
    {

      "id": "The user to be modified.",

      "translation": "The user to be modified."
    },
    {

      "id": "True if they should be an admin user, otherwise false.",

      "translation": "True if they should be an admin user, otherwise false."
    },
    {

      "id": "Remove a user resource from the Horizon Exchange. Warning: this will cause all exchange resources owned by this user to also be deleted (nodes, services, patterns, etc).",

      "translation": "Remove a user resource from the Horizon Exchange. Warning: this will cause all exchange resources owned by this user to also be deleted (nodes, services, patterns, etc)."
    },
    {

      "id": "The user to remove.",

      "translation": "The user to remove."
    },
    {

      "id": "Skip the 'are you sure?' prompt.",

      "translation": "Skip the 'are you sure?' prompt."
    },
    {

      "id": "List and manage nodes in the Horizon Exchange",

      "translation": "List and manage nodes in the Horizon Exchange"
    },
    {

      "id": "Display the node resources from the Horizon Exchange.",

      "translation": "Display the node resources from the Horizon Exchange."
    },
    {

      "id": "List just this one node.",

      "translation": "List just this one node."
    },
    {

      "id": "The Horizon Exchange node ID and token to be used as credentials to query and modify the node resources if -u flag is not specified. HZN_EXCHANGE_NODE_AUTH will be used as a default for -n. If you don't prepend it with the node's org, it will automatically be prepended with the -o value.",

      "translation": "The Horizon Exchange node ID and token to be used as credentials to query and modify the node resources if -u flag is not specified. HZN_EXCHANGE_NODE_AUTH will be used as a default for -n. If you don't prepend it with the node's org, it will automatically be prepended with the -o value."
    },
    {

      "id": "When listing all of the nodes, show the entire resource of each node, instead of just the name.",

      "translation": "When listing all of the nodes, show the entire resource of each node, instead of just the name."
    },
    {

      "id": "Create the node resource in the Horizon Exchange.",

      "translation": "Create the node resource in the Horizon Exchange."
    },
    {

      "id": "The Horizon Exchange node ID and token to be created. The node ID must be unique within the organization.",

      "translation": "The Horizon Exchange node ID and token to be created. The node ID must be unique within the organization."
    },
    {

      "id": "Your email address. Only needs to be specified if: the user specified in the -u flag does not exist, and you specified the 'public' org. If these things are true we will create the user and include this value as the email attribute.",

      "translation": "Your email address. Only needs to be specified if: the user specified in the -u flag does not exist, and you specified the 'public' org. If these things are true we will create the user and include this value as the email attribute."
    },
    {

      "id": "Your node architecture. If not specified, arch will leave blank.",

      "translation": "Your node architecture. If not specified, arch will leave blank."
    },
    {

      "id": "The name of your node",

      "translation": "The name of your node"
    },
    {

      "id": "The node to be created.",

      "translation": "The node to be created."
    },
    {

      "id": "The token the new node should have.",

      "translation": "The token the new node should have."
    },
    {

      "id": "Update an attribute of the node in the Horizon Exchange.",

      "translation": "Update an attribute of the node in the Horizon Exchange."
    },
    {

      "id": "The node to be updated.",

      "translation": "The node to be updated."
    },
    {

      "id": "The path to a json file containing the changed attribute to be updated in the Horizon Exchange. Specify -f- to read from stdin.",

      "translation": "The path to a json file containing the changed attribute to be updated in the Horizon Exchange. Specify -f- to read from stdin."
    },
    {

      "id": "Change the token of a node resource in the Horizon Exchange.",

      "translation": "Change the token of a node resource in the Horizon Exchange."
    },
    {

      "id": "The node to be changed.",

      "translation": "The node to be changed."
    },
    {

      "id": "The new token for the node.",

      "translation": "The new token for the node."
    },
    {

      "id": "Check to see if the specified node and token are valid in the Horizon Exchange.",

      "translation": "Check to see if the specified node and token are valid in the Horizon Exchange."
    },
    {

      "id": "The Horizon exchange node ID and token to be checked. If not specified, HZN_EXCHANGE_NODE_AUTH will be used as a default. Mutually exclusive with <node> and <token> arguments.",

      "translation": "The Horizon exchange node ID and token to be checked. If not specified, HZN_EXCHANGE_NODE_AUTH will be used as a default. Mutually exclusive with <node> and <token> arguments."
    },
    {

      "id": "The node id to be checked. Mutually exclusive with -n flag.",

      "translation": "The node id to be checked. Mutually exclusive with -n flag."
    },
    {

      "id": "The token for the node. Mutually exclusive with -n flag.",

      "translation": "The token for the node. Mutually exclusive with -n flag."
    },
    {

      "id": "Remove a node resource from the Horizon Exchange. Do NOT do this when an edge node is registered with this node id.",

      "translation": "Remove a node resource from the Horizon Exchange. Do NOT do this when an edge node is registered with this node id."
    },
    {

      "id": "The Horizon Exchange node ID and token to be used as credentials to query and modfy the node resources if -u flag is not specified. HZN_EXCHANGE_NODE_AUTH will be used as a default for -n. If you don't prepend it with the node's org, it will automatically be prepended with the -o value.",

      "translation": "The Horizon Exchange node ID and token to be used as credentials to query and modfy the node resources if -u flag is not specified. HZN_EXCHANGE_NODE_AUTH will be used as a default for -n. If you don't prepend it with the node's org, it will automatically be prepended with the -o value."
    },
    {

      "id": "The node to remove.",

      "translation": "The node to remove."
    },
    {

      "id": "Display the node policy from the Horizon Exchange.",

      "translation": "Display the node policy from the Horizon Exchange."
    },
    {

      "id": "List policy for this node.",

      "translation": "List policy for this node."
    },
    {

      "id": "Add or replace the node policy in the Horizon Exchange.",

      "translation": "Add or replace the node policy in the Horizon Exchange."
    },
    {

      "id": "Add or replace policy for this node.",

      "translation": "Add or replace policy for this node."
    },
    {

      "id": "The path of a JSON file containing the metadata necessary to create/update the node policy in the Horizon exchange. Specify -f- to read from stdin.",

      "translation": "The path of a JSON file containing the metadata necessary to create/update the node policy in the Horizon exchange. Specify -f- to read from stdin."
    },
    {

      "id": "Update an attribute of the policy for this node in the Horizon Exchange.",

      "translation": "Update an attribute of the policy for this node in the Horizon Exchange."
    },
    {

      "id": "Update the policy for this node.",

      "translation": "Update the policy for this node."
    },
    {

      "id": "The path of a JSON file containing the attribute to be updated in the Horizon Exchange. Specify -f- to read from stdin.",

      "translation": "The path of a JSON file containing the attribute to be updated in the Horizon Exchange. Specify -f- to read from stdin."
    },
    {

      "id": "Remove the node policy in the Horizon Exchange.",

      "translation": "Remove the node policy in the Horizon Exchange."
    },
    {

      "id": "Remove policy for this node.",

      "translation": "Remove policy for this node."
    },
    {

      "id": "List and manage agbots in the Horizon Exchange",

      "translation": "List and manage agbots in the Horizon Exchange"
    },
    {

      "id": "Display the agbot resources from the Horizon Exchange.",

      "translation": "Display the agbot resources from the Horizon Exchange."
    },
    {

      "id": "List just this one agbot.",

      "translation": "List just this one agbot."
    },
    {

      "id": "When listing all of the agbots, show the entire resource of each agbots, instead of just the name.",

      "translation": "When listing all of the agbots, show the entire resource of each agbots, instead of just the name."
    },
    {

      "id": "Display the patterns that this agbot is serving.",

      "translation": "Display the patterns that this agbot is serving."
    },
    {

      "id": "The agbot to list the patterns for.",

      "translation": "The agbot to list the patterns for."
    },
    {

      "id": "The organization of the 1 pattern to list.",

      "translation": "The organization of the 1 pattern to list."
    },
    {

      "id": "The name of the 1 pattern to list.",

      "translation": "The name of the 1 pattern to list."
    },
    {

      "id": "The organization of the nodes that should be searched. Defaults to patternorg.",

      "translation": "The organization of the nodes that should be searched. Defaults to patternorg."
    },
    {

      "id": "Add this pattern to the list of patterns this agbot is serving.",

      "translation": "Add this pattern to the list of patterns this agbot is serving."
    },
    {

      "id": "The agbot to add the pattern to.",

      "translation": "The agbot to add the pattern to."
    },
    {

      "id": "The organization of the pattern to add.",

      "translation": "The organization of the pattern to add."
    },
    {

      "id": "The name of the pattern to add.",

      "translation": "The name of the pattern to add."
    },
    {

      "id": "Remove this pattern from the list of patterns this agbot is serving.",

      "translation": "Remove this pattern from the list of patterns this agbot is serving."
    },
    {

      "id": "The agbot to remove the pattern from.",

      "translation": "The agbot to remove the pattern from."
    },
    {

      "id": "The organization of the pattern to remove.",

      "translation": "The organization of the pattern to remove."
    },
    {

      "id": "The name of the pattern to remove.",

      "translation": "The name of the pattern to remove."
    },
    {

      "id": "Display the business policies that this agbot is serving.",

      "translation": "Display the business policies that this agbot is serving."
    },
    {

      "id": "The agbot to list serving business policies for.",

      "translation": "The agbot to list serving business policies for."
    },
    {

      "id": "Add this business policy to the list of policies this agbot is serving. Currently only support adding all the business polycies from an organization.",

      "translation": "Add this business policy to the list of policies this agbot is serving. Currently only support adding all the business polycies from an organization."
    },
    {

      "id": "The agbot to add the business policy to.",

      "translation": "The agbot to add the business policy to."
    },
    {

      "id": "The organization of the business policy to add.",

      "translation": "The organization of the business policy to add."
    },
    {

      "id": "Remove this business policy from the list of policies this agbot is serving. Currently only support removing all the business polycies from an organization.",

      "translation": "Remove this business policy from the list of policies this agbot is serving. Currently only support removing all the business polycies from an organization."
    },
    {

      "id": "The agbot to remove the business policy from.",

      "translation": "The agbot to remove the business policy from."
    },
    {

      "id": "The organization of the business policy to remove.",

      "translation": "The organization of the business policy to remove."
    },
    {

      "id": "List and manage patterns in the Horizon Exchange",

      "translation": "List and manage patterns in the Horizon Exchange"
    },
    {

      "id": "Display the pattern resources from the Horizon Exchange.",

      "translation": "Display the pattern resources from the Horizon Exchange."
    },
    {

      "id": "List just this one pattern. Use <org>/<pat> to specify a public pattern in another org, or <org>/ to list all of the public patterns in another org.",

      "translation": "List just this one pattern. Use <org>/<pat> to specify a public pattern in another org, or <org>/ to list all of the public patterns in another org."
    },
    {

      "id": "When listing all of the patterns, show the entire resource of each pattern, instead of just the name.",

      "translation": "When listing all of the patterns, show the entire resource of each pattern, instead of just the name."
    },
    {

      "id": "Sign and create/update the pattern resource in the Horizon Exchange.",

      "translation": "Sign and create/update the pattern resource in the Horizon Exchange."
    },
    {

      "id": "The path of a JSON file containing the metadata necessary to create/update the pattern in the Horizon exchange. See /usr/horizon/samples/pattern.json. Specify -f- to read from stdin.",

      "translation": "The path of a JSON file containing the metadata necessary to create/update the pattern in the Horizon exchange. See /usr/horizon/samples/pattern.json. Specify -f- to read from stdin."
    },
    {

      "id": "The path of a private key file to be used to sign the pattern. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.private.key is the default.",

      "translation": "The path of a private key file to be used to sign the pattern. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.private.key is the default."
    },
    {

      "id": "The path of public key file (that corresponds to the private key) that should be stored with the pattern, to be used by the Horizon Agent to verify the signature. If both this and -k flags are not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If HZN_PUBLIC_KEY_FILE is not set, ~/.hzn/keys/service.public.pem is the default. If -k is specified and this flag is not specified, then no public key file will be stored with the pattern. The Horizon Agent needs to import the public key to verify the signature.",

      "translation": "The path of public key file (that corresponds to the private key) that should be stored with the pattern, to be used by the Horizon Agent to verify the signature. If both this and -k flags are not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If HZN_PUBLIC_KEY_FILE is not set, ~/.hzn/keys/service.public.pem is the default. If -k is specified and this flag is not specified, then no public key file will be stored with the pattern. The Horizon Agent needs to import the public key to verify the signature."
    },
    {

      "id": "The name to use for this pattern in the Horizon exchange. If not specified, will default to the base name of the file path specified in -f.",

      "translation": "The name to use for this pattern in the Horizon exchange. If not specified, will default to the base name of the file path specified in -f."
    },
    {

      "id": "Verify the signatures of a pattern resource in the Horizon Exchange.",

      "translation": "Verify the signatures of a pattern resource in the Horizon Exchange."
    },
    {

      "id": "The pattern to verify.",

      "translation": "The pattern to verify."
    },
    {

      "id": "The path of a pem public key file to be used to verify the pattern. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default.",

      "translation": "The path of a pem public key file to be used to verify the pattern. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default."
    },
    {

      "id": "Update an attribute of the pattern in the Horizon Exchange.",

      "translation": "Update an attribute of the pattern in the Horizon Exchange."
    },
    {

      "id": "The name of the pattern in the Horizon Exchange to publish.",

      "translation": "The name of the pattern in the Horizon Exchange to publish."
    },
    {

      "id": "The path to a json file containing the updated attribute of the pattern to be put in the Horizon Exchange. Specify -f- to read from stdin.",

      "translation": "The path to a json file containing the updated attribute of the pattern to be put in the Horizon Exchange. Specify -f- to read from stdin."
    },
    {

      "id": "Remove a pattern resource from the Horizon Exchange.",

      "translation": "Remove a pattern resource from the Horizon Exchange."
    },
    {

      "id": "The pattern to remove.",

      "translation": "The pattern to remove."
    },
    {

      "id": "List the signing public keys/certs for this pattern resource in the Horizon Exchange.",

      "translation": "List the signing public keys/certs for this pattern resource in the Horizon Exchange."
    },
    {

      "id": "The existing pattern to list the keys for.",

      "translation": "The existing pattern to list the keys for."
    },
    {

      "id": "The existing key name to see the contents of.",

      "translation": "The existing key name to see the contents of."
    },
    {

      "id": "Remove a signing public key/cert for this pattern resource in the Horizon Exchange.",

      "translation": "Remove a signing public key/cert for this pattern resource in the Horizon Exchange."
    },
    {

      "id": "The existing pattern to remove the key from.",

      "translation": "The existing pattern to remove the key from."
    },
    {

      "id": "The existing key name to remove.",

      "translation": "The existing key name to remove."
    },
    {

      "id": "List and manage services in the Horizon Exchange",

      "translation": "List and manage services in the Horizon Exchange"
    },
    {

      "id": "Display the service resources from the Horizon Exchange.",

      "translation": "Display the service resources from the Horizon Exchange."
    },
    {

      "id": "List just this one service. Use <org>/<svc> to specify a public service in another org, or <org>/ to list all of the public services in another org.",

      "translation": "List just this one service. Use <org>/<svc> to specify a public service in another org, or <org>/ to list all of the public services in another org."
    },
    {

      "id": "When listing all of the services, show the entire resource of each services, instead of just the name.",

      "translation": "When listing all of the services, show the entire resource of each services, instead of just the name."
    },
    {

      "id": "Sign and create/update the service resource in the Horizon Exchange.",

      "translation": "Sign and create/update the service resource in the Horizon Exchange."
    },
    {

      "id": "The path of a JSON file containing the metadata necessary to create/update the service in the Horizon exchange. See /usr/horizon/samples/service.json. Specify -f- to read from stdin.",

      "translation": "The path of a JSON file containing the metadata necessary to create/update the service in the Horizon exchange. See /usr/horizon/samples/service.json. Specify -f- to read from stdin."
    },
    {

      "id": "The path of a private key file to be used to sign the service. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.private.key is the default.",

      "translation": "The path of a private key file to be used to sign the service. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.private.key is the default."
    },
    {

      "id": "The path of public key file (that corresponds to the private key) that should be stored with the service, to be used by the Horizon Agent to verify the signature. If both this and -k flags are not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If HZN_PUBLIC_KEY_FILE is not set, ~/.hzn/keys/service.public.pem is the default. If -k is specified and this flag is not specified, then no public key file will be stored with the service. The Horizon Agent needs to import the public key to verify the signature.",

      "translation": "The path of public key file (that corresponds to the private key) that should be stored with the service, to be used by the Horizon Agent to verify the signature. If both this and -k flags are not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If HZN_PUBLIC_KEY_FILE is not set, ~/.hzn/keys/service.public.pem is the default. If -k is specified and this flag is not specified, then no public key file will be stored with the service. The Horizon Agent needs to import the public key to verify the signature."
    },
    {

      "id": "The image paths in the deployment field have regular tags and should not be changed to sha256 digest values. The image will not get automatically uploaded to the repository. This should only be used during development when testing new versions often.",

      "translation": "The image paths in the deployment field have regular tags and should not be changed to sha256 digest values. The image will not get automatically uploaded to the repository. This should only be used during development when testing new versions often."
    },
    {

      "id": "Use the image from the image repository. It will pull the image from the image repository and overwrite the local image if exists. This flag is mutually exclusive with -I.",

      "translation": "Use the image from the image repository. It will pull the image from the image repository and overwrite the local image if exists. This flag is mutually exclusive with -I."
    },
    {

      "id": "Docker registry domain and auth that should be stored with the service, to enable the Horizon edge node to access the service's docker images. This flag can be repeated, and each flag should be in the format: registry:user:token",

      "translation": "Docker registry domain and auth that should be stored with the service, to enable the Horizon edge node to access the service's docker images. This flag can be repeated, and each flag should be in the format: registry:user:token"
    },
    {

      "id": "Overwrite the existing version if the service exists in the exchange. It will skip the 'do you want to overwrite' prompt.",

      "translation": "Overwrite the existing version if the service exists in the exchange. It will skip the 'do you want to overwrite' prompt."
    },
    {

      "id": "The path of the service policy JSON file to be used for the service to be published. This flag is optional",

      "translation": "The path of the service policy JSON file to be used for the service to be published. This flag is optional"
    },
    {

      "id": "Verify the signatures of a service resource in the Horizon Exchange.",

      "translation": "Verify the signatures of a service resource in the Horizon Exchange."
    },
    {

      "id": "The service to verify.",

      "translation": "The service to verify."
    },
    {

      "id": "The path of a pem public key file to be used to verify the service. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default.",

      "translation": "The path of a pem public key file to be used to verify the service. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default."
    },
    {

      "id": "Remove a service resource from the Horizon Exchange.",

      "translation": "Remove a service resource from the Horizon Exchange."
    },
    {

      "id": "The service to remove.",

      "translation": "The service to remove."
    },
    {

      "id": "List the signing public keys/certs for this service resource in the Horizon Exchange.",

      "translation": "List the signing public keys/certs for this service resource in the Horizon Exchange."
    },
    {

      "id": "The existing service to list the keys for.",

      "translation": "The existing service to list the keys for."
    },
    {

      "id": "Remove a signing public key/cert for this service resource in the Horizon Exchange.",

      "translation": "Remove a signing public key/cert for this service resource in the Horizon Exchange."
    },
    {

      "id": "The existing service to remove the key from.",

      "translation": "The existing service to remove the key from."
    },
    {

      "id": "List the docker auth tokens for this service resource in the Horizon Exchange.",

      "translation": "List the docker auth tokens for this service resource in the Horizon Exchange."
    },
    {

      "id": "The existing service to list the docker auths for.",

      "translation": "The existing service to list the docker auths for."
    },
    {

      "id": "The existing docker auth id to see the contents of.",

      "translation": "The existing docker auth id to see the contents of."
    },
    {

      "id": "Remove a docker auth token for this service resource in the Horizon Exchange.",

      "translation": "Remove a docker auth token for this service resource in the Horizon Exchange."
    },
    {

      "id": "The existing service to remove the docker auth from.",

      "translation": "The existing service to remove the docker auth from."
    },
    {

      "id": "The existing docker auth id to remove.",

      "translation": "The existing docker auth id to remove."
    },
    {

      "id": "Display the service policy from the Horizon Exchange.",

      "translation": "Display the service policy from the Horizon Exchange."
    },
    {

      "id": "The Horizon Exchange id and password of the user",

      "translation": "The Horizon Exchange id and password of the user"
    },
    {

      "id": "List policy for this service.",

      "translation": "List policy for this service."
    },
    {

      "id": "Display an empty service policy template that can be filled in.",

      "translation": "Display an empty service policy template that can be filled in."
    },
    {

      "id": "Add or replace the service policy in the Horizon Exchange.",

      "translation": "Add or replace the service policy in the Horizon Exchange."
    },
    {

      "id": "The Horizon Exchange ID and password of the user",

      "translation": "The Horizon Exchange ID and password of the user"
    },
    {

      "id": "Add or replace policy for this service.",

      "translation": "Add or replace policy for this service."
    },
    {

      "id": "The path of a JSON file containing the metadata necessary to create/update the service policy in the Horizon Exchange. Specify -f- to read from stdin.",

      "translation": "The path of a JSON file containing the metadata necessary to create/update the service policy in the Horizon Exchange. Specify -f- to read from stdin."
    },
    {

      "id": "Remove the service policy in the Horizon Exchange.",

      "translation": "Remove the service policy in the Horizon Exchange."
    },
    {

      "id": "Remove policy for this service.",

      "translation": "Remove policy for this service."
    },
    {

      "id": "List and manage business policies in the Horizon Exchange.",

      "translation": "List and manage business policies in the Horizon Exchange."
    },
    {

      "id": "Display the business policies from the Horizon Exchange.",

      "translation": "Display the business policies from the Horizon Exchange."
    },
    {

      "id": "The Horizon ID and password of the user.",

      "translation": "The Horizon ID and password of the user."
    },
    {

      "id": "Display detailed output about the business policies.",

      "translation": "Display detailed output about the business policies."
    },
    {

      "id": "List just this one policy. Use <org>/<policy> to specify a public policy in another org, or <org>/ to list all of the public policies in another org.",

      "translation": "List just this one policy. Use <org>/<policy> to specify a public policy in another org, or <org>/ to list all of the public policies in another org."
    },
    {

      "id": "Display an empty business policy template that can be filled in.",

      "translation": "Display an empty business policy template that can be filled in."
    },
    {

      "id": "Add or replace a business policy in the Horizon Exchange. Use 'hzn exchange business new' for an empty business policy template.",

      "translation": "Add or replace a business policy in the Horizon Exchange. Use 'hzn exchange business new' for an empty business policy template."
    },
    {

      "id": "The name of the policy to add or overwrite.",

      "translation": "The name of the policy to add or overwrite."
    },
    {

      "id": "Update one attribute of an existing policy in the Horizon Exchange. The supported attributes are the top level attributes in the policy definition as shown by the command 'hzn exchange business new'.",

      "translation": "Update one attribute of an existing policy in the Horizon Exchange. The supported attributes are the top level attributes in the policy definition as shown by the command 'hzn exchange business new'."
    },
    {

      "id": "The name of the policy to be updated in the Horizon Exchange.",

      "translation": "The name of the policy to be updated in the Horizon Exchange."
    },
    {

      "id": "The path to the json file containing the updated business policy attribute to be changed in the Horizon Exchange. Specify -f- to read from stdin.",

      "translation": "The path to the json file containing the updated business policy attribute to be changed in the Horizon Exchange. Specify -f- to read from stdin."
    },
    {

      "id": "Remove the business policy in the Horizon Exchange.",

      "translation": "Remove the business policy in the Horizon Exchange."
    },
    {

      "id": "The name of the business policy to be removed.",

      "translation": "The name of the business policy to be removed."
    },
    {

      "id": "List all public services/patterns in all orgs that have orgType: IBM.",

      "translation": "List all public services/patterns in all orgs that have orgType: IBM."
    },
    {

      "id": "Display all public services in all orgs that have orgType: IBM.",

      "translation": "Display all public services in all orgs that have orgType: IBM."
    },
    {

      "id": "Only display org (IBM) and service names.",

      "translation": "Only display org (IBM) and service names."
    },
    {

      "id": "Display detailed output about public services in all orgs that have orgType: IBM.",

      "translation": "Display detailed output about public services in all orgs that have orgType: IBM."
    },
    {

      "id": "Display all public patterns in all orgs that have orgType: IBM.",

      "translation": "Display all public patterns in all orgs that have orgType: IBM."
    },
    {

      "id": "Only display org (IBM) and pattern names.",

      "translation": "Only display org (IBM) and pattern names."
    },
    {

      "id": "Display detailed output about public patterns in all orgs that have orgType: IBM.",

      "translation": "Display detailed output about public patterns in all orgs that have orgType: IBM."
    },
    {

      "id": "Create an input file template for this pattern that can be used for the 'hzn register' command (once filled in). This examines the services that the specified pattern uses, and determines the node owner input that is required for them.",

      "translation": "Create an input file template for this pattern that can be used for the 'hzn register' command (once filled in). This examines the services that the specified pattern uses, and determines the node owner input that is required for them."
    },
    {

      "id": "The Horizon exchange node ID and token (it must already exist).",

      "translation": "The Horizon exchange node ID and token (it must already exist)."
    },
    {

      "id": "The JSON input template file name that should be created. This file will contain placeholders for you to fill in user input values.",

      "translation": "The JSON input template file name that should be created. This file will contain placeholders for you to fill in user input values."
    },
    {

      "id": "The Horizon exchange organization ID that the node will be registered in.",

      "translation": "The Horizon exchange organization ID that the node will be registered in."
    },
    {

      "id": "The Horizon exchange pattern that describes what workloads that should be deployed to this node. If the pattern is from a different organization than the node, use the 'other_org/pattern' format.",

      "translation": "The Horizon exchange pattern that describes what workloads that should be deployed to this node. If the pattern is from a different organization than the node, use the 'other_org/pattern' format."
    },
    {

      "id": "The architecture to write the template file for. (Horizon ignores services in patterns whose architecture is different from the target system.) The architecture must be what is returned by 'hzn node list' on the target system.",

      "translation": "The architecture to write the template file for. (Horizon ignores services in patterns whose architecture is different from the target system.) The architecture must be what is returned by 'hzn node list' on the target system."
    },
    {

      "id": "Register this edge node with Horizon.",

      "translation": "Register this edge node with Horizon."
    },
    {

      "id": "The Horizon exchange node ID and token. The node ID must be unique within the organization. If not specified, HZN_EXCHANGE_NODE_AUTH will be used as a default. If both -n and HZN_EXCHANGE_NODE_AUTH are not specified, the node ID will be created by Horizon from the machine serial number or fully qualified hostname. If the token is not specified, Horizon will create a random token. If node resource in the exchange identified by the ID and token does not yet exist, you must also specify the -u flag so it can be created.",

      "translation": "The Horizon exchange node ID and token. The node ID must be unique within the organization. If not specified, HZN_EXCHANGE_NODE_AUTH will be used as a default. If both -n and HZN_EXCHANGE_NODE_AUTH are not specified, the node ID will be created by Horizon from the machine serial number or fully qualified hostname. If the token is not specified, Horizon will create a random token. If node resource in the exchange identified by the ID and token does not yet exist, you must also specify the -u flag so it can be created."
    },
    {

      "id": "The name of the node. If not specified, it will be the same as the node id.",

      "translation": "The name of the node. If not specified, it will be the same as the node id."
    },
    {

      "id": "User credentials to create the node resource in the Horizon exchange if it does not already exist. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default.",

      "translation": "User credentials to create the node resource in the Horizon exchange if it does not already exist. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default."
    },
    {

      "id": "Your email address. Only needs to be specified if: the node resource does not yet exist in the Horizon exchange, and the user specified in the -u flag does not exist, and you specified the 'public' org. If all of these things are true we will create the user and include this value as the email attribute.",

      "translation": "Your email address. Only needs to be specified if: the node resource does not yet exist in the Horizon exchange, and the user specified in the -u flag does not exist, and you specified the 'public' org. If all of these things are true we will create the user and include this value as the email attribute."
    },
    {

      "id": "A JSON file that sets or overrides variables needed by the node and services that are part of this pattern. See /usr/horizon/samples/input.json and /usr/horizon/samples/more-examples.json. Specify -f- to read from stdin.",

      "translation": "A JSON file that sets or overrides variables needed by the node and services that are part of this pattern. See /usr/horizon/samples/input.json and /usr/horizon/samples/more-examples.json. Specify -f- to read from stdin."
    },
    {

      "id": "The Horizon exchange organization ID that the node should be registered in. The default is the HZN_ORG_ID environment variable. Mutually exclusive with <nodeorg> and <pattern> arguments.",

      "translation": "The Horizon exchange organization ID that the node should be registered in. The default is the HZN_ORG_ID environment variable. Mutually exclusive with <nodeorg> and <pattern> arguments."
    },
    {

      "id": "The Horizon exchange pattern that describes what workloads that should be deployed to this node. If the pattern is from a different organization than the node, use the 'other_org/pattern' format. Mutually exclusive with <nodeorg> and <pattern> arguments and --policy flag.",

      "translation": "The Horizon exchange pattern that describes what workloads that should be deployed to this node. If the pattern is from a different organization than the node, use the 'other_org/pattern' format. Mutually exclusive with <nodeorg> and <pattern> arguments and --policy flag."
    },
    {

      "id": "A JSON file that sets or overrides the node policy for this node that will be used for policy based agreement negotiation. Mutually exclusive with -p argument.",

      "translation": "A JSON file that sets or overrides the node policy for this node that will be used for policy based agreement negotiation. Mutually exclusive with -p argument."
    },
    {

      "id": "The Horizon exchange organization ID that the node should be registered in. Mutually exclusive with -o and -p.",

      "translation": "The Horizon exchange organization ID that the node should be registered in. Mutually exclusive with -o and -p."
    },
    {

      "id": "The Horizon exchange pattern that describes what workloads that should be deployed to this node. If the pattern is from a different organization than the node, use the 'other_org/pattern' format. Mutually exclusive with -o, -p and --policy.",

      "translation": "The Horizon exchange pattern that describes what workloads that should be deployed to this node. If the pattern is from a different organization than the node, use the 'other_org/pattern' format. Mutually exclusive with -o, -p and --policy."
    },
    {

      "id": "List and manage keys for signing and verifying services.",

      "translation": "List and manage keys for signing and verifying services."
    },
    {

      "id": "List the signing keys that have been imported into this Horizon agent.",

      "translation": "List the signing keys that have been imported into this Horizon agent."
    },
    {

      "id": "The name of a specific key to show.",

      "translation": "The name of a specific key to show."
    },
    {

      "id": "List the names of all signing keys, even the older public keys not wrapped in a certificate.",

      "translation": "List the names of all signing keys, even the older public keys not wrapped in a certificate."
    },
    {

      "id": "Generate a signing key pair.",

      "translation": "Generate a signing key pair."
    },
    {

      "id": "x509 certificate Organization (O) field (preferably a company name or other organization's name).",

      "translation": "x509 certificate Organization (O) field (preferably a company name or other organization's name)."
    },
    {

      "id": "x509 certificate Common Name (CN) field (preferably an email address issued by x509org).",

      "translation": "x509 certificate Common Name (CN) field (preferably an email address issued by x509org)."
    },
    {

      "id": "The directory to put the key pair files in. Mutually exclusive with -k and -K. The file names will be randomly generated.",

      "translation": "The directory to put the key pair files in. Mutually exclusive with -k and -K. The file names will be randomly generated."
    },
    {

      "id": "The full path of the private key file. Mutually exclusive with -d. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.private.key is the default.",

      "translation": "The full path of the private key file. Mutually exclusive with -d. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.private.key is the default."
    },
    {

      "id": "The full path of the public key file. Mutually exclusive with -d. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default.",

      "translation": "The full path of the public key file. Mutually exclusive with -d. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default."
    },
    {

      "id": "Overwrite the existing files. It will skip the 'do you want to overwrite' prompt.",

      "translation": "Overwrite the existing files. It will skip the 'do you want to overwrite' prompt."
    },
    {

      "id": "The length of the key to create.",

      "translation": "The length of the key to create."
    },
    {

      "id": "x509 certificate validity (Validity > Not After) expressed in days from the day of generation.",

      "translation": "x509 certificate validity (Validity > Not After) expressed in days from the day of generation."
    },
    {

      "id": "Automatically import the created public key into the local Horizon agent.",

      "translation": "Automatically import the created public key into the local Horizon agent."
    },
    {

      "id": "Imports a signing public key into the Horizon agent.",

      "translation": "Imports a signing public key into the Horizon agent."
    },
    {

      "id": "The path of a pem public key file to be imported. The base name in the path is also used as the key name in the Horizon agent. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default.",

      "translation": "The path of a pem public key file to be imported. The base name in the path is also used as the key name in the Horizon agent. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default."
    },
    {

      "id": "Remove the specified signing key from this Horizon agent.",

      "translation": "Remove the specified signing key from this Horizon agent."
    },
    {

      "id": "The name of a specific key to remove.",

      "translation": "The name of a specific key to remove."
    },
    {

      "id": "List and manage general information about this Horizon edge node.",

      "translation": "List and manage general information about this Horizon edge node."
    },
    {

      "id": "Display general information about this Horizon edge node.",

      "translation": "Display general information about this Horizon edge node."
    },
    {

      "id": "List and manage policy for this Horizon edge node.",

      "translation": "List and manage policy for this Horizon edge node."
    },
    {

      "id": "Display this edge node's policy.",

      "translation": "Display this edge node's policy."
    },
    {

      "id": "Display an empty policy template that can be filled in.",

      "translation": "Display an empty policy template that can be filled in."
    },
    {

      "id": "Update the node's policy. The node's built-in properties will be automatically added if the input policy does not contain them.",

      "translation": "Update the node's policy. The node's built-in properties will be automatically added if the input policy does not contain them."
    },
    {

      "id": "The JSON input file name containing the node policy.",

      "translation": "The JSON input file name containing the node policy."
    },
    {

      "id": "Add or update node policy properties or overwrite the node policy constraint expression.",

      "translation": "Add or update node policy properties or overwrite the node policy constraint expression."
    },
    {

      "id": "The new constraints or properties in the format '{Constraintsconstraint_list}' or '{Propertiesproperty_list}'.",

      "translation": "The new constraints or properties in the format '{Constraintsconstraint_list}' or '{Propertiesproperty_list}'."
    },
    {

      "id": "Remove the node's policy.",

      "translation": "Remove the node's policy."
    },
    {

      "id": "List or manage the active or archived agreements this edge node has made with a Horizon agreement bot.",

      "translation": "List or manage the active or archived agreements this edge node has made with a Horizon agreement bot."
    },
    {

      "id": "List the active or archived agreements this edge node has made with a Horizon agreement bot.",

      "translation": "List the active or archived agreements this edge node has made with a Horizon agreement bot."
    },
    {

      "id": "Show the details of this active or archived agreement.",

      "translation": "Show the details of this active or archived agreement."
    },
    {

      "id": "List archived agreements instead of the active agreements.",

      "translation": "List archived agreements instead of the active agreements."
    },
    {

      "id": "Cancel 1 or all of the active agreements this edge node has made with a Horizon agreement bot. Usually an agbot will immediately negotiated a new agreement. If you want to cancel all agreements and not have this edge accept new agreements, run 'hzn unregister'.",

      "translation": "Cancel 1 or all of the active agreements this edge node has made with a Horizon agreement bot. Usually an agbot will immediately negotiated a new agreement. If you want to cancel all agreements and not have this edge accept new agreements, run 'hzn unregister'."
    },
    {

      "id": "Cancel all of the current agreements.",

      "translation": "Cancel all of the current agreements."
    },
    {

      "id": "The active agreement to cancel.",

      "translation": "The active agreement to cancel."
    },
    {

      "id": "List or manage the metering (payment) information for the active or archived agreements.",

      "translation": "List or manage the metering (payment) information for the active or archived agreements."
    },
    {

      "id": "List the metering (payment) information for the active or archived agreements.",

      "translation": "List the metering (payment) information for the active or archived agreements."
    },
    {

      "id": "List archived agreement metering information instead of metering for the active agreements.",

      "translation": "List archived agreement metering information instead of metering for the active agreements."
    },
    {

      "id": "List or manage the global attributes that are currently registered on this Horizon edge node.",

      "translation": "List or manage the global attributes that are currently registered on this Horizon edge node."
    },
    {

      "id": "List the global attributes that are currently registered on this Horizon edge node.",

      "translation": "List the global attributes that are currently registered on this Horizon edge node."
    },
    {

      "id": "List or manage the service user inputs that are currently registered on this Horizon edge node.",

      "translation": "List or manage the service user inputs that are currently registered on this Horizon edge node."
    },
    {

      "id": "List the service user inputs currently registered on this Horizon edge node.",

      "translation": "List the service user inputs currently registered on this Horizon edge node."
    },
    {

      "id": "Display an empty userinput template.",

      "translation": "Display an empty userinput template."
    },
    {

      "id": "Add a new user input object or overwrite the current user input object for this Horizon edge node.",

      "translation": "Add a new user input object or overwrite the current user input object for this Horizon edge node."
    },
    {

      "id": "The file path to the json file with the user input object. Specify -f- to read from stdin.",

      "translation": "The file path to the json file with the user input object. Specify -f- to read from stdin."
    },
    {

      "id": "Update an existing user input object for this Horizon edge node.",

      "translation": "Update an existing user input object for this Horizon edge node."
    },
    {

      "id": "The file path to the json file with the updated user input object. Specify -f- to read from stdin.",

      "translation": "The file path to the json file with the updated user input object. Specify -f- to read from stdin."
    },
    {

      "id": "Remove the user inputs that are currently registered on this Horizon edge node.",

      "translation": "Remove the user inputs that are currently registered on this Horizon edge node."
    },
    {

      "id": "Skip the 'Are you sure?' prompt.",

      "translation": "Skip the 'Are you sure?' prompt."
    },
    {

      "id": "List or manage the services that are currently registered on this Horizon edge node.",

      "translation": "List or manage the services that are currently registered on this Horizon edge node."
    },
    {

      "id": "List the services variable configuration that has been done on this Horizon edge node.",

      "translation": "List the services variable configuration that has been done on this Horizon edge node."
    },
    {

      "id": "List the services that are currently registered on this Horizon edge node.",

      "translation": "List the services that are currently registered on this Horizon edge node."
    },
    {

      "id": "List or manage the configuration state for the services that are currently registered on this Horizon edge node.",

      "translation": "List or manage the configuration state for the services that are currently registered on this Horizon edge node."
    },
    {

      "id": "List the configuration state for the services that are currently registered on this Horizon edge node.",

      "translation": "List the configuration state for the services that are currently registered on this Horizon edge node."
    },
    {

      "id": "Change the configuration state to 'suspend' for a service.",

      "translation": "Change the configuration state to 'suspend' for a service."
    },
    {

      "id": "Change the configuration state to 'active' for a service.",

      "translation": "Change the configuration state to 'active' for a service."
    },
    {

      "id": "Suspend all registerd services.",

      "translation": "Suspend all registerd services."
    },
    {

      "id": "The organization of the service that should be suspended.",

      "translation": "The organization of the service that should be suspended."
    },
    {

      "id": "The name of the service that should be suspended.",

      "translation": "The name of the service that should be suspended."
    },
    {

      "id": "Resume all registerd services.",

      "translation": "Resume all registerd services."
    },
    {

      "id": "The organization of the service that should be resumed.",

      "translation": "The organization of the service that should be resumed."
    },
    {

      "id": "The name of the service that should be resumed.",

      "translation": "The name of the service that should be resumed."
    },
    {

      "id": "Unregister and reset this Horizon edge node so that it is ready to be registered again. Warning: this will stop all the Horizon services running on this edge node, and restart the Horizon agent.",

      "translation": "Unregister and reset this Horizon edge node so that it is ready to be registered again. Warning: this will stop all the Horizon services running on this edge node, and restart the Horizon agent."
    },
    {

      "id": "Also remove this node resource from the Horizon exchange (because you no longer want to use this node with Horizon).",

      "translation": "Also remove this node resource from the Horizon exchange (because you no longer want to use this node with Horizon)."
    },
    {

      "id": "Also remove all the previous registration information. Use it only after the 'hzn unregister' command failed. Please capture the logs by running 'hzn eventlog list -a -l' command before using this flag.",

      "translation": "Also remove all the previous registration information. Use it only after the 'hzn unregister' command failed. Please capture the logs by running 'hzn eventlog list -a -l' command before using this flag."
    },
    {

      "id": "The number of minutes to wait for unregistration to complete. The default is zero which will wait forever.",

      "translation": "The number of minutes to wait for unregistration to complete. The default is zero which will wait forever."
    },
    {

      "id": "Display the current horizon internal status for the node.",

      "translation": "Display the current horizon internal status for the node."
    },
    {

      "id": "Show detailed status",

      "translation": "Show detailed status"
    },
    {

      "id": "List the event logs for the current or all registrations.",

      "translation": "List the event logs for the current or all registrations."
    },
    {

      "id": "List all the event logs including the previous registrations.",

      "translation": "List all the event logs including the previous registrations."
    },
    {

      "id": "List event logs with details.",

      "translation": "List event logs with details."
    },
    {

      "id": "Selection string. This flag can be repeated which means 'AND'. Each flag should be in the format of attribute=value, attribute~value, \"attribute>value\" or \"attribute<value\", where '~' means contains. The common attribute names are timestamp, severity, message, event_code, source_type, agreement_id, service_url etc. Use the '-l' flag to see all the attribute names.",

      "translation": "Selection string. This flag can be repeated which means 'AND'. Each flag should be in the format of attribute=value, attribute~value, \"attribute>value\" or \"attribute<value\", where '~' means contains. The common attribute names are timestamp, severity, message, event_code, source_type, agreement_id, service_url etc. Use the '-l' flag to see all the attribute names."
    },
    {

      "id": "Development tools for creation of services.",

      "translation": "Development tools for creation of services."
    },
    {

      "id": "Directory containing Horizon project metadata. If omitted, a subdirectory called 'horizon' under current directory will be used.",

      "translation": "Directory containing Horizon project metadata. If omitted, a subdirectory called 'horizon' under current directory will be used."
    },
    {

      "id": "For working with a service project.",

      "translation": "For working with a service project."
    },
    {

      "id": "Create a new service project.",

      "translation": "Create a new service project."
    },
    {

      "id": "The Org id that the service is defined within. If this flag is omitted, the HZN_ORG_ID environment variable is used.",

      "translation": "The Org id that the service is defined within. If this flag is omitted, the HZN_ORG_ID environment variable is used."
    },
    {

      "id": "The name of the service. If this flag and the -i flag are omitted, only the skeletal horizon metadata files will be generated.",

      "translation": "The name of the service. If this flag and the -i flag are omitted, only the skeletal horizon metadata files will be generated."
    },
    {

      "id": "The version of the service. If this flag is omitted, '0.0.1' is used.",

      "translation": "The version of the service. If this flag is omitted, '0.0.1' is used."
    },
    {

      "id": "The docker container image base name without the version tag for the service. This command will add arch and version to the base name to form the final image name. The format is 'basename_arch:serviceversion'. This flag can be repeated to specify multiple images when '--noImageGen' flag is specified.",

      "translation": "The docker container image base name without the version tag for the service. This command will add arch and version to the base name to form the final image name. The format is 'basename_arch:serviceversion'. This flag can be repeated to specify multiple images when '--noImageGen' flag is specified."
    },
    {

      "id": "Indicates that the image is built somewhere else. No image sample code will be created by this command. If this flag is not specified, files for generating a simple service image will be created under current directory.",

      "translation": "Indicates that the image is built somewhere else. No image sample code will be created by this command. If this flag is not specified, files for generating a simple service image will be created under current directory."
    },
    {

      "id": "Indicates no pattern definition file will be created.",

      "translation": "Indicates no pattern definition file will be created."
    },
    {

      "id": "Indicate no policy file will be created.",

      "translation": "Indicate no policy file will be created."
    },
    {

      "id": "Indicates the type of deployment that will be used, e.g. native (the default), or helm.",

      "translation": "Indicates the type of deployment that will be used, e.g. native (the default), or helm."
    },
    {

      "id": "Run a service in a mocked Horizon Agent environment.",

      "translation": "Run a service in a mocked Horizon Agent environment."
    },
    {

      "id": "File containing user input values for running a test. If omitted, the userinput file for the project will be used.",

      "translation": "File containing user input values for running a test. If omitted, the userinput file for the project will be used."
    },
    {

      "id": "File to be made available through the sync service APIs. This flag can be repeated to populate multiple files.",

      "translation": "File to be made available through the sync service APIs. This flag can be repeated to populate multiple files."
    },
    {

      "id": "The type of file to be made available through the sync service APIs. All config files are presumed to be of the same type. This flag is required if any configFiles are specified.",

      "translation": "The type of file to be made available through the sync service APIs. All config files are presumed to be of the same type. This flag is required if any configFiles are specified."
    },
    {

      "id": "Do not bring up file sync service (FSS) containers. They are brought up by default.",

      "translation": "Do not bring up file sync service (FSS) containers. They are brought up by default."
    },
    {

      "id": "Horizon Exchange user credentials to query exchange resources. Specify it when you want to automatically fetch the missing dependent services from the exchange. The default is HZN_EXCHANGE_USER_AUTH environment variable. If you don't prepend it with the user's org, it will automatically be prepended with the value of the HZN_ORG_ID environment variable.",

      "translation": "Horizon Exchange user credentials to query exchange resources. Specify it when you want to automatically fetch the missing dependent services from the exchange. The default is HZN_EXCHANGE_USER_AUTH environment variable. If you don't prepend it with the user's org, it will automatically be prepended with the value of the HZN_ORG_ID environment variable."
    },
    {

      "id": "Stop a service that is running in a mocked Horizon Agent environment.",

      "translation": "Stop a service that is running in a mocked Horizon Agent environment."
    },
    {

      "id": "Validate the project for completeness and schema compliance.",

      "translation": "Validate the project for completeness and schema compliance."
    },
    {

      "id": "File containing user input values for verification of a project. If omitted, the userinput file for the project will be used.",

      "translation": "File containing user input values for verification of a project. If omitted, the userinput file for the project will be used."
    },
    {

      "id": "For working with project dependencies.",

      "translation": "For working with project dependencies."
    },
    {

      "id": "The URL of the service dependency in the exchange. Mutually exclusive with -p and --url.",

      "translation": "The URL of the service dependency in the exchange. Mutually exclusive with -p and --url."
    },
    {

      "id": "The URL of the service dependency in the exchange. Mutually exclusive with -p and --specRef.",

      "translation": "The URL of the service dependency in the exchange. Mutually exclusive with -p and --specRef."
    },
    {

      "id": "The Org of the service dependency in the exchange. Mutually exclusive with -p.",

      "translation": "The Org of the service dependency in the exchange. Mutually exclusive with -p."
    },
    {

      "id": "(optional) The Version of the service dependency in the exchange. Mutually exclusive with -p.",

      "translation": "(optional) The Version of the service dependency in the exchange. Mutually exclusive with -p."
    },
    {

      "id": "(optional) The hardware Architecture of the service dependency in the exchange. Mutually exclusive with -p.",

      "translation": "(optional) The hardware Architecture of the service dependency in the exchange. Mutually exclusive with -p."
    },
    {

      "id": "Retrieving Horizon metadata for a new dependency.",

      "translation": "Retrieving Horizon metadata for a new dependency."
    },
    {

      "id": "Horizon project containing the definition of a dependency. Mutually exclusive with -s -o --ver -a and --url.",

      "translation": "Horizon project containing the definition of a dependency. Mutually exclusive with -s -o --ver -a and --url."
    },
    {

      "id": "Horizon Exchange user credentials to query exchange resources. The default is HZN_EXCHANGE_USER_AUTH environment variable. If you don't prepend it with the user's org, it will automatically be prepended with the value of the HZN_ORG_ID environment variable.",

      "translation": "Horizon Exchange user credentials to query exchange resources. The default is HZN_EXCHANGE_USER_AUTH environment variable. If you don't prepend it with the user's org, it will automatically be prepended with the value of the HZN_ORG_ID environment variable."
    },
    {

      "id": "File containing user input values for configuring the new dependency. If omitted, the userinput file in the dependency project will be used.",

      "translation": "File containing user input values for configuring the new dependency. If omitted, the userinput file in the dependency project will be used."
    },
    {

      "id": "List all dependencies.",

      "translation": "List all dependencies."
    },
    {

      "id": "Remove a project dependency.",

      "translation": "Remove a project dependency."
    },
    {

      "id": "List and manage Horizon agreement bot resources.",

      "translation": "List and manage Horizon agreement bot resources."
    },
    {

      "id": "Display general information about this Horizon agbot node.",

      "translation": "Display general information about this Horizon agbot node."
    },
    {

      "id": "List or manage the active or archived agreements this Horizon agreement bot has with edge nodes.",

      "translation": "List or manage the active or archived agreements this Horizon agreement bot has with edge nodes."
    },
    {

      "id": "List the active or archived agreements this Horizon agreement bot has with edge nodes.",

      "translation": "List the active or archived agreements this Horizon agreement bot has with edge nodes."
    },
    {

      "id": "List just this one agreement.",

      "translation": "List just this one agreement."
    },
    {

      "id": "Cancel 1 or all of the active agreements this Horizon agreement bot has with edge nodes. Usually an agbot will immediately negotiated a new agreement.",

      "translation": "Cancel 1 or all of the active agreements this Horizon agreement bot has with edge nodes. Usually an agbot will immediately negotiated a new agreement."
    },
    {

      "id": "List the policies this Horizon agreement bot hosts.",

      "translation": "List the policies this Horizon agreement bot hosts."
    },
    {

      "id": "List policies this Horizon agreement bot hosts.",

      "translation": "List policies this Horizon agreement bot hosts."
    },
    {

      "id": "The organization the policy belongs to.",

      "translation": "The organization the policy belongs to."
    },
    {

      "id": "The policy name.",

      "translation": "The policy name."
    },
    {

      "id": "Display the current horizon internal status for the Horizon agreement bot.",

      "translation": "Display the current horizon internal status for the Horizon agreement bot."
    },
    {

      "id": "Utility commands.",

      "translation": "Utility commands."
    },
    {

      "id": "Sign the text in stdin. The signature is sent to stdout.",

      "translation": "Sign the text in stdin. The signature is sent to stdout."
    },
    {

      "id": "The path of a private key file to be used to sign the stdin.",

      "translation": "The path of a private key file to be used to sign the stdin."
    },
    {

      "id": "Verify that the signature specified via -s is a valid signature for the text in stdin.",

      "translation": "Verify that the signature specified via -s is a valid signature for the text in stdin."
    },
    {

      "id": "The path of public key file (that corresponds to the private key that was used to sign) to verify the signature of stdin.",

      "translation": "The path of public key file (that corresponds to the private key that was used to sign) to verify the signature of stdin."
    },
    {

      "id": "The supposed signature of stdin.",

      "translation": "The supposed signature of stdin."
    },
    {

      "id": "Convert the configuration file from JSON format to a shell script.",

      "translation": "Convert the configuration file from JSON format to a shell script."
    },
    {

      "id": "The path of a configuration file to be converted.",

      "translation": "The path of a configuration file to be converted."
    },
    {

      "id": "List and manage Horizon Model Management Service resources.",

      "translation": "List and manage Horizon Model Management Service resources."
    },
    {

      "id": "The Horizon organization ID. If not specified, HZN_ORG_ID will be used as a default.",

      "translation": "The Horizon organization ID. If not specified, HZN_ORG_ID will be used as a default."
    },
    {

      "id": "Horizon user credentials to query and create Model Management Service resources. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default. If you don't prepend it with the user's org, it will automatically be prepended with the -o value.",

      "translation": "Horizon user credentials to query and create Model Management Service resources. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default. If you don't prepend it with the user's org, it will automatically be prepended with the -o value."
    },
    {

      "id": "Display the status of the Horizon Model Management Service.",

      "translation": "Display the status of the Horizon Model Management Service."
    },
    {

      "id": "List and manage objects in the Horizon Model Management Service.",

      "translation": "List and manage objects in the Horizon Model Management Service."
    },
    {

      "id": "List objects in the Horizon Model Management Service.",

      "translation": "List objects in the Horizon Model Management Service."
    },
    {

      "id": "The type of the object to list.",

      "translation": "The type of the object to list."
    },
    {

      "id": "The id of the object to list. This flag is optional. Omit this flag to list all objects of a given object type.",

      "translation": "The id of the object to list. This flag is optional. Omit this flag to list all objects of a given object type."
    },
    {

      "id": "Provides additional detail about the deployment of the object on edge nodes. This flag is only used when --id is specified.",

      "translation": "Provides additional detail about the deployment of the object on edge nodes. This flag is only used when --id is specified."
    },
    {

      "id": "Display an empty object metadata template that can be filled in and passed as the -m option on the 'hzn mms object publish' command.",

      "translation": "Display an empty object metadata template that can be filled in and passed as the -m option on the 'hzn mms object publish' command."
    },
    {

      "id": "Publish an object in the Horizon Model Management Service, making it available for services deployed on nodes.",

      "translation": "Publish an object in the Horizon Model Management Service, making it available for services deployed on nodes."
    },
    {

      "id": "The type of the object to publish. This flag must be used with -i. It is mutually exclusive with -m",

      "translation": "The type of the object to publish. This flag must be used with -i. It is mutually exclusive with -m"
    },
    {

      "id": "The id of the object to publish. This flag must be used with -t. It is mutually exclusive with -m",

      "translation": "The id of the object to publish. This flag must be used with -t. It is mutually exclusive with -m"
    },
    {

      "id": "If you want the object to be deployed on nodes using a given pattern, specify it using this flag. This flag is optional and can only be used with --type and --id. It is mutually exclusive with -m",

      "translation": "If you want the object to be deployed on nodes using a given pattern, specify it using this flag. This flag is optional and can only be used with --type and --id. It is mutually exclusive with -m"
    },
    {

      "id": "The definition of the object to publish. A blank template can be obtained from the 'hzn mss object new' command.",

      "translation": "The definition of the object to publish. A blank template can be obtained from the 'hzn mss object new' command."
    },
    {

      "id": "The object (in the form of a file) to publish. This flag is optional so that you can update only the object's definition.",

      "translation": "The object (in the form of a file) to publish. This flag is optional so that you can update only the object's definition."
    },
    {

      "id": "The type of the object to delete.",

      "translation": "The type of the object to delete."
    },
    {

      "id": "The id of the object to delete.",

      "translation": "The id of the object to delete."
    },
    {

      "id": "organization ID must be specified with either the -o flag or HZN_ORG_ID",

      "translation": "organization ID must be specified with either the -o flag or HZN_ORG_ID"
    },
    {

      "id": "exchange user authentication must be specified with either the -u flag or HZN_EXCHANGE_USER_AUTH",

      "translation": "exchange user authentication must be specified with either the -u flag or HZN_EXCHANGE_USER_AUTH"
    },
    {

      "id": "Deployment config {Arg_1} contains unsupported capability for a workload",

      "translation": "Deployment config {Arg_1} contains unsupported capability for a workload"
    },
    {

      "id": "Deployment config {Arg_1} contains unsupported capability for infrastructure container.",

      "translation": "Deployment config {Arg_1} contains unsupported capability for infrastructure container."
    },
    {

      "id": "Deployment config {Arg_1} contains unsupported bind for a workload, {Arg_2}",

      "translation": "Deployment config {Arg_1} contains unsupported bind for a workload, {Arg_2}"
    },
    {

      "id": "Deployment config {Arg_1} contains unsupported bind for {Arg_2}, {Arg_3}",

      "translation": "Deployment config {Arg_1} contains unsupported bind for {Arg_2}, {Arg_3}"
    },
    {

      "id": "Error Unmarshalling deployment string {Arg_1}, error: {Arg_2}",

      "translation": "Error Unmarshalling deployment string {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error Unmarshalling deployment override string {Arg_1} for agreement {Arg_2}, error: {Arg_3}",

      "translation": "Error Unmarshalling deployment override string {Arg_1} for agreement {Arg_2}, error: {Arg_3}"
    },
    {

      "id": "Error starting containers: {Arg_1}",

      "translation": "Error starting containers: {Arg_1}"
    },
    {

      "id": "Error starting containers for agreement {Arg_1}: {Arg_2}",

      "translation": "Error starting containers for agreement {Arg_1}: {Arg_2}"
    },
    {

      "id": "Error restarting containers for agreements {Arg_1}: {Arg_2}",

      "translation": "Error restarting containers for agreements {Arg_1}: {Arg_2}"
    },
    {

      "id": "Error cleaning up old containers before starting up new containers for {Arg_1}. Error: {Arg_2}",

      "translation": "Error cleaning up old containers before starting up new containers for {Arg_1}. Error: {Arg_2}"
    },
    {

      "id": "Failed to get a list of parent containers for service retry for {Arg_1}. {Arg_2}",

      "translation": "Failed to get a list of parent containers for service retry for {Arg_1}. {Arg_2}"
    },
    {

      "id": "Failed to restoring the network connection with the parents for service {Arg_1}. {Arg_2}",

      "translation": "Failed to restoring the network connection with the parents for service {Arg_1}. {Arg_2}"
    },
    {

      "id": "[verbose] {M}",

      "translation": "[verbose] {M}"
    },
    {

      "id": "Error: {Msg}",

      "translation": "Error: {Msg}"
    },
    {

      "id": "Warning: {Msg}",

      "translation": "Warning: {Msg}"
    },
    {

      "id": "failed to unmarshal bytes from {ErrMsg}: {Err}",

      "translation": "failed to unmarshal bytes from {ErrMsg}: {Err}"
    },
    {

      "id": "failed to marshal data type from {ErrMsg}: {Err}",

      "translation": "failed to marshal data type from {ErrMsg}: {Err}"
    },
    {

      "id": "problem testing api key match: {Err}",

      "translation": "problem testing api key match: {Err}"
    },
    {

      "id": "Using API key",

      "translation": "Using API key"
    },
    {

      "id": "unable to create docker client: {Err}",

      "translation": "unable to create docker client: {Err}"
    },
    {

      "id": "docker auth domainName: {DomainName}",

      "translation": "docker auth domainName: {DomainName}"
    },
    {

      "id": "unable to find docker credentials for {Domain}",

      "translation": "unable to find docker credentials for {Domain}"
    },
    {

      "id": "Pushing {Repository}:{Tag}...",

      "translation": "Pushing {Repository}:{Tag}..."
    },
    {

      "id": "could not get docker credentials from ~/.docker/config.json: {Err}. Maybe you need to run 'docker login ...' to provide credentials for the image registry.",

      "translation": "could not get docker credentials from ~/.docker/config.json: {Err}. Maybe you need to run 'docker login ...' to provide credentials for the image registry."
    },
    {

      "id": "unable to push docker image {Repository____tag}: {Err}",

      "translation": "unable to push docker image {Repository____tag}: {Err}"
    },
    {

      "id": "could not find the image digest in the docker push output",

      "translation": "could not find the image digest in the docker push output"
    },
    {

      "id": "Pulling {Repository}:{Tag}...",

      "translation": "Pulling {Repository}:{Tag}..."
    },
    {

      "id": "unable to pull docker image {Repository____tag}. Docker credentials were not found. Maybe you need to run 'docker login ...' if the image registry is private. Error: {Err}",

      "translation": "unable to pull docker image {Repository____tag}. Docker credentials were not found. Maybe you need to run 'docker login ...' if the image registry is private. Error: {Err}"
    },
    {

      "id": "unable to pull docker image {Repository____tag}: {Err}",

      "translation": "unable to pull docker image {Repository____tag}: {Err}"
    },
    {

      "id": "the resource id can not contain more than 1 '/'",

      "translation": "the resource id can not contain more than 1 '/'"
    },
    {

      "id": "reading stdin failed: {Err}",

      "translation": "reading stdin failed: {Err}"
    },
    {

      "id": "reading {FilePath} failed: {Err}",

      "translation": "reading {FilePath} failed: {Err}"
    },
    {

      "id": "Warning: environment variable '{EnvVarName}' is referenced in input file, but not defined in the environment.",

      "translation": "Warning: environment variable '{EnvVarName}' is referenced in input file, but not defined in the environment."
    },
    {

      "id": "Error scanning input, error {Err}",

      "translation": "Error scanning input, error {Err}"
    },
    {

      "id": "Error reading HTTP response, error {Err}",

      "translation": "Error reading HTTP response, error {Err}"
    },
    {

      "id": "Can't connect to the Horizon REST API to run {ApiMethod}. Run 'systemctl status horizon' to check if the Horizon agent is running. Or set HORIZON_URL to connect to another local port that is connected to a remote Horizon agent via a ssh tunnel. Specific error is: {Err}",

      "translation": "Can't connect to the Horizon REST API to run {ApiMethod}. Run 'systemctl status horizon' to check if the Horizon agent is running. Or set HORIZON_URL to connect to another local port that is connected to a remote Horizon agent via a ssh tunnel. Specific error is: {Err}"
    },
    {

      "id": "Can't connect to the Horizon REST API to run {ApiMethod}. Maybe the ssh tunnel associated with that port is down? Or maybe the remote Horizon agent at the other end of that tunnel is down. Specific error is: {Err}",

      "translation": "Can't connect to the Horizon REST API to run {ApiMethod}. Maybe the ssh tunnel associated with that port is down? Or maybe the remote Horizon agent at the other end of that tunnel is down. Specific error is: {Err}"
    },
    {

      "id": "{ApiMsg} new request failed: {Err}",

      "translation": "{ApiMsg} new request failed: {Err}"
    },
    {

      "id": "Bad HTTP code from {ApiMsg}: {HttpCode}",

      "translation": "Bad HTTP code from {ApiMsg}: {HttpCode}"
    },
    {

      "id": "bad HTTP code from {ApiMsg}: {HttpCode}",

      "translation": "bad HTTP code from {ApiMsg}: {HttpCode}"
    },
    {

      "id": "Failed to read body response from {ApiMsg}: {Err}",

      "translation": "Failed to read body response from {ApiMsg}: {Err}"
    },
    {

      "id": "failed to read body response from {ApiMsg}: {Err}",

      "translation": "failed to read body response from {ApiMsg}: {Err}"
    },
    {

      "id": "Failed to unmarshal body response from {ApiMsg}: {Err}",

      "translation": "Failed to unmarshal body response from {ApiMsg}: {Err}"
    },
    {

      "id": "failed to unmarshal body response from {ApiMsg}: {Err}",

      "translation": "failed to unmarshal body response from {ApiMsg}: {Err}"
    },
    {

      "id": "bad HTTP code {HttpCode} from {ApiMsg}: {Body}",

      "translation": "bad HTTP code {HttpCode} from {ApiMsg}: {Body}"
    },
    {

      "id": "failed to marshal body for {ApiMsg}: {Err}",

      "translation": "failed to marshal body for {ApiMsg}: {Err}"
    },
    {

      "id": "Failed to unmarshal bytes. {Err}",

      "translation": "Failed to unmarshal bytes. {Err}"
    },
    {

      "id": "Error getting HZN_ICP_CA_CERT_PATH from {ANAXOVERWRITEFILE}: {Err}",

      "translation": "Error getting HZN_ICP_CA_CERT_PATH from {ANAXOVERWRITEFILE}: {Err}"
    },
    {

      "id": "Error getting HZN_EXCHANGE_URL from {ANAXOVERWRITEFILE}. {Err}",

      "translation": "Error getting HZN_EXCHANGE_URL from {ANAXOVERWRITEFILE}. {Err}"
    },
    {

      "id": "Error getting ExchangeUrl from {ANAXCONFIGFILE}. {Err}",

      "translation": "Error getting ExchangeUrl from {ANAXCONFIGFILE}. {Err}"
    },
    {

      "id": "HZN_EXCHANGE_URL is not set, get it from horizon agent configuration on the node.",

      "translation": "HZN_EXCHANGE_URL is not set, get it from horizon agent configuration on the node."
    },
    {

      "id": "Could not get the exchange url from environment variable HZN_EXCHANGE_URL or the horizon agent",

      "translation": "Could not get the exchange url from environment variable HZN_EXCHANGE_URL or the horizon agent"
    },
    {

      "id": "The exchange url: {ExchUrl}",

      "translation": "The exchange url: {ExchUrl}"
    },
    {

      "id": "Error getting HZN_FSS_CSSURL from {ANAXOVERWRITEFILE}. {Err}",

      "translation": "Error getting HZN_FSS_CSSURL from {ANAXOVERWRITEFILE}. {Err}"
    },
    {

      "id": "Error getting model management service Url from {ANAXCONFIGFILE}. {Err}",

      "translation": "Error getting model management service Url from {ANAXCONFIGFILE}. {Err}"
    },
    {

      "id": "HZN_FSS_CSSURL is not set, get it from horizon agent configuration on the node.",

      "translation": "HZN_FSS_CSSURL is not set, get it from horizon agent configuration on the node."
    },
    {

      "id": "Could not get the model management service url from environment variable HZN_FSS_CSSURL or the horizon agent",

      "translation": "Could not get the model management service url from environment variable HZN_FSS_CSSURL or the horizon agent"
    },
    {

      "id": "The model management service url: {MmsUrl}",

      "translation": "The model management service url: {MmsUrl}"
    },
    {

      "id": "Can't connect to the Horizon {HorizonService} REST API to run {ApiMethod}. Set {ServiceEnvVarName} to use {Article} {HorizonService_1} other than the one the Horizon Agent is currently configured for. Specific error is: {Err}",

      "translation": "Can't connect to the Horizon {HorizonService} REST API to run {ApiMethod}. Set {ServiceEnvVarName} to use {Article} {HorizonService_1} other than the one the Horizon Agent is currently configured for. Specific error is: {Err}"
    },
    {

      "id": "Can't connect to the Horizon {HorizonService} REST API to run {ApiMethod}. Maybe {ServiceEnvVarName} is set incorrectly? Or unset {ServiceEnvVarName_1} to use the {HorizonService_1} that the Horizon Agent is configured for. Specific error is: {Err}",

      "translation": "Can't connect to the Horizon {HorizonService} REST API to run {ApiMethod}. Maybe {ServiceEnvVarName} is set incorrectly? Or unset {ServiceEnvVarName_1} to use the {HorizonService_1} that the Horizon Agent is configured for. Specific error is: {Err}"
    },
    {

      "id": "Encountered HTTP error: {Err} calling {Service} REST API {ApiMsg}. Will retry.",

      "translation": "Encountered HTTP error: {Err} calling {Service} REST API {ApiMsg}. Will retry."
    },
    {

      "id": "Encountered HTTP error: {Err} calling {Service} REST API {ApiMsg}",

      "translation": "Encountered HTTP error: {Err} calling {Service} REST API {ApiMsg}"
    },
    {

      "id": "bad HTTP code {HttpCode} from {ApiMsg}, output: {StringbodyBytes}",

      "translation": "bad HTTP code {HttpCode} from {ApiMsg}, output: {StringbodyBytes}"
    },
    {

      "id": "failed to unmarshal exchange body response from {ApiMsg}: {Err}",

      "translation": "failed to unmarshal exchange body response from {ApiMsg}: {Err}"
    },
    {

      "id": "failed to marshal exchange output from {ApiMsg}: {Err}",

      "translation": "failed to marshal exchange output from {ApiMsg}: {Err}"
    },
    {

      "id": "failed to marshal exchange body for {ApiMsg}: {Err}",

      "translation": "failed to marshal exchange body for {ApiMsg}: {Err}"
    },
    {

      "id": "failed to read exchange body response from {ApiMsg}: {Err}",

      "translation": "failed to read exchange body response from {ApiMsg}: {Err}"
    },
    {

      "id": "bad HTTP code {HttpCode} from {ApiMsg}: {Code}, {Msg}",

      "translation": "bad HTTP code {HttpCode} from {ApiMsg}: {Code}, {Msg}"
    },
    {

      "id": "bad HTTP code {HttpCode} from {ApiMsg}",

      "translation": "bad HTTP code {HttpCode} from {ApiMsg}"
    },
    {

      "id": "exchange authentication must be specified with one of the following: the -u flag, the -n flag, HZN_EXCHANGE_USER_AUTH or HZN_EXCHANGE_NODE_AUTH",

      "translation": "exchange authentication must be specified with one of the following: the -u flag, the -n flag, HZN_EXCHANGE_USER_AUTH or HZN_EXCHANGE_NODE_AUTH"
    },
    {

      "id": "Failed to get absolute path for file {KeyFile}. {Err}",

      "translation": "Failed to get absolute path for file {KeyFile}. {Err}"
    },
    {

      "id": "{Err}. Please create the signing key.",

      "translation": "{Err}. Please create the signing key."
    },
    {

      "id": "running: {CmdStr}",

      "translation": "running: {CmdStr}"
    },
    {

      "id": "did not get a command object",

      "translation": "did not get a command object"
    },
    {

      "id": "Could not get Stdin pipe, error: {Err}",

      "translation": "Could not get Stdin pipe, error: {Err}"
    },
    {

      "id": "could not retrieve output from command, error: {Err}",

      "translation": "could not retrieve output from command, error: {Err}"
    },
    {

      "id": "could not retrieve stderr from command, error: {Err}",

      "translation": "could not retrieve stderr from command, error: {Err}"
    },
    {

      "id": "Unable to start command, error: {Err}",

      "translation": "Unable to start command, error: {Err}"
    },
    {

      "id": "Unable to write to stdin of command, error: {Err}",

      "translation": "Unable to write to stdin of command, error: {Err}"
    },
    {

      "id": "Unable to close stdin, error: {Err}",

      "translation": "Unable to close stdin, error: {Err}"
    },
    {

      "id": "could not read stdout, error: {Err}",

      "translation": "could not read stdout, error: {Err}"
    },
    {

      "id": "could not read stderr, error: {Err}",

      "translation": "could not read stderr, error: {Err}"
    },
    {

      "id": "command failed: {Err}, stderr: {StringstderrBytes}",

      "translation": "command failed: {Err}, stderr: {StringstderrBytes}"
    },
    {

      "id": "Unable to marshal userinput object: {Err}",

      "translation": "Unable to marshal userinput object: {Err}"
    },
    {

      "id": "A list of objects, each one containing the user inputs required for a specified service.",

      "translation": "A list of objects, each one containing the user inputs required for a specified service."
    },
    {

      "id": "The horizon org of the specified service.",

      "translation": "The horizon org of the specified service."
    },
    {

      "id": "The unique string used to identify the specified service.",

      "translation": "The unique string used to identify the specified service."
    },
    {

      "id": "The service architecture that these inputs apply to. Omit or leave blank to mean all architectures.",

      "translation": "The service architecture that these inputs apply to. Omit or leave blank to mean all architectures."
    },
    {

      "id": "The service versions that these inputs apply to. Omit or specify \"[0.0.0,INFINITY)\" to mean all versions.",

      "translation": "The service versions that these inputs apply to. Omit or specify \"[0.0.0,INFINITY)\" to mean all versions."
    },
    {

      "id": "A list of objects with the names and values for the user inputs used by this service.",

      "translation": "A list of objects with the names and values for the user inputs used by this service."
    },
    {

      "id": "Error unmarshaling userInput json file: {Err}",

      "translation": "Error unmarshaling userInput json file: {Err}"
    },
    {

      "id": "Are you sure you want to remove the node user inputs?",

      "translation": "Are you sure you want to remove the node user inputs?"
    },
    {

      "id": "{Image} parsed into: domain={Domain}, path={Path}, tag={Tag}",

      "translation": "{Image} parsed into: domain={Domain}, path={Path}, tag={Tag}"
    },
    {

      "id": "Warning: could not parse image path '{Image}'. Not pushing it to a docker registry, just including it in the 'deployment' field as-is.",

      "translation": "Warning: could not parse image path '{Image}'. Not pushing it to a docker registry, just including it in the 'deployment' field as-is."
    },
    {

      "id": "Using '{NewImage}' in 'deployment' field instead of '{Image}'",

      "translation": "Using '{NewImage}' in 'deployment' field instead of '{Image}'"
    },
    {

      "id": "failed to marshal deployment string {Dep}, error {Err}",

      "translation": "failed to marshal deployment string {Dep}, error {Err}"
    },
    {

      "id": "problem signing deployment string with {KeyFilePath}: {Err}",

      "translation": "problem signing deployment string with {KeyFilePath}: {Err}"
    },
    {

      "id": "each service defined under 'deployment.services' must be a json object (with strings as the keys)",

      "translation": "each service defined under 'deployment.services' must be a json object (with strings as the keys)"
    },
    {

      "id": "service '{SvcName}' defined under 'deployment.services' does not have mandatory 'image' field",

      "translation": "service '{SvcName}' defined under 'deployment.services' does not have mandatory 'image' field"
    },
    {

      "id": "service '{SvcName}' defined under 'deployment.services' has unrecognized field '{K}'. See https://github.com/open-horizon/anax/blob/master/doc/deployment_string.md",

      "translation": "service '{SvcName}' defined under 'deployment.services' has unrecognized field '{K}'. See https://github.com/open-horizon/anax/blob/master/doc/deployment_string.md"
    },
    {

      "id": "the 'deployment' field must contain the 'services' field, whose value must be a json object (with strings as the keys)",

      "translation": "the 'deployment' field must contain the 'services' field, whose value must be a json object (with strings as the keys)"
    },
    {

      "id": "the 'deployment' field must contain either the native Horizon deployment config or the Helm deployment config, whose value must be a json object (with strings as the keys)",

      "translation": "the 'deployment' field must contain either the native Horizon deployment config or the Helm deployment config, whose value must be a json object (with strings as the keys)"
    },
    {

      "id": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to start file sync service, {Sserr}",

      "translation": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to start file sync service, {Sserr}"
    },
    {

      "id": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to get service dependencies, {Derr}",

      "translation": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to get service dependencies, {Derr}"
    },
    {

      "id": "Starting dependencies.",

      "translation": "Starting dependencies."
    },
    {

      "id": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to start service dependencies, {Perr}",

      "translation": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to start service dependencies, {Perr}"
    },
    {

      "id": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to generate test agreementId, {Aerr}",

      "translation": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to generate test agreementId, {Aerr}"
    },
    {

      "id": "'{SERVICECOMMAND} {SERVICESTOPCOMMAND}' unable to stop service dependencies, {Err}",

      "translation": "'{SERVICECOMMAND} {SERVICESTOPCOMMAND}' unable to stop service dependencies, {Err}"
    },
    {

      "id": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to stop file sync service, {Sserr}",

      "translation": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to stop file sync service, {Sserr}"
    },
    {

      "id": "Stopped service.",

      "translation": "Stopped service."
    },
    {

      "id": "failed to marshal '/service/config' output attribute {Attr}. {Err}",

      "translation": "failed to marshal '/service/config' output attribute {Attr}. {Err}"
    },
    {

      "id": "failed to convert '/service/config' output attribute {Attr} to its original type. {Err}",

      "translation": "failed to convert '/service/config' output attribute {Attr} to its original type. {Err}"
    },
    {

      "id": "failed to marshal 'hzn service list' output: {Err}",

      "translation": "failed to marshal 'hzn service list' output: {Err}"
    },
    {

      "id": "failed to marshal 'hzn service registered' output: {Err}",

      "translation": "failed to marshal 'hzn service registered' output: {Err}"
    },
    {

      "id": "failed to marshal 'hzn service configstate' output: {Err}",

      "translation": "failed to marshal 'hzn service configstate' output: {Err}"
    },
    {

      "id": "all the registered services",

      "translation": "all the registered services"
    },
    {

      "id": "service {ServiceOrg}/{ServiceUrl}",

      "translation": "service {ServiceOrg}/{ServiceUrl}"
    },
    {

      "id": "all the registered services from organization {ServiceOrg}",

      "translation": "all the registered services from organization {ServiceOrg}"
    },
    {

      "id": "Please specify the organization for service {ServiceUrl}.",

      "translation": "Please specify the organization for service {ServiceUrl}."
    },
    {

      "id": "Are you sure you want to suspend {Msgpart} for this Horizon node?",

      "translation": "Are you sure you want to suspend {Msgpart} for this Horizon node?"
    },
    {

      "id": "Suspending {Msgpart}, cancelling releated agreements, stopping related service containers...",

      "translation": "Suspending {Msgpart}, cancelling releated agreements, stopping related service containers..."
    },
    {

      "id": "Resuming {Msgpart} ...",

      "translation": "Resuming {Msgpart} ..."
    },
    {

      "id": "failed to marshal 'key list' output: {Err}",

      "translation": "failed to marshal 'key list' output: {Err}"
    },
    {

      "id": "horizon api trust output did not include 'pem' key",

      "translation": "horizon api trust output did not include 'pem' key"
    },
    {

      "id": "failed to create a new key pair: {Err}",

      "translation": "failed to create a new key pair: {Err}"
    },
    {

      "id": "Move private key file from {PrivKeyName} to {PrivKeyFile}",

      "translation": "Move private key file from {PrivKeyName} to {PrivKeyFile}"
    },
    {

      "id": "failed to move private key file from {PrivKeyName} to {PrivKeyFile}. {Err}",

      "translation": "failed to move private key file from {PrivKeyName} to {PrivKeyFile}. {Err}"
    },
    {

      "id": "Move public key file from {PubKeyName} to {PubKeyFile}.",

      "translation": "Move public key file from {PubKeyName} to {PubKeyFile}."
    },
    {

      "id": "failed to move public key file from {PubKeyName} to {PubKeyFile}. {Err}",

      "translation": "failed to move public key file from {PubKeyName} to {PubKeyFile}. {Err}"
    },
    {

      "id": "Created keys:\n \t{PrivKeyFile}\n\t{PubKeyFile}",

      "translation": "Created keys:\n \t{PrivKeyFile}\n\t{PubKeyFile}"
    },
    {

      "id": "asked to import the created public key, but can not determine the name.",

      "translation": "asked to import the created public key, but can not determine the name."
    },
    {

      "id": "Importing public key file {PubKeyFile} to the Horizon agent.",

      "translation": "Importing public key file {PubKeyFile} to the Horizon agent."
    },
    {

      "id": "{PubKeyFile} imported to the Horizon agent",

      "translation": "{PubKeyFile} imported to the Horizon agent"
    },
    {

      "id": "Public key '{KeyName}' removed from the Horizon agent.",

      "translation": "Public key '{KeyName}' removed from the Horizon agent."
    },
    {

      "id": "-d is mutually exclusive with -k and -K",

      "translation": "-d is mutually exclusive with -k and -K"
    },
    {

      "id": "Creating directory {OutputDirPub}.",

      "translation": "Creating directory {OutputDirPub}."
    },
    {

      "id": "{PrivKeyFile} is a directory. Please specify a file name.",

      "translation": "{PrivKeyFile} is a directory. Please specify a file name."
    },
    {

      "id": "File {PrivKeyFile} and {PubKeyFile} exist, do you want to overwrite?",

      "translation": "File {PrivKeyFile} and {PubKeyFile} exist, do you want to overwrite?"
    },
    {

      "id": "File {PrivKeyFile} exists, do you want to overwrite?",

      "translation": "File {PrivKeyFile} exists, do you want to overwrite?"
    },
    {

      "id": "Deleting file {PrivKeyFile}.",

      "translation": "Deleting file {PrivKeyFile}."
    },
    {

      "id": "cleaned {String} resulted in an empty string.",

      "translation": "cleaned {String} resulted in an empty string."
    },
    {

      "id": "plugin context must include 'currentDir' as the current directory of the service definition file",

      "translation": "plugin context must include 'currentDir' as the current directory of the service definition file"
    },
    {

      "id": "unable to read chart archive {Depchartarchive}, error {Err}",

      "translation": "unable to read chart archive {Depchartarchive}, error {Err}"
    },
    {

      "id": "chart_archive must have a string type value, has {C}",

      "translation": "chart_archive must have a string type value, has {C}"
    },
    {

      "id": "release_name must have a string type value, has {R}",

      "translation": "release_name must have a string type value, has {R}"
    },
    {

      "id": "chart_archive and release_name must be non-empty strings",

      "translation": "chart_archive and release_name must be non-empty strings"
    },
    {

      "id": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' not supported for Helm deployments",

      "translation": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' not supported for Helm deployments"
    },
    {

      "id": "problem signing stdin with {PrivKeyFilePath}: {Err}",

      "translation": "problem signing stdin with {PrivKeyFilePath}: {Err}"
    },
    {

      "id": "Failed to get the variables from configuration file {CofigFile}. Error: {Err}",

      "translation": "Failed to get the variables from configuration file {CofigFile}. Error: {Err}"
    }
  ]
}
