[
  {
    "id": "Error node authentication credentials do not match requesting node.",
    "translation": "Error node authentication credentials do not match requesting node."
  },
  {
    "id": "Unable to retrieve node from the exchange.",
    "translation": "Unable to retrieve node from the exchange."
  },
  {
    "id": "Error node ha group {HAGroup} does not match group name in request {GroupName}.",
    "translation": "Error node ha group {HAGroup} does not match group name in request {GroupName}."
  },
  {
    "id": "Error handling node upgrade request: {Error}",
    "translation": "Error handling node upgrade request: {Error}"
  },
  {
    "id": "Node {Org}/{Node} can start executing nmp {NmpId}.",
    "translation": "Node {Org}/{Node} can start executing nmp {NmpId}."
  },
  {
    "id": "Node {Org}/{Node} can not start executing nmp {NmpId}.",
    "translation": "Node {Org}/{Node} can not start executing nmp {NmpId}."
  },
  {
    "id": "No input found.",
    "translation": "No input found."
  },
  {
    "id": "Unauthorized. No exchange {AuthType} id is supplied.",
    "translation": "Unauthorized. No exchange {AuthType} id is supplied."
  },
  {
    "id": "Failed to authenticate the {AuthType} with the Exchange. {Err}",
    "translation": "Failed to authenticate the {AuthType} with the Exchange. {Err}"
  },
  {
    "id": "Input body couldn't be deserialized to JSON object. {Err}",
    "translation": "Input body couldn't be deserialized to JSON object. {Err}"
  },
  {
    "id": "Input body couldn't be deserialized to PolicyCheck object. {Err}",
    "translation": "Input body couldn't be deserialized to PolicyCheck object. {Err}"
  },
  {
    "id": "Input body couldn't be deserialized to UserInputCheck object. {Err}",
    "translation": "Input body couldn't be deserialized to UserInputCheck object. {Err}"
  },
  {
    "id": "Input body couldn't be deserialized to SecretBindingCheck object. {Err}",
    "translation": "Input body couldn't be deserialized to SecretBindingCheck object. {Err}"
  },
  {
    "id": "Input body couldn't be deserialized to CompCheck object. {Err}",
    "translation": "Input body couldn't be deserialized to CompCheck object. {Err}"
  },
  {
    "id": "No exchange user id is supplied.",
    "translation": "No exchange user id is supplied."
  },
  {
    "id": "No exchange user organization id is supplied.",
    "translation": "No exchange user organization id is supplied."
  },
  {
    "id": "No exchange user password or api key is supplied.",
    "translation": "No exchange user password or api key is supplied."
  },
  {
    "id": "Wrong organization id, {Arg_1} id or password.",
    "translation": "Wrong organization id, {Arg_1} id or password."
  },
  {
    "id": "Exchange user {Key} is not in the correct format, should be org/username.",
    "translation": "Exchange user {Key} is not in the correct format, should be org/username."
  },
  {
    "id": "Exchange device {Key} is not in the correct format, should be org/nodename.",
    "translation": "Exchange device {Key} is not in the correct format, should be org/nodename."
  },
  {
    "id": "Internal server error",
    "translation": "Internal server error"
  },
  {
    "id": "There is no secrets provider configured, secrets are unavailable.",
    "translation": "There is no secrets provider configured, secrets are unavailable."
  },
  {
    "id": "The secrets provider is not ready. The caller should retry this API call a small number of times with a short delay between calls to ensure that the secrets provider is unavailable.",
    "translation": "The secrets provider is not ready. The caller should retry this API call a small number of times with a short delay between calls to ensure that the secrets provider is unavailable."
  },
  {
    "id": "Secret name must be provided",
    "translation": "Secret name must be provided"
  },
  {
    "id": "Unable to read request body, error: {Err}.",
    "translation": "Unable to read request body, error: {Err}."
  },
  {
    "id": "Request body is empty.",
    "translation": "Request body is empty."
  },
  {
    "id": "Request body parse error, {Uerr}",
    "translation": "Request body parse error, {Uerr}"
  },
  {
    "id": "Permission denied, user \"{ExUser}\" cannot {Action} secrets in organization \"{Org}\"",
    "translation": "Permission denied, user \"{ExUser}\" cannot {Action} secrets in organization \"{Org}\""
  },
  {
    "id": "Permission denied, user \"{ExUser}\" cannot {Action} secret \"{SecretName}\" in organization \"{Org}\"",
    "translation": "Permission denied, user \"{ExUser}\" cannot {Action} secret \"{SecretName}\" in organization \"{Org}\""
  },
  {
    "id": "Unable to read the vault response: {Error}",
    "translation": "Unable to read the vault response: {Error}"
  },
  {
    "id": "Unable to parse the vault response \"{Response}\": {Error}",
    "translation": "Unable to parse the vault response \"{Response}\": {Error}"
  },
  {
    "id": "Unable to {Action} secrets in organization \"{Org}\", operation not supported by the secrets provider.",
    "translation": "Unable to {Action} secrets in organization \"{Org}\", operation not supported by the secrets provider."
  },
  {
    "id": "Unable to {Action} secret \"{SecretName}\" in organization \"{Org}\", operation not supported by the secrets provider.",
    "translation": "Unable to {Action} secret \"{SecretName}\" in organization \"{Org}\", operation not supported by the secrets provider."
  },
  {
    "id": "Secrets provider received a bad request, please check all the provided inputs.",
    "translation": "Secrets provider received a bad request, please check all the provided inputs."
  },
  {
    "id": "Response: {Response}",
    "translation": "Response: {Response}"
  },
  {
    "id": "No secret(s) found in organization \"{Org}\"",
    "translation": "No secret(s) found in organization \"{Org}\""
  },
  {
    "id": "No secret(s) found under secret name \"{SecretName}\"",
    "translation": "No secret(s) found under secret name \"{SecretName}\""
  },
  {
    "id": "An unknown error occurred. Response code {ResponseCode} received from the secrets provider.",
    "translation": "An unknown error occurred. Response code {ResponseCode} received from the secrets provider."
  },
  {
    "id": "Organization must be specified in the API path",
    "translation": "Organization must be specified in the API path"
  },
  {
    "id": "User must be specified in the API path",
    "translation": "User must be specified in the API path"
  },
  {
    "id": "Error checking secret {FullSecretName} in the secret manager.",
    "translation": "Error checking secret {FullSecretName} in the secret manager."
  },
  {
    "id": "Wrong type returned checking the secret name in the secret manager: {Payload}",
    "translation": "Wrong type returned checking the secret name in the secret manager: {Payload}"
  },
  {
    "id": "Secret {FullSecretName} does not exist in the secret manager.",
    "translation": "Secret {FullSecretName} does not exist in the secret manager."
  },
  {
    "id": "Error parsing the selections {Form}. {Err}",
    "translation": "Error parsing the selections {Form}. {Err}"
  },
  {
    "id": "Error getting {Resource} for output, error {Err}",
    "translation": "Error getting {Resource} for output, error {Err}"
  },
  {
    "id": "Error parsing input for node configuration/registration. Input body couldn't be deserialized to node object: {Arg_1}, error: {Arg_2}",
    "translation": "Error parsing input for node configuration/registration. Input body couldn't be deserialized to node object: {Arg_1}, error: {Arg_2}"
  },
  {
    "id": "Error parsing input for node configuration/registration. Input body couldn't be deserialized to configstate object: {Arg_1}, error: {Arg_2}",
    "translation": "Error parsing input for node configuration/registration. Input body couldn't be deserialized to configstate object: {Arg_1}, error: {Arg_2}"
  },
  {
    "id": "Error parsing input for node update. Input body couldn't be deserialized to node object: {Arg_1}, error: {Arg_2}",
    "translation": "Error parsing input for node update. Input body couldn't be deserialized to node object: {Arg_1}, error: {Arg_2}"
  },
  {
    "id": "Error parsing input for node policy. Input body could not be deserialized as a policy object: {Arg_1}, error: {Arg_2}",
    "translation": "Error parsing input for node policy. Input body could not be deserialized as a policy object: {Arg_1}, error: {Arg_2}"
  },
  {
    "id": "Error parsing input for node policy patch. Input body could not be deserialized into a Constraint Expression or Property List: {Arg_1}, error: {Arg_2}",
    "translation": "Error parsing input for node policy patch. Input body could not be deserialized into a Constraint Expression or Property List: {Arg_1}, error: {Arg_2}"
  },
  {
    "id": "Error parsing input for node policy patch. Input body does not contain 'properties', 'constraints', 'deployment' or 'management' attribute: {Arg_1}",
    "translation": "Error parsing input for node policy patch. Input body does not contain 'properties', 'constraints', 'deployment' or 'management' attribute: {Arg_1}"
  },
  {
    "id": "Error parsing input for node user input. Input body could not be deserialized as a UserInput object: {Arg_1}, error: {Arg_2}",
    "translation": "Error parsing input for node user input. Input body could not be deserialized as a UserInput object: {Arg_1}, error: {Arg_2}"
  },
  {
    "id": "Error in node configuration/registration for node {Arg_1}. {Arg_2}",
    "translation": "Error in node configuration/registration for node {Arg_1}. {Arg_2}"
  },
  {
    "id": "Error in updating node {Arg_1}. {Arg_2}",
    "translation": "Error in updating node {Arg_1}. {Arg_2}"
  },
  {
    "id": "Error in node unregistration. {Arg_1}",
    "translation": "Error in node unregistration. {Arg_1}"
  },
  {
    "id": "Error verifiying exchange version. error: {Arg_1}",
    "translation": "Error verifiying exchange version. error: {Arg_1}"
  },
  {
    "id": "Error in creating or replacing node policy. {Arg_1}",
    "translation": "Error in creating or replacing node policy. {Arg_1}"
  },
  {
    "id": "Error in patching node policy. {Arg_1}",
    "translation": "Error in patching node policy. {Arg_1}"
  },
  {
    "id": "Error in deleting node policy. {Arg_1}",
    "translation": "Error in deleting node policy. {Arg_1}"
  },
  {
    "id": "Error in updating node user input. {Arg_1}",
    "translation": "Error in updating node user input. {Arg_1}"
  },
  {
    "id": "Error in patching node user input. {Arg_1}",
    "translation": "Error in patching node user input. {Arg_1}"
  },
  {
    "id": "Error in deleting node userinput. {Arg_1}",
    "translation": "Error in deleting node userinput. {Arg_1}"
  },
  {
    "id": "Start node configuration/registration for node {Arg_1}.",
    "translation": "Start node configuration/registration for node {Arg_1}."
  },
  {
    "id": "Start updating node {Arg_1}.",
    "translation": "Start updating node {Arg_1}."
  },
  {
    "id": "Complete node update for {Arg_1}.",
    "translation": "Complete node update for {Arg_1}."
  },
  {
    "id": "Start node unregistration.",
    "translation": "Start node unregistration."
  },
  {
    "id": "Node unregistration complete for node {Arg_1}.",
    "translation": "Node unregistration complete for node {Arg_1}."
  },
  {
    "id": "Error unregistering the node. The node is not found from the database.",
    "translation": "Error unregistering the node. The node is not found from the database."
  },
  {
    "id": "Error unregistering the node. The node must be in 'configured' or 'configuring' state in order to unconfigure it.",
    "translation": "Error unregistering the node. The node must be in 'configured' or 'configuring' state in order to unconfigure it."
  },
  {
    "id": "Input error for node unregistration. {Arg_1} is an incorrect value for removeNode",
    "translation": "Input error for node unregistration. {Arg_1} is an incorrect value for removeNode"
  },
  {
    "id": "Input error for node unregistration. {Arg_1} is an incorrect value for deepClean",
    "translation": "Input error for node unregistration. {Arg_1} is an incorrect value for deepClean"
  },
  {
    "id": "Input error for node unregistration. {Arg_1} is an incorrect value for block",
    "translation": "Input error for node unregistration. {Arg_1} is an incorrect value for block"
  },
  {
    "id": "Unable to read node object from database, error {Arg_1}",
    "translation": "Unable to read node object from database, error {Arg_1}"
  },
  {
    "id": "Error saving new node config state (unconfiguring) in the database: {Arg_1}",
    "translation": "Error saving new node config state (unconfiguring) in the database: {Arg_1}"
  },
  {
    "id": "Error in node configuration. The node is not found from the database.",
    "translation": "Error in node configuration. The node is not found from the database."
  },
  {
    "id": "Error in node configuration. The node must be in 'configured' or 'configuring' state in order to change the state to {Arg_1}.",
    "translation": "Error in node configuration. The node must be in 'configured' or 'configuring' state in order to change the state to {Arg_1}."
  },
  {
    "id": "Node state transition from '{Arg_1}' to '{Arg_2}' is not supported.",
    "translation": "Node state transition from '{Arg_1}' to '{Arg_2}' is not supported."
  },
  {
    "id": "Failed get user input from local db. {Arg_1}",
    "translation": "Failed get user input from local db. {Arg_1}"
  },
  {
    "id": "Failed to find preferences for service {Arg_1}/{Arg_2} from the local user input, error: {Arg_3}",
    "translation": "Failed to find preferences for service {Arg_1}/{Arg_2} from the local user input, error: {Arg_3}"
  },
  {
    "id": "Error saving new node config state to database: {Arg_1}",
    "translation": "Error saving new node config state to database: {Arg_1}"
  },
  {
    "id": "Complete node configuration/registration for node {Arg_1}.",
    "translation": "Complete node configuration/registration for node {Arg_1}."
  },
  {
    "id": "Error in service configuration for {Arg_1}. {Arg_2}",
    "translation": "Error in service configuration for {Arg_1}. {Arg_2}"
  },
  {
    "id": "Error getting service references for pattern {Arg_1}. {Arg_2}",
    "translation": "Error getting service references for pattern {Arg_1}. {Arg_2}"
  },
  {
    "id": "Ignoring service. {Arg_1}",
    "translation": "Ignoring service. {Arg_1}"
  },
  {
    "id": "New node policy: {Arg_1}",
    "translation": "New node policy: {Arg_1}"
  },
  {
    "id": "Deleted node policy",
    "translation": "Deleted node policy"
  },
  {
    "id": "New node user input: {Arg_1}",
    "translation": "New node user input: {Arg_1}"
  },
  {
    "id": "No node user input to detele",
    "translation": "No node user input to detele"
  },
  {
    "id": "Deleted all node user input",
    "translation": "Deleted all node user input"
  },
  {
    "id": "Start service configuration with user input for {Arg_1}/{Arg_2}.",
    "translation": "Start service configuration with user input for {Arg_1}/{Arg_2}."
  },
  {
    "id": "Start service auto configuration for {Arg_1}/{Arg_2}.",
    "translation": "Start service auto configuration for {Arg_1}/{Arg_2}."
  },
  {
    "id": "Complete service configuration for {Arg_1}/{Arg_2}.",
    "translation": "Complete service configuration for {Arg_1}/{Arg_2}."
  },
  {
    "id": "Complete service auto configuration for {Arg_1}/{Arg_2}.",
    "translation": "Complete service auto configuration for {Arg_1}/{Arg_2}."
  },
  {
    "id": "Variable {Arg_1} is missing in the service configuration for {Arg_2}/{Arg_3}. It may prevent an agreement if the deployment policy does not contain the setting for the missing variable.",
    "translation": "Variable {Arg_1} is missing in the service configuration for {Arg_2}/{Arg_3}. It may prevent an agreement if the deployment policy does not contain the setting for the missing variable."
  },
  {
    "id": "Error configuring service {Arg_1}. {Arg_2}",
    "translation": "Error configuring service {Arg_1}. {Arg_2}"
  },
  {
    "id": "Error changing service configstate {Arg_1}, error {Arg_2}",
    "translation": "Error changing service configstate {Arg_1}, error {Arg_2}"
  },
  {
    "id": "Start changing service configuration state to {Arg_1} for {Arg_2} for the node.",
    "translation": "Start changing service configuration state to {Arg_1} for {Arg_2} for the node."
  },
  {
    "id": "Complete changing service configuration state to {Arg_1} for {Arg_2} for the node.",
    "translation": "Complete changing service configuration state to {Arg_1} for {Arg_2} for the node."
  },
  {
    "id": "Node management status for {Arg_1}/{Arg_2} changed to {Arg_3}.",
    "translation": "Node management status for {Arg_1}/{Arg_2} changed to {Arg_3}."
  },
  {
    "id": "Error converting the selections into Selectors: {Err}",
    "translation": "Error converting the selections into Selectors: {Err}"
  },
  {
    "id": "Name, or Org is empty string.",
    "translation": "Name, or Org is empty string."
  },
  {
    "id": "The serviceVersions array is empty.",
    "translation": "The serviceVersions array is empty."
  },
  {
    "id": "properties contains an invalid property: {Err}",
    "translation": "properties contains an invalid property: {Err}"
  },
  {
    "id": "The property {PROPSVCPRIVILEGED} must have a boolean value (true or false).",
    "translation": "The property {PROPSVCPRIVILEGED} must have a boolean value (true or false)."
  },
  {
    "id": "Command line interface for Horizon agent. Most of the sub-commands use the Horizon Agent API at the default location http://localhost (see environment Environment Variables section to override this).\n\nSubcommands Description:\n  agbot: List and manage Horizon agreement bot resources.\n  agreement: List or manage the agreements this edge node has made with a Horizon agreement bot.\n  architecture: Show the architecture of this machine. \n  attribute: List or manage the global attributes that are currently registered on this Horizon edge node.\n  deploycheck: Check deployment compatibility.\n  dev: Development tools for creation of services.\n  env: Show the Horizon Environment Variables.\n  eventlog: List the event logs for the current or all registrations.\n  exchange: List and manage Horizon Exchange resources.\n  key: List and manage keys for signing and verifying services. \n  mms: List and manage Horizon Model Management Service resources.\n  nmstatus: List and manage node management status for the local node.\n  node: List and manage general information about this Horizon edge node.\n  nodemanagement: List and manage manifests and agent files for node management.\n  policy: List and manage policy for this Horizon edge node. \n  reginput: Create an input file template for this pattern that can be used for the 'hzn register' command. \n  register: Register this edge node with the management hub.\n  secretsmanager: List and manage secrets in the secrets manager.\n  service: List or manage the services that are currently registered on this Horizon edge node.\n  status: Display the current horizon internal status for the node.\n  unregister: Unregister and reset this Horizon edge node.\n  userinput: List or manager the service user inputs that are currently registered on this Horizon edge node.\n  util: Utility commands.\n  version: Show the Horizon version.\n  sdo: List and manage Horizon SDO ownership vouchers and keys.\n\nEnvironment Variables:\n  HORIZON_URL:  Override the URL at which hzn contacts the Horizon Agent API.\n      This can facilitate using a remote Horizon Agent via an ssh tunnel.\n  HZN_EXCHANGE_URL:  Override the URL that the 'hzn exchange' sub-commands use\n      to communicate with the Horizon Exchange, for example\n      https://exchange.bluehorizon.network/api/v1. (By default hzn will ask the\n      Horizon Agent for the URL.)\n  HZN_ORG_ID:  Default value for the 'hzn exchange -o' flag,\n      to specify the organization ID'.\n  HZN_EXCHANGE_USER_AUTH:  Default value for the 'hzn exchange -u' or 'hzn\n\t  register -u' flag, in the form '[org/]user:pw'. Notice that HZN_ORG_ID can be set\n\t  if org is omitted when HZN_EXCHANGE_USER_AUTH is set.\n  HZN_FSS_CSSURL:  Override the URL that the 'hzn mms' sub-commands use\n      to communicate with the Horizon Model Management Service, for example\n      https://exchange.bluehorizon.network/css/. (By default hzn will ask the\n      Horizon Agent for the URL.)\n  HZN_SDO_SVC_URL:  Override the URL that the 'hzn sdo' sub-commands use\n\t  to communicate with SDO owner services. (By default hzn will ask the\n\t\tHorizon Agent for the URL.)\n\n  All these environment variables and ones mentioned in the command help can be\n  specified in user's configuration file: ~/.hzn/hzn.json with JSON format.\n  For example:\n  {Com____}",
    "translation": "Command line interface for Horizon agent. Most of the sub-commands use the Horizon Agent API at the default location http://localhost (see environment Environment Variables section to override this).\n\nSubcommands Description:\n  agbot: List and manage Horizon agreement bot resources.\n  agreement: List or manage the agreements this edge node has made with a Horizon agreement bot.\n  architecture: Show the architecture of this machine. \n  attribute: List or manage the global attributes that are currently registered on this Horizon edge node.\n  deploycheck: Check deployment compatibility.\n  dev: Development tools for creation of services.\n  env: Show the Horizon Environment Variables.\n  eventlog: List the event logs for the current or all registrations.\n  exchange: List and manage Horizon Exchange resources.\n  key: List and manage keys for signing and verifying services. \n  mms: List and manage Horizon Model Management Service resources.\n  nmstatus: List and manage node management status for the local node.\n  node: List and manage general information about this Horizon edge node.\n  nodemanagement: List and manage manifests and agent files for node management.\n  policy: List and manage policy for this Horizon edge node. \n  reginput: Create an input file template for this pattern that can be used for the 'hzn register' command. \n  register: Register this edge node with the management hub.\n  secretsmanager: List and manage secrets in the secrets manager.\n  service: List or manage the services that are currently registered on this Horizon edge node.\n  status: Display the current horizon internal status for the node.\n  unregister: Unregister and reset this Horizon edge node.\n  userinput: List or manager the service user inputs that are currently registered on this Horizon edge node.\n  util: Utility commands.\n  version: Show the Horizon version.\n  sdo: List and manage Horizon SDO ownership vouchers and keys.\n\nEnvironment Variables:\n  HORIZON_URL:  Override the URL at which hzn contacts the Horizon Agent API.\n      This can facilitate using a remote Horizon Agent via an ssh tunnel.\n  HZN_EXCHANGE_URL:  Override the URL that the 'hzn exchange' sub-commands use\n      to communicate with the Horizon Exchange, for example\n      https://exchange.bluehorizon.network/api/v1. (By default hzn will ask the\n      Horizon Agent for the URL.)\n  HZN_ORG_ID:  Default value for the 'hzn exchange -o' flag,\n      to specify the organization ID'.\n  HZN_EXCHANGE_USER_AUTH:  Default value for the 'hzn exchange -u' or 'hzn\n\t  register -u' flag, in the form '[org/]user:pw'. Notice that HZN_ORG_ID can be set\n\t  if org is omitted when HZN_EXCHANGE_USER_AUTH is set.\n  HZN_FSS_CSSURL:  Override the URL that the 'hzn mms' sub-commands use\n      to communicate with the Horizon Model Management Service, for example\n      https://exchange.bluehorizon.network/css/. (By default hzn will ask the\n      Horizon Agent for the URL.)\n  HZN_SDO_SVC_URL:  Override the URL that the 'hzn sdo' sub-commands use\n\t  to communicate with SDO owner services. (By default hzn will ask the\n\t\tHorizon Agent for the URL.)\n\n  All these environment variables and ones mentioned in the command help can be\n  specified in user's configuration file: ~/.hzn/hzn.json with JSON format.\n  For example:\n  {Com____}"
  },
  {
    "id": "Verbose output.",
    "translation": "Verbose output."
  },
  {
    "id": "When calling the Horizon or Exchange API, do GETs, but don't do PUTs, POSTs, or DELETEs.",
    "translation": "When calling the Horizon or Exchange API, do GETs, but don't do PUTs, POSTs, or DELETEs."
  },
  {
    "id": "List and manage Horizon agreement bot resources.",
    "translation": "List and manage Horizon agreement bot resources."
  },
  {
    "id": "List or manage the active or archived agreements this Horizon agreement bot has with edge nodes.",
    "translation": "List or manage the active or archived agreements this Horizon agreement bot has with edge nodes."
  },
  {
    "id": "Cancel 1 or all of the active agreements this Horizon agreement bot has with edge nodes. Usually an agbot will immediately negotiated a new agreement.",
    "translation": "Cancel 1 or all of the active agreements this Horizon agreement bot has with edge nodes. Usually an agbot will immediately negotiated a new agreement."
  },
  {
    "id": "Cancel all of the current agreements.",
    "translation": "Cancel all of the current agreements."
  },
  {
    "id": "The active agreement to cancel.",
    "translation": "The active agreement to cancel."
  },
  {
    "id": "List the active or archived agreements this Horizon agreement bot has with edge nodes.",
    "translation": "List the active or archived agreements this Horizon agreement bot has with edge nodes."
  },
  {
    "id": "List archived agreements instead of the active agreements.",
    "translation": "List archived agreements instead of the active agreements."
  },
  {
    "id": "Show the details of this active or archived agreement.",
    "translation": "Show the details of this active or archived agreement."
  },
  {
    "id": "Manage cached agbot-serving organizations, patterns, and deployment policies.",
    "translation": "Manage cached agbot-serving organizations, patterns, and deployment policies."
  },
  {
    "id": "List served deployment policies cached in the agbot.",
    "translation": "List served deployment policies cached in the agbot."
  },
  {
    "id": "Display served deployment policies cached in the agbot.",
    "translation": "Display served deployment policies cached in the agbot."
  },
  {
    "id": "Display policies under this org.",
    "translation": "Display policies under this org."
  },
  {
    "id": "Display this policy.",
    "translation": "Display this policy."
  },
  {
    "id": "Display detailed info.",
    "translation": "Display detailed info."
  },
  {
    "id": "List patterns cached in the agbot.",
    "translation": "List patterns cached in the agbot."
  },
  {
    "id": "Display served patterns cached in the agbot.",
    "translation": "Display served patterns cached in the agbot."
  },
  {
    "id": "Display patterns under this org.",
    "translation": "Display patterns under this org."
  },
  {
    "id": "Display this pattern.",
    "translation": "Display this pattern."
  },
  {
    "id": "List served pattern orgs and deployment policy orgs.",
    "translation": "List served pattern orgs and deployment policy orgs."
  },
  {
    "id": "Display served pattern orgs and deployment policy orgs.",
    "translation": "Display served pattern orgs and deployment policy orgs."
  },
  {
    "id": "Display general information about this Horizon agbot node.",
    "translation": "Display general information about this Horizon agbot node."
  },
  {
    "id": "List the policies this Horizon agreement bot hosts.",
    "translation": "List the policies this Horizon agreement bot hosts."
  },
  {
    "id": "List policies this Horizon agreement bot hosts.",
    "translation": "List policies this Horizon agreement bot hosts."
  },
  {
    "id": "The organization the policy belongs to.",
    "translation": "The organization the policy belongs to."
  },
  {
    "id": "The policy name.",
    "translation": "The policy name."
  },
  {
    "id": "Display the current horizon internal status for the Horizon agreement bot.",
    "translation": "Display the current horizon internal status for the Horizon agreement bot."
  },
  {
    "id": "Show detailed status",
    "translation": "Show detailed status"
  },
  {
    "id": "List or manage the active or archived agreements this edge node has made with a Horizon agreement bot.",
    "translation": "List or manage the active or archived agreements this edge node has made with a Horizon agreement bot."
  },
  {
    "id": "List the active or archived agreements this edge node has made with a Horizon agreement bot.",
    "translation": "List the active or archived agreements this edge node has made with a Horizon agreement bot."
  },
  {
    "id": "Cancel 1 or all of the active agreements this edge node has made with a Horizon agreement bot. Usually an agbot will immediately negotiated a new agreement. If you want to cancel all agreements and not have this edge accept new agreements, run 'hzn unregister'.",
    "translation": "Cancel 1 or all of the active agreements this edge node has made with a Horizon agreement bot. Usually an agbot will immediately negotiated a new agreement. If you want to cancel all agreements and not have this edge accept new agreements, run 'hzn unregister'."
  },
  {
    "id": "Show the architecture of this machine (as defined by Horizon and golang).",
    "translation": "Show the architecture of this machine (as defined by Horizon and golang)."
  },
  {
    "id": "List or manage the global attributes that are currently registered on this Horizon edge node.",
    "translation": "List or manage the global attributes that are currently registered on this Horizon edge node."
  },
  {
    "id": "List the global attributes that are currently registered on this Horizon edge node.",
    "translation": "List the global attributes that are currently registered on this Horizon edge node."
  },
  {
    "id": "Check deployment compatibility.",
    "translation": "Check deployment compatibility."
  },
  {
    "id": "The Horizon exchange organization ID. If not specified, HZN_ORG_ID will be used as a default.",
    "translation": "The Horizon exchange organization ID. If not specified, HZN_ORG_ID will be used as a default."
  },
  {
    "id": "Horizon exchange user credential to query exchange resources. If not specified, HZN_EXCHANGE_USER_AUTH or HZN_EXCHANGE_NODE_AUTH will be used as a default. If you don't prepend it with the organization id, it will automatically be prepended with the -o value.",
    "translation": "Horizon exchange user credential to query exchange resources. If not specified, HZN_EXCHANGE_USER_AUTH or HZN_EXCHANGE_NODE_AUTH will be used as a default. If you don't prepend it with the organization id, it will automatically be prepended with the -o value."
  },
  {
    "id": "Show the compatibility status of all the service versions referenced in the deployment policy.",
    "translation": "Show the compatibility status of all the service versions referenced in the deployment policy."
  },
  {
    "id": "Show policies and userinput used for the compatibility checking.",
    "translation": "Show policies and userinput used for the compatibility checking."
  },
  {
    "id": "Check all compatibilities for a deployment.",
    "translation": "Check all compatibilities for a deployment."
  },
  {
    "id": "The architecture of the node. It is required when -n is not specified. If omitted, the service of all the architectures referenced in the deployment policy or pattern will be checked for compatibility.",
    "translation": "The architecture of the node. It is required when -n is not specified. If omitted, the service of all the architectures referenced in the deployment policy or pattern will be checked for compatibility."
  },
  {
    "id": "The node type. The valid values are 'device' and 'cluster'. The default value is the type of the node provided by -n or current registered device, if omitted.",
    "translation": "The node type. The valid values are 'device' and 'cluster'. The default value is the type of the node provided by -n or current registered device, if omitted."
  },
  {
    "id": "The organization of the node. The default value is the organization of the node provided by -n or current registered device, if omitted.",
    "translation": "The organization of the node. The default value is the organization of the node provided by -n or current registered device, if omitted."
  },
  {
    "id": "The Horizon exchange node ID. Mutually exclusive with --ha-group, --node-pol and --node-ui. If omitted, the node ID that the current device is registered with will be used. This flag can be repeated to specify more than one nodes. If you don't prepend a node id with the organization id, it will automatically be prepended with the -o value.",
    "translation": "The Horizon exchange node ID. Mutually exclusive with --ha-group, --node-pol and --node-ui. If omitted, the node ID that the current device is registered with will be used. This flag can be repeated to specify more than one nodes. If you don't prepend a node id with the organization id, it will automatically be prepended with the -o value."
  },
  {
    "id": "The name of an HA group. Mutually exclusive with -n, --node-pol and --node-ui.",
    "translation": "The name of an HA group. Mutually exclusive with -n, --node-pol and --node-ui."
  },
  {
    "id": "The JSON input file name containing the node policy. Mutually exclusive with -n, --ha-group, -p and -P.",
    "translation": "The JSON input file name containing the node policy. Mutually exclusive with -n, --ha-group, -p and -P."
  },
  {
    "id": "The JSON input file name containing the node user input. Mutually exclusive with -n, --ha-group.",
    "translation": "The JSON input file name containing the node user input. Mutually exclusive with -n, --ha-group."
  },
  {
    "id": "The Horizon exchange deployment policy ID. Mutually exclusive with -B, -p and -P. If you don't prepend it with the organization id, it will automatically be prepended with the node's organization id.",
    "translation": "The Horizon exchange deployment policy ID. Mutually exclusive with -B, -p and -P. If you don't prepend it with the organization id, it will automatically be prepended with the node's organization id."
  },
  {
    "id": "The JSON input file name containing the deployment policy. Mutually exclusive with -b, -p and -P.",
    "translation": "The JSON input file name containing the deployment policy. Mutually exclusive with -b, -p and -P."
  },
  {
    "id": "(optional) The JSON input file name containing the service policy. Mutually exclusive with -p and -P. If omitted, the service policy will be retrieved from the Exchange for the service defined in the deployment policy.",
    "translation": "(optional) The JSON input file name containing the service policy. Mutually exclusive with -p and -P. If omitted, the service policy will be retrieved from the Exchange for the service defined in the deployment policy."
  },
  {
    "id": "(optional) The JSON input file name containing the service definition. If omitted, the service defined in the deployment policy or pattern will be retrieved from the Exchange. This flag can be repeated to specify different versions of the service.",
    "translation": "(optional) The JSON input file name containing the service definition. If omitted, the service defined in the deployment policy or pattern will be retrieved from the Exchange. This flag can be repeated to specify different versions of the service."
  },
  {
    "id": "The Horizon exchange pattern ID. Mutually exclusive with -P, -b, -B --node-pol and --service-pol. If you don't prepend it with the organization id, it will automatically be prepended with the node's organization id.",
    "translation": "The Horizon exchange pattern ID. Mutually exclusive with -P, -b, -B --node-pol and --service-pol. If you don't prepend it with the organization id, it will automatically be prepended with the node's organization id."
  },
  {
    "id": "The JSON input file name containing the pattern. Mutually exclusive with -p, -b and -B, --node-pol and --service-pol.",
    "translation": "The JSON input file name containing the pattern. Mutually exclusive with -p, -b and -B, --node-pol and --service-pol."
  },
  {
    "id": "Check policy compatibility.",
    "translation": "Check policy compatibility."
  },
  {
    "id": "The architecture of the node. It is required when -n is not specified. If omitted, the service of all the architectures referenced in the deployment policy will be checked for compatibility.",
    "translation": "The architecture of the node. It is required when -n is not specified. If omitted, the service of all the architectures referenced in the deployment policy will be checked for compatibility."
  },
  {
    "id": "The Horizon exchange node ID. Mutually exclusive with --ha-group and --node-pol. If omitted, the node ID that the current device is registered with will be used. This flag can be repeated to specify more than one nodes. If you don't prepend a node id with the organization id, it will automatically be prepended with the -o value.",
    "translation": "The Horizon exchange node ID. Mutually exclusive with --ha-group and --node-pol. If omitted, the node ID that the current device is registered with will be used. This flag can be repeated to specify more than one nodes. If you don't prepend a node id with the organization id, it will automatically be prepended with the -o value."
  },
  {
    "id": "The name of an HA group. Mutually exclusive with -n and --node-pol.",
    "translation": "The name of an HA group. Mutually exclusive with -n and --node-pol."
  },
  {
    "id": "The JSON input file name containing the node policy. Mutually exclusive with -n, --ha-group.",
    "translation": "The JSON input file name containing the node policy. Mutually exclusive with -n, --ha-group."
  },
  {
    "id": "The Horizon exchange deployment policy ID. Mutually exclusive with -B. If you don't prepend it with the organization id, it will automatically be prepended with the node's organization id.",
    "translation": "The Horizon exchange deployment policy ID. Mutually exclusive with -B. If you don't prepend it with the organization id, it will automatically be prepended with the node's organization id."
  },
  {
    "id": "The JSON input file name containing the Deployment policy. Mutually exclusive with -b.",
    "translation": "The JSON input file name containing the Deployment policy. Mutually exclusive with -b."
  },
  {
    "id": "(optional) The JSON input file name containing the service policy. If omitted, the service policy will be retrieved from the Exchange for the service defined in the deployment policy.",
    "translation": "(optional) The JSON input file name containing the service policy. If omitted, the service policy will be retrieved from the Exchange for the service defined in the deployment policy."
  },
  {
    "id": "(optional) The JSON input file name containing the service definition. Mutually exclusive with -b. If omitted, the service referenced in the deployment policy is retrieved from the Exchange. This flag can be repeated to specify different versions of the service.",
    "translation": "(optional) The JSON input file name containing the service definition. Mutually exclusive with -b. If omitted, the service referenced in the deployment policy is retrieved from the Exchange. This flag can be repeated to specify different versions of the service."
  },
  {
    "id": "Check secret bindings.",
    "translation": "Check secret bindings."
  },
  {
    "id": "The Horizon exchange node ID. If omitted, the node ID that the current device is registered with will be used. If you don't prepend it with the organization id, it will automatically be prepended with the -o value.",
    "translation": "The Horizon exchange node ID. If omitted, the node ID that the current device is registered with will be used. If you don't prepend it with the organization id, it will automatically be prepended with the -o value."
  },
  {
    "id": "The Horizon exchange pattern ID. Mutually exclusive with -P, -b and -B. If you don't prepend it with the organization id, it will automatically be prepended with the node's organization id.",
    "translation": "The Horizon exchange pattern ID. Mutually exclusive with -P, -b and -B. If you don't prepend it with the organization id, it will automatically be prepended with the node's organization id."
  },
  {
    "id": "The JSON input file name containing the pattern. Mutually exclusive with -p, -b and -B.",
    "translation": "The JSON input file name containing the pattern. Mutually exclusive with -p, -b and -B."
  },
  {
    "id": "Check user input compatibility.",
    "translation": "Check user input compatibility."
  },
  {
    "id": "The Horizon exchange node ID. Mutually exclusive with --node-ui. If omitted, the node ID that the current device is registered with will be used. If you don't prepend it with the organization id, it will automatically be prepended with the -o value.",
    "translation": "The Horizon exchange node ID. Mutually exclusive with --node-ui. If omitted, the node ID that the current device is registered with will be used. If you don't prepend it with the organization id, it will automatically be prepended with the -o value."
  },
  {
    "id": "The JSON input file name containing the node user input. Mutually exclusive with -n.",
    "translation": "The JSON input file name containing the node user input. Mutually exclusive with -n."
  },
  {
    "id": "Development tools for creation of services.",
    "translation": "Development tools for creation of services."
  },
  {
    "id": "Directory containing Horizon project metadata. If omitted, a subdirectory called 'horizon' under current directory will be used.",
    "translation": "Directory containing Horizon project metadata. If omitted, a subdirectory called 'horizon' under current directory will be used."
  },
  {
    "id": "For working with project dependencies.",
    "translation": "For working with project dependencies."
  },
  {
    "id": "The URL of the service dependency in the Exchange. Mutually exclusive with -p and --url.",
    "translation": "The URL of the service dependency in the Exchange. Mutually exclusive with -p and --url."
  },
  {
    "id": "The URL of the service dependency in the Exchange. Mutually exclusive with -p and --specRef.",
    "translation": "The URL of the service dependency in the Exchange. Mutually exclusive with -p and --specRef."
  },
  {
    "id": "The Org of the service dependency in the Exchange. Mutually exclusive with -p.",
    "translation": "The Org of the service dependency in the Exchange. Mutually exclusive with -p."
  },
  {
    "id": "(optional) The Version of the service dependency in the Exchange. Mutually exclusive with -p.",
    "translation": "(optional) The Version of the service dependency in the Exchange. Mutually exclusive with -p."
  },
  {
    "id": "(optional) The hardware Architecture of the service dependency in the Exchange. Mutually exclusive with -p.",
    "translation": "(optional) The hardware Architecture of the service dependency in the Exchange. Mutually exclusive with -p."
  },
  {
    "id": "Retrieving Horizon metadata for a new dependency.",
    "translation": "Retrieving Horizon metadata for a new dependency."
  },
  {
    "id": "Horizon project containing the definition of a dependency. Mutually exclusive with -s -o --ver -a and --url.",
    "translation": "Horizon project containing the definition of a dependency. Mutually exclusive with -s -o --ver -a and --url."
  },
  {
    "id": "Horizon Exchange user credentials to query exchange resources. The default is HZN_EXCHANGE_USER_AUTH environment variable. If you don't prepend it with the user's org, it will automatically be prepended with the value of the HZN_ORG_ID environment variable.",
    "translation": "Horizon Exchange user credentials to query exchange resources. The default is HZN_EXCHANGE_USER_AUTH environment variable. If you don't prepend it with the user's org, it will automatically be prepended with the value of the HZN_ORG_ID environment variable."
  },
  {
    "id": "File containing user input values for configuring the new dependency. If omitted, the userinput file in the dependency project will be used.",
    "translation": "File containing user input values for configuring the new dependency. If omitted, the userinput file in the dependency project will be used."
  },
  {
    "id": "List all dependencies.",
    "translation": "List all dependencies."
  },
  {
    "id": "Remove a project dependency.",
    "translation": "Remove a project dependency."
  },
  {
    "id": "For working with a service project.",
    "translation": "For working with a service project."
  },
  {
    "id": "Show the container/system logs for a service.",
    "translation": "Show the container/system logs for a service."
  },
  {
    "id": "The name of the service whose log records should be displayed. The service name is the same as the url field of a service definition.",
    "translation": "The name of the service whose log records should be displayed. The service name is the same as the url field of a service definition."
  },
  {
    "id": "(DEPRECATED) This flag is deprecated and is replaced by -c.",
    "translation": "(DEPRECATED) This flag is deprecated and is replaced by -c."
  },
  {
    "id": "The name of the service container whose log records should be displayed. Can be omitted if the service definition has only one container in its deployment config.",
    "translation": "The name of the service container whose log records should be displayed. Can be omitted if the service definition has only one container in its deployment config."
  },
  {
    "id": "Continuously polls the service's logs to display the most recent records, similar to tail -F behavior.",
    "translation": "Continuously polls the service's logs to display the most recent records, similar to tail -F behavior."
  },
  {
    "id": "Create a new service project.",
    "translation": "Create a new service project."
  },
  {
    "id": "The Org id that the service is defined within. If this flag is omitted, the HZN_ORG_ID environment variable is used.",
    "translation": "The Org id that the service is defined within. If this flag is omitted, the HZN_ORG_ID environment variable is used."
  },
  {
    "id": "The name of the service. If this flag and the -i flag are omitted, only the skeletal horizon metadata files will be generated.",
    "translation": "The name of the service. If this flag and the -i flag are omitted, only the skeletal horizon metadata files will be generated."
  },
  {
    "id": "The version of the service. If this flag is omitted, '0.0.1' is used.",
    "translation": "The version of the service. If this flag is omitted, '0.0.1' is used."
  },
  {
    "id": "The docker container image base name without the version tag for the service. This command will add arch and version to the base name to form the final image name. The format is 'basename_arch:serviceversion'. This flag can be repeated to specify multiple images when '--noImageGen' flag is specified. This flag is ignored for the '--dconfig {KUBEDEPLOYMENTCONFIGTYPE}' deployment configuration.",
    "translation": "The docker container image base name without the version tag for the service. This command will add arch and version to the base name to form the final image name. The format is 'basename_arch:serviceversion'. This flag can be repeated to specify multiple images when '--noImageGen' flag is specified. This flag is ignored for the '--dconfig {KUBEDEPLOYMENTCONFIGTYPE}' deployment configuration."
  },
  {
    "id": "Indicates that the image is built somewhere else. No image sample code will be created by this command. If this flag is not specified, files for generating a simple service image will be created under current directory.",
    "translation": "Indicates that the image is built somewhere else. No image sample code will be created by this command. If this flag is not specified, files for generating a simple service image will be created under current directory."
  },
  {
    "id": "Indicates no pattern definition file will be created.",
    "translation": "Indicates no pattern definition file will be created."
  },
  {
    "id": "Indicate no policy file will be created.",
    "translation": "Indicate no policy file will be created."
  },
  {
    "id": "Indicates the type of deployment configuration that will be used, native (the default), or {KUBEDEPLOYMENTCONFIGTYPE}. This flag can be specified more than once to create a service with more than 1 kind of deployment configuration.",
    "translation": "Indicates the type of deployment configuration that will be used, native (the default), or {KUBEDEPLOYMENTCONFIGTYPE}. This flag can be specified more than once to create a service with more than 1 kind of deployment configuration."
  },
  {
    "id": "Run a service in a mocked Horizon Agent environment. This command is not supported for services using the {KUBEDEPLOYMENTCONFIGTYPE} deployment configuration.",
    "translation": "Run a service in a mocked Horizon Agent environment. This command is not supported for services using the {KUBEDEPLOYMENTCONFIGTYPE} deployment configuration."
  },
  {
    "id": "File containing user input values for running a test. If omitted, the userinput file for the project will be used.",
    "translation": "File containing user input values for running a test. If omitted, the userinput file for the project will be used."
  },
  {
    "id": "File to be made available through the sync service APIs. This flag can be repeated to populate multiple files.",
    "translation": "File to be made available through the sync service APIs. This flag can be repeated to populate multiple files."
  },
  {
    "id": "The type of file to be made available through the sync service APIs. All config files are presumed to be of the same type. This flag is required if any configFiles are specified.",
    "translation": "The type of file to be made available through the sync service APIs. All config files are presumed to be of the same type. This flag is required if any configFiles are specified."
  },
  {
    "id": "Do not bring up file sync service (FSS) containers. They are brought up by default.",
    "translation": "Do not bring up file sync service (FSS) containers. They are brought up by default."
  },
  {
    "id": "Horizon Exchange user credentials to query exchange resources. Specify it when you want to automatically fetch the missing dependent services from the Exchange. The default is HZN_EXCHANGE_USER_AUTH environment variable. If you don't prepend it with the user's org, it will automatically be prepended with the value of the HZN_ORG_ID environment variable.",
    "translation": "Horizon Exchange user credentials to query exchange resources. Specify it when you want to automatically fetch the missing dependent services from the Exchange. The default is HZN_EXCHANGE_USER_AUTH environment variable. If you don't prepend it with the user's org, it will automatically be prepended with the value of the HZN_ORG_ID environment variable."
  },
  {
    "id": "Filepath of a file containing a secret that is required by the service or one of its dependent services. The filename must match a secret name in the service definition. The file is encoded in JSON as an object containing two keys both typed as a string; \"key\" is used to indicate the kind of secret, and \"value\" is the string form of the secret. This flag can be repeated.",
    "translation": "Filepath of a file containing a secret that is required by the service or one of its dependent services. The filename must match a secret name in the service definition. The file is encoded in JSON as an object containing two keys both typed as a string; \"key\" is used to indicate the kind of secret, and \"value\" is the string form of the secret. This flag can be repeated."
  },
  {
    "id": "Stop a service that is running in a mocked Horizon Agent environment. This command is not supported for services using the {KUBEDEPLOYMENTCONFIGTYPE} deployment configuration.",
    "translation": "Stop a service that is running in a mocked Horizon Agent environment. This command is not supported for services using the {KUBEDEPLOYMENTCONFIGTYPE} deployment configuration."
  },
  {
    "id": "Validate the project for completeness and schema compliance.",
    "translation": "Validate the project for completeness and schema compliance."
  },
  {
    "id": "File containing user input values for verification of a project. If omitted, the userinput file for the project will be used.",
    "translation": "File containing user input values for verification of a project. If omitted, the userinput file for the project will be used."
  },
  {
    "id": "Show the Horizon Environment Variables.",
    "translation": "Show the Horizon Environment Variables."
  },
  {
    "id": "List the event logs for the current or all registrations.",
    "translation": "List the event logs for the current or all registrations."
  },
  {
    "id": "Continuously polls the event log to display the most recent records, similar to tail -F behavior.",
    "translation": "Continuously polls the event log to display the most recent records, similar to tail -F behavior."
  },
  {
    "id": "List all the event logs including the previous registrations.",
    "translation": "List all the event logs including the previous registrations."
  },
  {
    "id": "List event logs with details.",
    "translation": "List event logs with details."
  },
  {
    "id": "Selection string. This flag can be repeated which means 'AND'. Each flag should be in the format of attribute=value, attribute~value, \"attribute>value\" or \"attribute<value\", where '~' means contains. The common attribute names are timestamp, severity, message, event_code, source_type, agreement_id, service_url etc. Use the '-l' flag to see all the attribute names.",
    "translation": "Selection string. This flag can be repeated which means 'AND'. Each flag should be in the format of attribute=value, attribute~value, \"attribute>value\" or \"attribute<value\", where '~' means contains. The common attribute names are timestamp, severity, message, event_code, source_type, agreement_id, service_url etc. Use the '-l' flag to see all the attribute names."
  },
  {
    "id": "List all the active errors that will be shared with the Exchange if the node is online.",
    "translation": "List all the active errors that will be shared with the Exchange if the node is online."
  },
  {
    "id": "List the full event logs of the surface errors.",
    "translation": "List the full event logs of the surface errors."
  },
  {
    "id": "List and manage Horizon Exchange resources.",
    "translation": "List and manage Horizon Exchange resources."
  },
  {
    "id": "Horizon Exchange user credentials to query and create exchange resources. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default. If you don't prepend it with the user's org, it will automatically be prepended with the -o value. As an alternative to using -o, you can set HZN_ORG_ID with the Horizon exchange organization ID",
    "translation": "Horizon Exchange user credentials to query and create exchange resources. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default. If you don't prepend it with the user's org, it will automatically be prepended with the -o value. As an alternative to using -o, you can set HZN_ORG_ID with the Horizon exchange organization ID"
  },
  {
    "id": "List and manage agbots in the Horizon Exchange",
    "translation": "List and manage agbots in the Horizon Exchange"
  },
  {
    "id": "Add this deployment policy to the list of policies this agbot is serving. Currently only support adding all the deployment policies from an organization.",
    "translation": "Add this deployment policy to the list of policies this agbot is serving. Currently only support adding all the deployment policies from an organization."
  },
  {
    "id": "The agbot to add the deployment policy to.",
    "translation": "The agbot to add the deployment policy to."
  },
  {
    "id": "The organization of the deployment policy to add.",
    "translation": "The organization of the deployment policy to add."
  },
  {
    "id": "Add this pattern to the list of patterns this agbot is serving.",
    "translation": "Add this pattern to the list of patterns this agbot is serving."
  },
  {
    "id": "The agbot to add the pattern to.",
    "translation": "The agbot to add the pattern to."
  },
  {
    "id": "The organization of the pattern to add.",
    "translation": "The organization of the pattern to add."
  },
  {
    "id": "The name of the pattern to add.",
    "translation": "The name of the pattern to add."
  },
  {
    "id": "The organization of the nodes that should be searched. Defaults to patternorg.",
    "translation": "The organization of the nodes that should be searched. Defaults to patternorg."
  },
  {
    "id": "Display the agbot resources from the Horizon Exchange.",
    "translation": "Display the agbot resources from the Horizon Exchange."
  },
  {
    "id": "List just this one agbot.",
    "translation": "List just this one agbot."
  },
  {
    "id": "When listing all of the agbots, show the entire resource of each agbots, instead of just the name.",
    "translation": "When listing all of the agbots, show the entire resource of each agbots, instead of just the name."
  },
  {
    "id": "Display the deployment policies that this agbot is serving.",
    "translation": "Display the deployment policies that this agbot is serving."
  },
  {
    "id": "The agbot to list serving deployment policies for.",
    "translation": "The agbot to list serving deployment policies for."
  },
  {
    "id": "Display the patterns that this agbot is serving.",
    "translation": "Display the patterns that this agbot is serving."
  },
  {
    "id": "The agbot to list the patterns for.",
    "translation": "The agbot to list the patterns for."
  },
  {
    "id": "The organization of the 1 pattern to list.",
    "translation": "The organization of the 1 pattern to list."
  },
  {
    "id": "The name of the 1 pattern to list.",
    "translation": "The name of the 1 pattern to list."
  },
  {
    "id": "Remove this deployment policy from the list of policies this agbot is serving. Currently only support removing all the deployment policies from an organization.",
    "translation": "Remove this deployment policy from the list of policies this agbot is serving. Currently only support removing all the deployment policies from an organization."
  },
  {
    "id": "The agbot to remove the deployment policy from.",
    "translation": "The agbot to remove the deployment policy from."
  },
  {
    "id": "The organization of the deployment policy to remove.",
    "translation": "The organization of the deployment policy to remove."
  },
  {
    "id": "Remove this pattern from the list of patterns this agbot is serving.",
    "translation": "Remove this pattern from the list of patterns this agbot is serving."
  },
  {
    "id": "The agbot to remove the pattern from.",
    "translation": "The agbot to remove the pattern from."
  },
  {
    "id": "The organization of the pattern to remove.",
    "translation": "The organization of the pattern to remove."
  },
  {
    "id": "The name of the pattern to remove.",
    "translation": "The name of the pattern to remove."
  },
  {
    "id": "List all public services/patterns in all orgs that have orgType: IBM.",
    "translation": "List all public services/patterns in all orgs that have orgType: IBM."
  },
  {
    "id": "Display all public patterns in all orgs that have orgType: IBM.",
    "translation": "Display all public patterns in all orgs that have orgType: IBM."
  },
  {
    "id": "Only display org (IBM) and pattern names.",
    "translation": "Only display org (IBM) and pattern names."
  },
  {
    "id": "Display detailed output about public patterns in all orgs that have orgType: IBM.",
    "translation": "Display detailed output about public patterns in all orgs that have orgType: IBM."
  },
  {
    "id": "Display all public services in all orgs that have orgType: IBM.",
    "translation": "Display all public services in all orgs that have orgType: IBM."
  },
  {
    "id": "Only display org (IBM) and service names.",
    "translation": "Only display org (IBM) and service names."
  },
  {
    "id": "Display detailed output about public services in all orgs that have orgType: IBM.",
    "translation": "Display detailed output about public services in all orgs that have orgType: IBM."
  },
  {
    "id": "List and manage deployment policies in the Horizon Exchange.",
    "translation": "List and manage deployment policies in the Horizon Exchange."
  },
  {
    "id": "Add or replace a deployment policy in the Horizon Exchange. Use 'hzn exchange deployment new' for an empty deployment policy template.",
    "translation": "Add or replace a deployment policy in the Horizon Exchange. Use 'hzn exchange deployment new' for an empty deployment policy template."
  },
  {
    "id": "The Horizon ID and password of the user.",
    "translation": "The Horizon ID and password of the user."
  },
  {
    "id": "The name of the deployment policy to add or overwrite.",
    "translation": "The name of the deployment policy to add or overwrite."
  },
  {
    "id": "The path of a JSON file containing the metadata necessary to create/update the service policy in the Horizon Exchange. Specify -f- to read from stdin.",
    "translation": "The path of a JSON file containing the metadata necessary to create/update the service policy in the Horizon Exchange. Specify -f- to read from stdin."
  },
  {
    "id": "Allow this deployment policy to be published even though it does not have any constraints.",
    "translation": "Allow this deployment policy to be published even though it does not have any constraints."
  },
  {
    "id": "Display the deployment policies from the Horizon Exchange.",
    "translation": "Display the deployment policies from the Horizon Exchange."
  },
  {
    "id": "Display detailed output about the deployment policies.",
    "translation": "Display detailed output about the deployment policies."
  },
  {
    "id": "List just this one deployment policy. Use <org>/<policy> to specify a public policy in another org, or <org>/ to list all of the public policies in another org.",
    "translation": "List just this one deployment policy. Use <org>/<policy> to specify a public policy in another org, or <org>/ to list all of the public policies in another org."
  },
  {
    "id": "Display an empty deployment policy template that can be filled in.",
    "translation": "Display an empty deployment policy template that can be filled in."
  },
  {
    "id": "Remove the deployment policy in the Horizon Exchange.",
    "translation": "Remove the deployment policy in the Horizon Exchange."
  },
  {
    "id": "Skip the 'are you sure?' prompt.",
    "translation": "Skip the 'are you sure?' prompt."
  },
  {
    "id": "The name of the deployment policy to be removed.",
    "translation": "The name of the deployment policy to be removed."
  },
  {
    "id": "Update one attribute of an existing deployment policy in the Horizon Exchange. The supported attributes are the top level attributes in the policy definition as shown by the command 'hzn exchange deployment new'.",
    "translation": "Update one attribute of an existing deployment policy in the Horizon Exchange. The supported attributes are the top level attributes in the policy definition as shown by the command 'hzn exchange deployment new'."
  },
  {
    "id": "The name of the policy to be updated in the Horizon Exchange.",
    "translation": "The name of the policy to be updated in the Horizon Exchange."
  },
  {
    "id": "The path to the json file containing the updated deployment policy attribute to be changed in the Horizon Exchange. Specify -f- to read from stdin.",
    "translation": "The path to the json file containing the updated deployment policy attribute to be changed in the Horizon Exchange. Specify -f- to read from stdin."
  },
  {
    "id": "List and manage node management policies in the Horizon Exchange.",
    "translation": "List and manage node management policies in the Horizon Exchange."
  },
  {
    "id": "Display the node management policies from the Horizon Exchange.",
    "translation": "Display the node management policies from the Horizon Exchange."
  },
  {
    "id": "List just this one node management policy.",
    "translation": "List just this one node management policy."
  },
  {
    "id": "The Horizon Exchange node ID and token to be used as credentials to query and modify the node resources if -u flag is not specified. HZN_EXCHANGE_NODE_AUTH will be used as a default for -n. If you don't prepend it with the node's org, it will automatically be prepended with the -o value.",
    "translation": "The Horizon Exchange node ID and token to be used as credentials to query and modify the node resources if -u flag is not specified. HZN_EXCHANGE_NODE_AUTH will be used as a default for -n. If you don't prepend it with the node's org, it will automatically be prepended with the -o value."
  },
  {
    "id": "Display detailed output about the node management policies.",
    "translation": "Display detailed output about the node management policies."
  },
  {
    "id": "List all the nodes that apply for the given node management policy.",
    "translation": "List all the nodes that apply for the given node management policy."
  },
  {
    "id": "Add or replace a node management policy in the Horizon Exchange. Use 'hzn exchange nmp new' for an empty node management policy template.",
    "translation": "Add or replace a node management policy in the Horizon Exchange. Use 'hzn exchange nmp new' for an empty node management policy template."
  },
  {
    "id": "List all the nodes that will be compatible with this node management policy. Use this flag with --dry-run to list nodes without publishing the policy to the Exchange.",
    "translation": "List all the nodes that will be compatible with this node management policy. Use this flag with --dry-run to list nodes without publishing the policy to the Exchange."
  },
  {
    "id": "The name of the node management policy to add or overwrite.",
    "translation": "The name of the node management policy to add or overwrite."
  },
  {
    "id": "The path of a JSON file containing the metadata necessary to create/update the node management policy in the Horizon Exchange. Specify -f- to read from stdin.",
    "translation": "The path of a JSON file containing the metadata necessary to create/update the node management policy in the Horizon Exchange. Specify -f- to read from stdin."
  },
  {
    "id": "Allow this node management policy to be published even though it does not have any constraints.",
    "translation": "Allow this node management policy to be published even though it does not have any constraints."
  },
  {
    "id": "Display an empty node management policy template that can be filled in.",
    "translation": "Display an empty node management policy template that can be filled in."
  },
  {
    "id": "Remove the node management policy in the Horizon Exchange.",
    "translation": "Remove the node management policy in the Horizon Exchange."
  },
  {
    "id": "The name of the node management policy to be removed.",
    "translation": "The name of the node management policy to be removed."
  },
  {
    "id": "List the status of a given node management policy across all nodes in given org.",
    "translation": "List the status of a given node management policy across all nodes in given org."
  },
  {
    "id": "The name of the node management policy status to check.",
    "translation": "The name of the node management policy status to check."
  },
  {
    "id": "Filter output to include just this one node. Use with --long flag to display entire content of a single node management policy status object.",
    "translation": "Filter output to include just this one node. Use with --long flag to display entire content of a single node management policy status object."
  },
  {
    "id": "Show the entire contents of each node management policy status object.",
    "translation": "Show the entire contents of each node management policy status object."
  },
  {
    "id": "Enable a node management policy in the Horizon Exchange.",
    "translation": "Enable a node management policy in the Horizon Exchange."
  },
  {
    "id": "The name of the node management policy to enable.",
    "translation": "The name of the node management policy to enable."
  },
  {
    "id": "The start time of the enabled node management policy. Start time should be RFC3339 timestamp or \"now\"",
    "translation": "The start time of the enabled node management policy. Start time should be RFC3339 timestamp or \"now\""
  },
  {
    "id": "The start window of the enabled node management policy.",
    "translation": "The start window of the enabled node management policy."
  },
  {
    "id": "Disable a node management policy in the Horizon Exchange.",
    "translation": "Disable a node management policy in the Horizon Exchange."
  },
  {
    "id": "The name of the node management policy to disable.",
    "translation": "The name of the node management policy to disable."
  },
  {
    "id": "List and manage nodes in the Horizon Exchange",
    "translation": "List and manage nodes in the Horizon Exchange"
  },
  {
    "id": "Add or replace the node policy in the Horizon Exchange.",
    "translation": "Add or replace the node policy in the Horizon Exchange."
  },
  {
    "id": "Add or replace policy for this node.",
    "translation": "Add or replace policy for this node."
  },
  {
    "id": "The path of a JSON file containing the metadata necessary to create/update the node policy in the Horizon exchange. Specify -f- to read from stdin. A node policy contains the 'deployment' and 'management' attributes. Please use 'hzn policy new' to see the node policy format.",
    "translation": "The path of a JSON file containing the metadata necessary to create/update the node policy in the Horizon exchange. Specify -f- to read from stdin. A node policy contains the 'deployment' and 'management' attributes. Please use 'hzn policy new' to see the node policy format."
  },
  {
    "id": "Create the node resource in the Horizon Exchange.",
    "translation": "Create the node resource in the Horizon Exchange."
  },
  {
    "id": "The Horizon Exchange node ID and token to be created. The node ID must be unique within the organization.",
    "translation": "The Horizon Exchange node ID and token to be created. The node ID must be unique within the organization."
  },
  {
    "id": "Your node architecture. If not specified, architecture will be left blank.",
    "translation": "Your node architecture. If not specified, architecture will be left blank."
  },
  {
    "id": "The name of your node",
    "translation": "The name of your node"
  },
  {
    "id": "The type of your node. The valid values are: device, cluster. If omitted, the default is device. However, the node type stays unchanged if the node already exists, only the node token will be updated.",
    "translation": "The type of your node. The valid values are: device, cluster. If omitted, the default is device. However, the node type stays unchanged if the node already exists, only the node token will be updated."
  },
  {
    "id": "The node to be created.",
    "translation": "The node to be created."
  },
  {
    "id": "The token the new node should have.",
    "translation": "The token the new node should have."
  },
  {
    "id": "Check to see if the specified node and token are valid in the Horizon Exchange.",
    "translation": "Check to see if the specified node and token are valid in the Horizon Exchange."
  },
  {
    "id": "The Horizon exchange node ID and token to be checked. If not specified, HZN_EXCHANGE_NODE_AUTH will be used as a default. Mutually exclusive with <node> and <token> arguments.",
    "translation": "The Horizon exchange node ID and token to be checked. If not specified, HZN_EXCHANGE_NODE_AUTH will be used as a default. Mutually exclusive with <node> and <token> arguments."
  },
  {
    "id": "The node id to be checked. Mutually exclusive with -n flag.",
    "translation": "The node id to be checked. Mutually exclusive with -n flag."
  },
  {
    "id": "The token for the node. Mutually exclusive with -n flag.",
    "translation": "The token for the node. Mutually exclusive with -n flag."
  },
  {
    "id": "Display the node resources from the Horizon Exchange.",
    "translation": "Display the node resources from the Horizon Exchange."
  },
  {
    "id": "List just this one node.",
    "translation": "List just this one node."
  },
  {
    "id": "When listing all of the nodes, show the entire resource of each node, instead of just the name.",
    "translation": "When listing all of the nodes, show the entire resource of each node, instead of just the name."
  },
  {
    "id": "List the node errors currently surfaced to the Exchange.",
    "translation": "List the node errors currently surfaced to the Exchange."
  },
  {
    "id": "List surfaced errors for this node.",
    "translation": "List surfaced errors for this node."
  },
  {
    "id": "Show the full eventlog object of the errors currently surfaced to the Exchange.",
    "translation": "Show the full eventlog object of the errors currently surfaced to the Exchange."
  },
  {
    "id": "Display the node policy from the Horizon Exchange.",
    "translation": "Display the node policy from the Horizon Exchange."
  },
  {
    "id": "List policy for this node.",
    "translation": "List policy for this node."
  },
  {
    "id": "List and manage node management resources in the Horizon Exchange",
    "translation": "List and manage node management resources in the Horizon Exchange"
  },
  {
    "id": "List the compatible node management policies for the node. Only policies that are enabled will be displayed unless the -a flag is specified.",
    "translation": "List the compatible node management policies for the node. Only policies that are enabled will be displayed unless the -a flag is specified."
  },
  {
    "id": "List node management policies for this node",
    "translation": "List node management policies for this node"
  },
  {
    "id": "The Horizon Exchange node ID and token to be used as credentials to query and modfy the node resources if -u flag is not specified. HZN_EXCHANGE_NODE_AUTH will be used as a default for -n. If you don't prepend it with the node's org, it will automatically be prepended with the -o value.",
    "translation": "The Horizon Exchange node ID and token to be used as credentials to query and modfy the node resources if -u flag is not specified. HZN_EXCHANGE_NODE_AUTH will be used as a default for -n. If you don't prepend it with the node's org, it will automatically be prepended with the -o value."
  },
  {
    "id": "Include disabled NMP's.",
    "translation": "Include disabled NMP's."
  },
  {
    "id": "List the node management policy statuses for this node.",
    "translation": "List the node management policy statuses for this node."
  },
  {
    "id": "List node management policy statuses for this node.",
    "translation": "List node management policy statuses for this node."
  },
  {
    "id": "Filter output to include just this one node managment policy. Use with --long flag to display entire content of a single node management policy status object.",
    "translation": "Filter output to include just this one node managment policy. Use with --long flag to display entire content of a single node management policy status object."
  },
  {
    "id": "Re-evaluate the node management policy (nmp) for this node. Run this command to retry a nmp when the upgrade failed and the problem is fixed. Do not run this command when the node is still in the middle of an upgrade.",
    "translation": "Re-evaluate the node management policy (nmp) for this node. Run this command to retry a nmp when the upgrade failed and the problem is fixed. Do not run this command when the node is still in the middle of an upgrade."
  },
  {
    "id": "Re-evaluate node management policy for this node.",
    "translation": "Re-evaluate node management policy for this node."
  },
  {
    "id": "The name of the node managment policy to be re-evaluated. If omitted, all of the node management policies will be re-evaluated for this node.",
    "translation": "The name of the node managment policy to be re-evaluated. If omitted, all of the node management policies will be re-evaluated for this node."
  },
  {
    "id": "List the run-time status of the node.",
    "translation": "List the run-time status of the node."
  },
  {
    "id": "List status for this node",
    "translation": "List status for this node"
  },
  {
    "id": "Remove a node resource from the Horizon Exchange. Do NOT do this when an edge node is registered with this node id.",
    "translation": "Remove a node resource from the Horizon Exchange. Do NOT do this when an edge node is registered with this node id."
  },
  {
    "id": "The node to remove.",
    "translation": "The node to remove."
  },
  {
    "id": "Remove the node policy in the Horizon Exchange.",
    "translation": "Remove the node policy in the Horizon Exchange."
  },
  {
    "id": "Remove policy for this node.",
    "translation": "Remove policy for this node."
  },
  {
    "id": "Change the token of a node resource in the Horizon Exchange.",
    "translation": "Change the token of a node resource in the Horizon Exchange."
  },
  {
    "id": "The node to be changed.",
    "translation": "The node to be changed."
  },
  {
    "id": "The new token for the node.",
    "translation": "The new token for the node."
  },
  {
    "id": "Update an attribute of the node in the Horizon Exchange.",
    "translation": "Update an attribute of the node in the Horizon Exchange."
  },
  {
    "id": "The node to be updated.",
    "translation": "The node to be updated."
  },
  {
    "id": "The path to a json file containing the changed attribute to be updated in the Horizon Exchange. Specify -f- to read from stdin.",
    "translation": "The path to a json file containing the changed attribute to be updated in the Horizon Exchange. Specify -f- to read from stdin."
  },
  {
    "id": "(DEPRECATED) This command is deprecated. Please use 'hzn exchange node addpolicy' to update the node policy. This command is used to update either the node policy properties or the constraints, but not both.",
    "translation": "(DEPRECATED) This command is deprecated. Please use 'hzn exchange node addpolicy' to update the node policy. This command is used to update either the node policy properties or the constraints, but not both."
  },
  {
    "id": "Update the policy for this node.",
    "translation": "Update the policy for this node."
  },
  {
    "id": "The path of a JSON file containing the new constraints or properties (not both) for the node policy in the Horizon Exchange. Specify -f- to read from stdin.",
    "translation": "The path of a JSON file containing the new constraints or properties (not both) for the node policy in the Horizon Exchange. Specify -f- to read from stdin."
  },
  {
    "id": "List and manage organizations in the Horizon Exchange.",
    "translation": "List and manage organizations in the Horizon Exchange."
  },
  {
    "id": "Create the organization resource in the Horizon Exchange.",
    "translation": "Create the organization resource in the Horizon Exchange."
  },
  {
    "id": "Create this organization and assign it to an agbot.",
    "translation": "Create this organization and assign it to an agbot."
  },
  {
    "id": "Label for new organization.",
    "translation": "Label for new organization."
  },
  {
    "id": "Description for new organization.",
    "translation": "Description for new organization."
  },
  {
    "id": "Tag for new organization. The format is mytag1=myvalue1. This flag can be repeated to specify multiple tags.",
    "translation": "Tag for new organization. The format is mytag1=myvalue1. This flag can be repeated to specify multiple tags."
  },
  {
    "id": "The minimum number of seconds between agent heartbeats to the Exchange.",
    "translation": "The minimum number of seconds between agent heartbeats to the Exchange."
  },
  {
    "id": "The maximum number of seconds between agent heartbeats to the Exchange. During periods of inactivity, the agent will increase the interval between heartbeats by increments of --heartbeatadjust.",
    "translation": "The maximum number of seconds between agent heartbeats to the Exchange. During periods of inactivity, the agent will increase the interval between heartbeats by increments of --heartbeatadjust."
  },
  {
    "id": "The number of seconds to increment the agent's heartbeat interval.",
    "translation": "The number of seconds to increment the agent's heartbeat interval."
  },
  {
    "id": "The maximum number of nodes this organization is allowed to have. The value cannot exceed the Exchange global limit. The default is 0 which means no organization limit.",
    "translation": "The maximum number of nodes this organization is allowed to have. The value cannot exceed the Exchange global limit. The default is 0 which means no organization limit."
  },
  {
    "id": "Add the organization to this agbot so that it will be responsible for deploying services in this org. The agbot will deploy services to nodes in this org, using the patterns and deployment policies in this org. If omitted, the first agbot found in the exchange will become responsible for this org. The format is 'agbot_org/agbot_id'.",
    "translation": "Add the organization to this agbot so that it will be responsible for deploying services in this org. The agbot will deploy services to nodes in this org, using the patterns and deployment policies in this org. If omitted, the first agbot found in the exchange will become responsible for this org. The format is 'agbot_org/agbot_id'."
  },
  {
    "id": "Display the organization resource from the Horizon Exchange. (Normally you can only display your own organiztion. If the org does not exist, you will get an invalid credentials error.)",
    "translation": "Display the organization resource from the Horizon Exchange. (Normally you can only display your own organiztion. If the org does not exist, you will get an invalid credentials error.)"
  },
  {
    "id": "List this one organization.",
    "translation": "List this one organization."
  },
  {
    "id": "Display detailed info of orgs",
    "translation": "Display detailed info of orgs"
  },
  {
    "id": "Remove an organization resource from the Horizon Exchange.",
    "translation": "Remove an organization resource from the Horizon Exchange."
  },
  {
    "id": "Remove this organization.",
    "translation": "Remove this organization."
  },
  {
    "id": "The agbot to remove the deployment policy from. If omitted, the first agbot found in the exchange will be used. The format is 'agbot_org/agbot_id'.",
    "translation": "The agbot to remove the deployment policy from. If omitted, the first agbot found in the exchange will be used. The format is 'agbot_org/agbot_id'."
  },
  {
    "id": "Update the organization resource in the Horizon Exchange.",
    "translation": "Update the organization resource in the Horizon Exchange."
  },
  {
    "id": "Update this organization.",
    "translation": "Update this organization."
  },
  {
    "id": "New label for organization.",
    "translation": "New label for organization."
  },
  {
    "id": "New description for organization.",
    "translation": "New description for organization."
  },
  {
    "id": "New tag for organization. The format is mytag1=myvalue1. This flag can be repeated to specify multiple tags. Use '-t \"\"' once to remove all the tags.",
    "translation": "New tag for organization. The format is mytag1=myvalue1. This flag can be repeated to specify multiple tags. Use '-t \"\"' once to remove all the tags."
  },
  {
    "id": "New minimum number of seconds the between agent heartbeats to the Exchange. The default negative integer -1 means no change to this attribute.",
    "translation": "New minimum number of seconds the between agent heartbeats to the Exchange. The default negative integer -1 means no change to this attribute."
  },
  {
    "id": "New maximum number of seconds between agent heartbeats to the Exchange. The default negative integer -1 means no change to this attribute.",
    "translation": "New maximum number of seconds between agent heartbeats to the Exchange. The default negative integer -1 means no change to this attribute."
  },
  {
    "id": "New value for the number of seconds to increment the agent's heartbeat interval. The default negative integer -1 means no change to this attribute.",
    "translation": "New value for the number of seconds to increment the agent's heartbeat interval. The default negative integer -1 means no change to this attribute."
  },
  {
    "id": "The new maximum number of nodes this organization is allowed to have. The value cannot exceed the Exchange global limit. The default negative integer -1 means no change.",
    "translation": "The new maximum number of nodes this organization is allowed to have. The value cannot exceed the Exchange global limit. The default negative integer -1 means no change."
  },
  {
    "id": "List and manage patterns in the Horizon Exchange",
    "translation": "List and manage patterns in the Horizon Exchange"
  },
  {
    "id": "Display the pattern resources from the Horizon Exchange.",
    "translation": "Display the pattern resources from the Horizon Exchange."
  },
  {
    "id": "List just this one pattern. Use <org>/<pat> to specify a public pattern in another org, or <org>/ to list all of the public patterns in another org.",
    "translation": "List just this one pattern. Use <org>/<pat> to specify a public pattern in another org, or <org>/ to list all of the public patterns in another org."
  },
  {
    "id": "When listing all of the patterns, show the entire resource of each pattern, instead of just the name.",
    "translation": "When listing all of the patterns, show the entire resource of each pattern, instead of just the name."
  },
  {
    "id": "List the signing public keys/certs for this pattern resource in the Horizon Exchange.",
    "translation": "List the signing public keys/certs for this pattern resource in the Horizon Exchange."
  },
  {
    "id": "The existing pattern to list the keys for.",
    "translation": "The existing pattern to list the keys for."
  },
  {
    "id": "The existing key name to see the contents of.",
    "translation": "The existing key name to see the contents of."
  },
  {
    "id": "Sign and create/update the pattern resource in the Horizon Exchange.",
    "translation": "Sign and create/update the pattern resource in the Horizon Exchange."
  },
  {
    "id": "The path of a JSON file containing the metadata necessary to create/update the pattern in the Horizon exchange. See {Sampledir}/pattern.json. Specify -f- to read from stdin.",
    "translation": "The path of a JSON file containing the metadata necessary to create/update the pattern in the Horizon exchange. See {Sampledir}/pattern.json. Specify -f- to read from stdin."
  },
  {
    "id": "The path of a private key file to be used to sign the pattern. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used. If HZN_PRIVATE_KEY_FILE not specified, ~/.hzn/keys/service.private.key will be used. If none are specified, a random key pair will be generated and the public key will be stored with the pattern.",
    "translation": "The path of a private key file to be used to sign the pattern. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used. If HZN_PRIVATE_KEY_FILE not specified, ~/.hzn/keys/service.private.key will be used. If none are specified, a random key pair will be generated and the public key will be stored with the pattern."
  },
  {
    "id": "(DEPRECATED) The path of public key file (that corresponds to the private key) that should be stored with the pattern, to be used by the Horizon Agent to verify the signature. If this flag is not specified, the public key will be calculated from the private key.",
    "translation": "(DEPRECATED) The path of public key file (that corresponds to the private key) that should be stored with the pattern, to be used by the Horizon Agent to verify the signature. If this flag is not specified, the public key will be calculated from the private key."
  },
  {
    "id": "The name to use for this pattern in the Horizon exchange. If not specified, will default to the base name of the file path specified in -f.",
    "translation": "The name to use for this pattern in the Horizon exchange. If not specified, will default to the base name of the file path specified in -f."
  },
  {
    "id": "Remove a pattern resource from the Horizon Exchange.",
    "translation": "Remove a pattern resource from the Horizon Exchange."
  },
  {
    "id": "The pattern to remove.",
    "translation": "The pattern to remove."
  },
  {
    "id": "Remove a signing public key/cert for this pattern resource in the Horizon Exchange.",
    "translation": "Remove a signing public key/cert for this pattern resource in the Horizon Exchange."
  },
  {
    "id": "The existing pattern to remove the key from.",
    "translation": "The existing pattern to remove the key from."
  },
  {
    "id": "The existing key name to remove.",
    "translation": "The existing key name to remove."
  },
  {
    "id": "Update an attribute of the pattern in the Horizon Exchange.",
    "translation": "Update an attribute of the pattern in the Horizon Exchange."
  },
  {
    "id": "The name of the pattern in the Horizon Exchange to publish.",
    "translation": "The name of the pattern in the Horizon Exchange to publish."
  },
  {
    "id": "The path to a json file containing the updated attribute of the pattern to be put in the Horizon Exchange. Specify -f- to read from stdin.",
    "translation": "The path to a json file containing the updated attribute of the pattern to be put in the Horizon Exchange. Specify -f- to read from stdin."
  },
  {
    "id": "Verify the signatures of a pattern resource in the Horizon Exchange.",
    "translation": "Verify the signatures of a pattern resource in the Horizon Exchange."
  },
  {
    "id": "The pattern to verify.",
    "translation": "The pattern to verify."
  },
  {
    "id": "The path of a pem public key file to be used to verify the pattern. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default.",
    "translation": "The path of a pem public key file to be used to verify the pattern. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default."
  },
  {
    "id": "List and manage services in the Horizon Exchange",
    "translation": "List and manage services in the Horizon Exchange"
  },
  {
    "id": "Add or replace the service policy in the Horizon Exchange.",
    "translation": "Add or replace the service policy in the Horizon Exchange."
  },
  {
    "id": "The Horizon Exchange ID and password of the user",
    "translation": "The Horizon Exchange ID and password of the user"
  },
  {
    "id": "Add or replace policy for this service.",
    "translation": "Add or replace policy for this service."
  },
  {
    "id": "Display the service resources from the Horizon Exchange.",
    "translation": "Display the service resources from the Horizon Exchange."
  },
  {
    "id": "List just this one service. Use <org>/<svc> to specify a public service in another org, or <org>/ to list all of the public services in another org.",
    "translation": "List just this one service. Use <org>/<svc> to specify a public service in another org, or <org>/ to list all of the public services in another org."
  },
  {
    "id": "When listing all of the services, show the entire service definition, instead of just the name. When listing a specific service, show more details.",
    "translation": "When listing all of the services, show the entire service definition, instead of just the name. When listing a specific service, show more details."
  },
  {
    "id": "The name of the file where the cluster deployment operator yaml archive will be saved. This flag is only used when listing a specific service. This flag is ignored when the service does not have a clusterDeployment attribute.",
    "translation": "The name of the file where the cluster deployment operator yaml archive will be saved. This flag is only used when listing a specific service. This flag is ignored when the service does not have a clusterDeployment attribute."
  },
  {
    "id": "Skip the 'do you want to overwrite?' prompt when -f is specified and the file exists.",
    "translation": "Skip the 'do you want to overwrite?' prompt when -f is specified and the file exists."
  },
  {
    "id": "List the docker auth tokens for this service resource in the Horizon Exchange.",
    "translation": "List the docker auth tokens for this service resource in the Horizon Exchange."
  },
  {
    "id": "The existing service to list the docker auths for.",
    "translation": "The existing service to list the docker auths for."
  },
  {
    "id": "The existing docker auth id to see the contents of.",
    "translation": "The existing docker auth id to see the contents of."
  },
  {
    "id": "List the signing public keys/certs for this service resource in the Horizon Exchange.",
    "translation": "List the signing public keys/certs for this service resource in the Horizon Exchange."
  },
  {
    "id": "The existing service to list the keys for.",
    "translation": "The existing service to list the keys for."
  },
  {
    "id": "Display the nodes that the service is running on.",
    "translation": "Display the nodes that the service is running on."
  },
  {
    "id": "The service id. Use <org>/<svc> to specify a service from a different org.",
    "translation": "The service id. Use <org>/<svc> to specify a service from a different org."
  },
  {
    "id": "The node's organization. If omitted, it will be same as the org specified by -o or HZN_ORG_ID.",
    "translation": "The node's organization. If omitted, it will be same as the org specified by -o or HZN_ORG_ID."
  },
  {
    "id": "Display the service policy from the Horizon Exchange.",
    "translation": "Display the service policy from the Horizon Exchange."
  },
  {
    "id": "The Horizon Exchange id and password of the user",
    "translation": "The Horizon Exchange id and password of the user"
  },
  {
    "id": "List policy for this service.",
    "translation": "List policy for this service."
  },
  {
    "id": "Display an empty service policy template that can be filled in.",
    "translation": "Display an empty service policy template that can be filled in."
  },
  {
    "id": "Sign and create/update the service resource in the Horizon Exchange.",
    "translation": "Sign and create/update the service resource in the Horizon Exchange."
  },
  {
    "id": "The path of a JSON file containing the metadata necessary to create/update the service in the Horizon exchange. See {Sampledir}/service.json and {Sampledir_1}/service_cluster.json. Specify -f- to read from stdin.",
    "translation": "The path of a JSON file containing the metadata necessary to create/update the service in the Horizon exchange. See {Sampledir}/service.json and {Sampledir_1}/service_cluster.json. Specify -f- to read from stdin."
  },
  {
    "id": "The path of a private key file to be used to sign the service. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used. If HZN_PRIVATE_KEY_FILE not specified, ~/.hzn/keys/service.private.key will be used. If none are specified, a random key pair will be generated and the public key will be stored with the service.",
    "translation": "The path of a private key file to be used to sign the service. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used. If HZN_PRIVATE_KEY_FILE not specified, ~/.hzn/keys/service.private.key will be used. If none are specified, a random key pair will be generated and the public key will be stored with the service."
  },
  {
    "id": "(DEPRECATED) The path of public key file (that corresponds to the private key) that should be stored with the service, to be used by the Horizon Agent to verify the signature. If this flag is not specified, the public key will be calculated from the private key.",
    "translation": "(DEPRECATED) The path of public key file (that corresponds to the private key) that should be stored with the service, to be used by the Horizon Agent to verify the signature. If this flag is not specified, the public key will be calculated from the private key."
  },
  {
    "id": "The image paths in the deployment field have regular tags and should not be changed to sha256 digest values. The image will not get automatically uploaded to the repository. This should only be used during development when testing new versions often.",
    "translation": "The image paths in the deployment field have regular tags and should not be changed to sha256 digest values. The image will not get automatically uploaded to the repository. This should only be used during development when testing new versions often."
  },
  {
    "id": "Use the image from the image repository. It will pull the image from the image repository and overwrite the local image if exists. This flag is mutually exclusive with -I.",
    "translation": "Use the image from the image repository. It will pull the image from the image repository and overwrite the local image if exists. This flag is mutually exclusive with -I."
  },
  {
    "id": "Docker registry domain and auth that should be stored with the service, to enable the Horizon edge node to access the service's docker images. This flag can be repeated, and each flag should be in the format: registry:user:token",
    "translation": "Docker registry domain and auth that should be stored with the service, to enable the Horizon edge node to access the service's docker images. This flag can be repeated, and each flag should be in the format: registry:user:token"
  },
  {
    "id": "Overwrite the existing version if the service exists in the Exchange. It will skip the 'do you want to overwrite' prompt.",
    "translation": "Overwrite the existing version if the service exists in the Exchange. It will skip the 'do you want to overwrite' prompt."
  },
  {
    "id": "The path of the service policy JSON file to be used for the service to be published. This flag is optional",
    "translation": "The path of the service policy JSON file to be used for the service to be published. This flag is optional"
  },
  {
    "id": "Whether the service is visible to users outside of the organization. This flag is optional. If left unset, the service will default to whatever the metadata has set. If the service definition has also not set the public field, then the service will by default not be public.",
    "translation": "Whether the service is visible to users outside of the organization. This flag is optional. If left unset, the service will default to whatever the metadata has set. If the service definition has also not set the public field, then the service will by default not be public."
  },
  {
    "id": "Remove a service resource from the Horizon Exchange.",
    "translation": "Remove a service resource from the Horizon Exchange."
  },
  {
    "id": "The service to remove.",
    "translation": "The service to remove."
  },
  {
    "id": "Remove a docker auth token for this service resource in the Horizon Exchange.",
    "translation": "Remove a docker auth token for this service resource in the Horizon Exchange."
  },
  {
    "id": "The existing service to remove the docker auth from.",
    "translation": "The existing service to remove the docker auth from."
  },
  {
    "id": "The existing docker auth id to remove.",
    "translation": "The existing docker auth id to remove."
  },
  {
    "id": "Remove a signing public key/cert for this service resource in the Horizon Exchange.",
    "translation": "Remove a signing public key/cert for this service resource in the Horizon Exchange."
  },
  {
    "id": "The existing service to remove the key from.",
    "translation": "The existing service to remove the key from."
  },
  {
    "id": "Remove the service policy in the Horizon Exchange.",
    "translation": "Remove the service policy in the Horizon Exchange."
  },
  {
    "id": "Remove policy for this service.",
    "translation": "Remove policy for this service."
  },
  {
    "id": "Verify the signatures of a service resource in the Horizon Exchange.",
    "translation": "Verify the signatures of a service resource in the Horizon Exchange."
  },
  {
    "id": "The service to verify.",
    "translation": "The service to verify."
  },
  {
    "id": "The path of a pem public key file to be used to verify the service. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default.",
    "translation": "The path of a pem public key file to be used to verify the service. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default."
  },
  {
    "id": "List and manage high availability (HA) groups in the Horizon Exchange",
    "translation": "List and manage high availability (HA) groups in the Horizon Exchange"
  },
  {
    "id": "Display the HA group resources from the Horizon Exchange.",
    "translation": "Display the HA group resources from the Horizon Exchange."
  },
  {
    "id": "List just this one HA group.",
    "translation": "List just this one HA group."
  },
  {
    "id": "When listing all of the HA groups, show the entire resource of each group, instead of just the name.",
    "translation": "When listing all of the HA groups, show the entire resource of each group, instead of just the name."
  },
  {
    "id": "Display an empty HA group template that can be filled in.",
    "translation": "Display an empty HA group template that can be filled in."
  },
  {
    "id": "Add or replace an HA group in the Horizon Exchange. Use 'hzn exchange hagroup new' for an empty HA group template.",
    "translation": "Add or replace an HA group in the Horizon Exchange. Use 'hzn exchange hagroup new' for an empty HA group template."
  },
  {
    "id": "The name of the HA group to add or overwrite. If omitted, the name attribute in the input file will be used.",
    "translation": "The name of the HA group to add or overwrite. If omitted, the name attribute in the input file will be used."
  },
  {
    "id": "The path of a JSON file containing the metadata necessary to create/update the HA group in the Horizon Exchange. Specify -f- to read from stdin.",
    "translation": "The path of a JSON file containing the metadata necessary to create/update the HA group in the Horizon Exchange. Specify -f- to read from stdin."
  },
  {
    "id": "Remove the HA group in the Horizon Exchange.",
    "translation": "Remove the HA group in the Horizon Exchange."
  },
  {
    "id": "The name of the HA group to be removed.",
    "translation": "The name of the HA group to be removed."
  },
  {
    "id": "Manage HA group members in the Horizon Exchange",
    "translation": "Manage HA group members in the Horizon Exchange"
  },
  {
    "id": "Add nodes to the HA group in the Horizon Exchange.",
    "translation": "Add nodes to the HA group in the Horizon Exchange."
  },
  {
    "id": "The name of the HA group.",
    "translation": "The name of the HA group."
  },
  {
    "id": "Node to be added to the HA group. This flag can be repeated to specify different nodes.",
    "translation": "Node to be added to the HA group. This flag can be repeated to specify different nodes."
  },
  {
    "id": "Remove nodes from the HA group in the Horizon Exchange.",
    "translation": "Remove nodes from the HA group in the Horizon Exchange."
  },
  {
    "id": "Node to be removed from the HA group. This flag can be repeated to specify different nodes.",
    "translation": "Node to be removed from the HA group. This flag can be repeated to specify different nodes."
  },
  {
    "id": "Display the status of the Horizon Exchange.",
    "translation": "Display the status of the Horizon Exchange."
  },
  {
    "id": "List and manage users in the Horizon Exchange.",
    "translation": "List and manage users in the Horizon Exchange."
  },
  {
    "id": "Create the user resource in the Horizon Exchange.",
    "translation": "Create the user resource in the Horizon Exchange."
  },
  {
    "id": "Your username for this user account when creating it in the Horizon exchange.",
    "translation": "Your username for this user account when creating it in the Horizon exchange."
  },
  {
    "id": "Your password for this user account when creating it in the Horizon exchange.",
    "translation": "Your password for this user account when creating it in the Horizon exchange."
  },
  {
    "id": "Your email address that should be associated with this user account when creating it in the Horizon exchange. This argument is optional",
    "translation": "Your email address that should be associated with this user account when creating it in the Horizon exchange. This argument is optional"
  },
  {
    "id": "This user should be an administrator, capable of managing all resources in this org of the Exchange.",
    "translation": "This user should be an administrator, capable of managing all resources in this org of the Exchange."
  },
  {
    "id": "This user should be a hub administrator, capable of managing orgs in this administration hub.",
    "translation": "This user should be a hub administrator, capable of managing orgs in this administration hub."
  },
  {
    "id": "Display the user resource from the Horizon Exchange. (Normally you can only display your own user. If the user does not exist, you will get an invalid credentials error.)",
    "translation": "Display the user resource from the Horizon Exchange. (Normally you can only display your own user. If the user does not exist, you will get an invalid credentials error.)"
  },
  {
    "id": "List this one user. Default is your own user. Only admin users can list other users.",
    "translation": "List this one user. Default is your own user. Only admin users can list other users."
  },
  {
    "id": "List all users in the org. Will only do this if you are a user with admin privilege.",
    "translation": "List all users in the org. Will only do this if you are a user with admin privilege."
  },
  {
    "id": "When listing all of the users, show only the usernames, instead of each entire resource.",
    "translation": "When listing all of the users, show only the usernames, instead of each entire resource."
  },
  {
    "id": "Remove a user resource from the Horizon Exchange. Warning: this will cause all exchange resources owned by this user to also be deleted (nodes, services, patterns, etc).",
    "translation": "Remove a user resource from the Horizon Exchange. Warning: this will cause all exchange resources owned by this user to also be deleted (nodes, services, patterns, etc)."
  },
  {
    "id": "The user to remove.",
    "translation": "The user to remove."
  },
  {
    "id": "Change the existing user to be an admin user (like root in his/her org) or to no longer be an admin user. Can only be run by exchange root or another admin user.",
    "translation": "Change the existing user to be an admin user (like root in his/her org) or to no longer be an admin user. Can only be run by exchange root or another admin user."
  },
  {
    "id": "The user to be modified.",
    "translation": "The user to be modified."
  },
  {
    "id": "True if they should be an admin user, otherwise false.",
    "translation": "True if they should be an admin user, otherwise false."
  },
  {
    "id": "Display the version of the Horizon Exchange.",
    "translation": "Display the version of the Horizon Exchange."
  },
  {
    "id": "List and manage keys for signing and verifying services.",
    "translation": "List and manage keys for signing and verifying services."
  },
  {
    "id": "Generate a signing key pair.",
    "translation": "Generate a signing key pair."
  },
  {
    "id": "x509 certificate Organization (O) field (preferably a company name or other organization's name).",
    "translation": "x509 certificate Organization (O) field (preferably a company name or other organization's name)."
  },
  {
    "id": "x509 certificate Common Name (CN) field (preferably an email address issued by x509org).",
    "translation": "x509 certificate Common Name (CN) field (preferably an email address issued by x509org)."
  },
  {
    "id": "The directory to put the key pair files in. Mutually exclusive with -k and -K. The file names will be randomly generated.",
    "translation": "The directory to put the key pair files in. Mutually exclusive with -k and -K. The file names will be randomly generated."
  },
  {
    "id": "The full path of the private key file. Mutually exclusive with -d. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.private.key is the default.",
    "translation": "The full path of the private key file. Mutually exclusive with -d. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.private.key is the default."
  },
  {
    "id": "The full path of the public key file. Mutually exclusive with -d. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default.",
    "translation": "The full path of the public key file. Mutually exclusive with -d. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default."
  },
  {
    "id": "Overwrite the existing files. It will skip the 'do you want to overwrite' prompt.",
    "translation": "Overwrite the existing files. It will skip the 'do you want to overwrite' prompt."
  },
  {
    "id": "The length of the key to create.",
    "translation": "The length of the key to create."
  },
  {
    "id": "x509 certificate validity (Validity > Not After) expressed in days from the day of generation.",
    "translation": "x509 certificate validity (Validity > Not After) expressed in days from the day of generation."
  },
  {
    "id": "Automatically import the created public key into the local Horizon agent.",
    "translation": "Automatically import the created public key into the local Horizon agent."
  },
  {
    "id": "Imports a signing public key into the Horizon agent.",
    "translation": "Imports a signing public key into the Horizon agent."
  },
  {
    "id": "The path of a pem public key file to be imported. The base name in the path is also used as the key name in the Horizon agent. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default.",
    "translation": "The path of a pem public key file to be imported. The base name in the path is also used as the key name in the Horizon agent. If not specified, the environment variable HZN_PUBLIC_KEY_FILE will be used. If none of them are set, ~/.hzn/keys/service.public.pem is the default."
  },
  {
    "id": "List the signing keys that have been imported into this Horizon agent.",
    "translation": "List the signing keys that have been imported into this Horizon agent."
  },
  {
    "id": "The name of a specific key to show.",
    "translation": "The name of a specific key to show."
  },
  {
    "id": "List the names of all signing keys, even the older public keys not wrapped in a certificate.",
    "translation": "List the names of all signing keys, even the older public keys not wrapped in a certificate."
  },
  {
    "id": "Remove the specified signing key from this Horizon agent.",
    "translation": "Remove the specified signing key from this Horizon agent."
  },
  {
    "id": "The name of a specific key to remove.",
    "translation": "The name of a specific key to remove."
  },
  {
    "id": "List or manage the metering (payment) information for the active or archived agreements.",
    "translation": "List or manage the metering (payment) information for the active or archived agreements."
  },
  {
    "id": "List the metering (payment) information for the active or archived agreements.",
    "translation": "List the metering (payment) information for the active or archived agreements."
  },
  {
    "id": "List archived agreement metering information instead of metering for the active agreements.",
    "translation": "List archived agreement metering information instead of metering for the active agreements."
  },
  {
    "id": "List and manage Horizon Model Management Service resources.",
    "translation": "List and manage Horizon Model Management Service resources."
  },
  {
    "id": "The Horizon organization ID. If not specified, HZN_ORG_ID will be used as a default.",
    "translation": "The Horizon organization ID. If not specified, HZN_ORG_ID will be used as a default."
  },
  {
    "id": "Horizon user credentials to query and create Model Management Service resources. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default. If you don't prepend it with the user's org, it will automatically be prepended with the -o value.",
    "translation": "Horizon user credentials to query and create Model Management Service resources. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default. If you don't prepend it with the user's org, it will automatically be prepended with the -o value."
  },
  {
    "id": "List and manage objects in the Horizon Model Management Service.",
    "translation": "List and manage objects in the Horizon Model Management Service."
  },
  {
    "id": "Delete an object in the Horizon Model Management Service, making it unavailable for services deployed on nodes.",
    "translation": "Delete an object in the Horizon Model Management Service, making it unavailable for services deployed on nodes."
  },
  {
    "id": "The type of the object to delete.",
    "translation": "The type of the object to delete."
  },
  {
    "id": "The id of the object to delete.",
    "translation": "The id of the object to delete."
  },
  {
    "id": "Download data of the given object in the Horizon Model Management Service.",
    "translation": "Download data of the given object in the Horizon Model Management Service."
  },
  {
    "id": "The type of the object to download data. This flag must be used with -i.",
    "translation": "The type of the object to download data. This flag must be used with -i."
  },
  {
    "id": "The id of the object to download data. This flag must be used with -t.",
    "translation": "The id of the object to download data. This flag must be used with -t."
  },
  {
    "id": "The file that the data of downloaded object is written to. This flag must be used with -f. If omit, will use default file name in format of objectType_objectID and save in current directory",
    "translation": "The file that the data of downloaded object is written to. This flag must be used with -f. If omit, will use default file name in format of objectType_objectID and save in current directory"
  },
  {
    "id": "Overwrite the existing file if it exists in the file system.",
    "translation": "Overwrite the existing file if it exists in the file system."
  },
  {
    "id": "The download command will not perform a data integrity check on the downloaded object data",
    "translation": "The download command will not perform a data integrity check on the downloaded object data"
  },
  {
    "id": "List objects in the Horizon Model Management Service.",
    "translation": "List objects in the Horizon Model Management Service."
  },
  {
    "id": "The type of the object to list.",
    "translation": "The type of the object to list."
  },
  {
    "id": "The id of the object to list. This flag is optional. Omit this flag to list all objects of a given object type.",
    "translation": "The id of the object to list. This flag is optional. Omit this flag to list all objects of a given object type."
  },
  {
    "id": "Specify true to show only objects using policy. Specify false to show only objects not using policy. If this flag is omitted, both kinds of objects are shown.",
    "translation": "Specify true to show only objects using policy. Specify false to show only objects not using policy. If this flag is omitted, both kinds of objects are shown."
  },
  {
    "id": "List mms objects using policy that are targetted for the given service. Service specified in the format service-org/service-name.",
    "translation": "List mms objects using policy that are targetted for the given service. Service specified in the format service-org/service-name."
  },
  {
    "id": "List mms objects using policy that reference the given property name.",
    "translation": "List mms objects using policy that reference the given property name."
  },
  {
    "id": "List mms objects using policy that has been updated since the given time. The time value is spefified in RFC3339 format: yyyy-MM-ddTHH:mm:ssZ. The time of day may be omitted.",
    "translation": "List mms objects using policy that has been updated since the given time. The time value is spefified in RFC3339 format: yyyy-MM-ddTHH:mm:ssZ. The time of day may be omitted."
  },
  {
    "id": "List mms objects with given destination type",
    "translation": "List mms objects with given destination type"
  },
  {
    "id": "List mms objects with given destination id. Must specify --destinationType to use this flag",
    "translation": "List mms objects with given destination id. Must specify --destinationType to use this flag"
  },
  {
    "id": "Specify true to show objects that have data. Specify false to show objects that have no data. If this flag is omitted, both kinds of objects are shown.",
    "translation": "Specify true to show objects that have data. Specify false to show objects that have no data. If this flag is omitted, both kinds of objects are shown."
  },
  {
    "id": "List mms objects that expired before the given time. The time value is spefified in RFC3339 format: yyyy-MM-ddTHH:mm:ssZ. Specify now to show objects that are currently expired.",
    "translation": "List mms objects that expired before the given time. The time value is spefified in RFC3339 format: yyyy-MM-ddTHH:mm:ssZ. Specify now to show objects that are currently expired."
  },
  {
    "id": "Specify true to show objects that are marked deleted. Specify false to show objects that are not marked deleted. If this flag is omitted, both kinds of objects are shown. Object will be marked deleted if object is deleted in CSS but it doesn't receive notifications from all the destinations",
    "translation": "Specify true to show objects that are marked deleted. Specify false to show objects that are not marked deleted. If this flag is omitted, both kinds of objects are shown. Object will be marked deleted if object is deleted in CSS but it doesn't receive notifications from all the destinations"
  },
  {
    "id": "Show detailed object metadata information",
    "translation": "Show detailed object metadata information"
  },
  {
    "id": "Provides additional detail about the deployment of the object on edge nodes.",
    "translation": "Provides additional detail about the deployment of the object on edge nodes."
  },
  {
    "id": "Display an empty object metadata template that can be filled in and passed as the -m option on the 'hzn mms object publish' command.",
    "translation": "Display an empty object metadata template that can be filled in and passed as the -m option on the 'hzn mms object publish' command."
  },
  {
    "id": "Publish an object in the Horizon Model Management Service, making it available for services deployed on nodes.",
    "translation": "Publish an object in the Horizon Model Management Service, making it available for services deployed on nodes."
  },
  {
    "id": "The type of the object to publish. This flag must be used with -i. It is mutually exclusive with -m",
    "translation": "The type of the object to publish. This flag must be used with -i. It is mutually exclusive with -m"
  },
  {
    "id": "The id of the object to publish. This flag must be used with -t. It is mutually exclusive with -m",
    "translation": "The id of the object to publish. This flag must be used with -t. It is mutually exclusive with -m"
  },
  {
    "id": "If you want the object to be deployed on nodes using a given pattern, specify it using this flag. This flag is optional and can only be used with --type and --id. It is mutually exclusive with -m",
    "translation": "If you want the object to be deployed on nodes using a given pattern, specify it using this flag. This flag is optional and can only be used with --type and --id. It is mutually exclusive with -m"
  },
  {
    "id": "The definition of the object to publish. A blank template can be obtained from the 'hzn mms object new' command. Specify -m- to read from stdin.",
    "translation": "The definition of the object to publish. A blank template can be obtained from the 'hzn mms object new' command. Specify -m- to read from stdin."
  },
  {
    "id": "The object (in the form of a file) to publish. This flag is optional so that you can update only the object's definition.",
    "translation": "The object (in the form of a file) to publish. This flag is optional so that you can update only the object's definition."
  },
  {
    "id": "The publish command will disable chunk upload. Data will stream to CSS.",
    "translation": "The publish command will disable chunk upload. Data will stream to CSS."
  },
  {
    "id": "The size of data chunk that will be published with. Ignored if --disableChunkUpload is specified.",
    "translation": "The size of data chunk that will be published with. Ignored if --disableChunkUpload is specified."
  },
  {
    "id": "The publish command will not perform a data integrity check on the uploaded object data. It is mutually exclusive with --hashAlgo and --hash",
    "translation": "The publish command will not perform a data integrity check on the uploaded object data. It is mutually exclusive with --hashAlgo and --hash"
  },
  {
    "id": "The hash algorithm used to hash the object data before signing it, ensuring data integrity during upload and download. Supported hash algorithms are SHA1 or SHA256, the default is SHA1. It is mutually exclusive with the --noIntegrity flag",
    "translation": "The hash algorithm used to hash the object data before signing it, ensuring data integrity during upload and download. Supported hash algorithms are SHA1 or SHA256, the default is SHA1. It is mutually exclusive with the --noIntegrity flag"
  },
  {
    "id": "The hash of the object data being uploaded or downloaded. Use this flag if you want to provide the hash instead of allowing the command to automatically calculate the hash. The hash must be generated using either the SHA1 or SHA256 algorithm. The -a flag must be specified if the hash was generated using SHA256. This flag is mutually exclusive with --noIntegrity.",
    "translation": "The hash of the object data being uploaded or downloaded. Use this flag if you want to provide the hash instead of allowing the command to automatically calculate the hash. The hash must be generated using either the SHA1 or SHA256 algorithm. The -a flag must be specified if the hash was generated using SHA256. This flag is mutually exclusive with --noIntegrity."
  },
  {
    "id": "The path of a private key file to be used to sign the object. The corresponding public key will be stored in the MMS to ensure integrity of the object. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used to find a private key. If not set, ~/.hzn/keys/service.private.key will be used. If it does not exist, an RSA key pair is generated only for this publish operation and then the private key is discarded.",
    "translation": "The path of a private key file to be used to sign the object. The corresponding public key will be stored in the MMS to ensure integrity of the object. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used to find a private key. If not set, ~/.hzn/keys/service.private.key will be used. If it does not exist, an RSA key pair is generated only for this publish operation and then the private key is discarded."
  },
  {
    "id": "Display a list of object types stored in the Horizon Model Management Service.",
    "translation": "Display a list of object types stored in the Horizon Model Management Service."
  },
  {
    "id": "Display the status of the Horizon Model Management Service.",
    "translation": "Display the status of the Horizon Model Management Service."
  },
  {
    "id": "List and manage general information about this Horizon edge node.",
    "translation": "List and manage general information about this Horizon edge node."
  },
  {
    "id": "Display general information about this Horizon edge node.",
    "translation": "Display general information about this Horizon edge node."
  },
  {
    "id": "List and manage manifests and agent files for node management.",
    "translation": "List and manage manifests and agent files for node management."
  },
  {
    "id": "Horizon user credentials to query and create Node Management resources. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default. If you don't prepend it with the user's org, it will automatically be prepended with the -o value.",
    "translation": "Horizon user credentials to query and create Node Management resources. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default. If you don't prepend it with the user's org, it will automatically be prepended with the -o value."
  },
  {
    "id": "List and manage manifest files stored in the management hub.",
    "translation": "List and manage manifest files stored in the management hub."
  },
  {
    "id": "Add or replace a manifest file in the management hub. Use 'hzn nodemanagement manifest new' for an empty manifest template.",
    "translation": "Add or replace a manifest file in the management hub. Use 'hzn nodemanagement manifest new' for an empty manifest template."
  },
  {
    "id": "The type of manifest to add. Valid values include 'agent_upgrade_manifests'.",
    "translation": "The type of manifest to add. Valid values include 'agent_upgrade_manifests'."
  },
  {
    "id": "The id of the manifest to add.",
    "translation": "The id of the manifest to add."
  },
  {
    "id": "The path of a JSON file containing the manifest data. Specify -f- to read from stdin.",
    "translation": "The path of a JSON file containing the manifest data. Specify -f- to read from stdin."
  },
  {
    "id": "The hash algorithm used to hash the manifest data before signing it, ensuring data integrity during upload and download. Supported hash algorithms are SHA1 or SHA256, the default is SHA1. It is mutually exclusive with the --noIntegrity flag",
    "translation": "The hash algorithm used to hash the manifest data before signing it, ensuring data integrity during upload and download. Supported hash algorithms are SHA1 or SHA256, the default is SHA1. It is mutually exclusive with the --noIntegrity flag"
  },
  {
    "id": "The hash of the manifest data being uploaded or downloaded. Use this flag if you want to provide the hash instead of allowing the command to automatically calculate the hash. The hash must be generated using either the SHA1 or SHA256 algorithm. The -a flag must be specified if the hash was generated using SHA256. This flag is mutually exclusive with --noIntegrity.",
    "translation": "The hash of the manifest data being uploaded or downloaded. Use this flag if you want to provide the hash instead of allowing the command to automatically calculate the hash. The hash must be generated using either the SHA1 or SHA256 algorithm. The -a flag must be specified if the hash was generated using SHA256. This flag is mutually exclusive with --noIntegrity."
  },
  {
    "id": "The path of a private key file to be used to sign the manifest. The corresponding public key will be stored in the MMS to ensure integrity of the manifest. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used to find a private key. If not set, ~/.hzn/keys/service.private.key will be used. If it does not exist, an RSA key pair is generated only for this publish operation and then the private key is discarded.",
    "translation": "The path of a private key file to be used to sign the manifest. The corresponding public key will be stored in the MMS to ensure integrity of the manifest. If not specified, the environment variable HZN_PRIVATE_KEY_FILE will be used to find a private key. If not set, ~/.hzn/keys/service.private.key will be used. If it does not exist, an RSA key pair is generated only for this publish operation and then the private key is discarded."
  },
  {
    "id": "The publish command will not perform a data integrity check on the uploaded manifest data. It is mutually exclusive with --hashAlgo and --hash",
    "translation": "The publish command will not perform a data integrity check on the uploaded manifest data. It is mutually exclusive with --hashAlgo and --hash"
  },
  {
    "id": "Display a list of manifest files stored in the management hub.",
    "translation": "Display a list of manifest files stored in the management hub."
  },
  {
    "id": "The type of manifest to list. Valid values include 'agent_upgrade_manifests'.",
    "translation": "The type of manifest to list. Valid values include 'agent_upgrade_manifests'."
  },
  {
    "id": "The id of the manifest to list. Must specify --type flag.",
    "translation": "The id of the manifest to list. Must specify --type flag."
  },
  {
    "id": "Display the contents of the manifest file. Must specify --type and --id flags.",
    "translation": "Display the contents of the manifest file. Must specify --type and --id flags."
  },
  {
    "id": "Display an empty manifest template that can be filled in.",
    "translation": "Display an empty manifest template that can be filled in."
  },
  {
    "id": "Remove a manifest file from the management hub. Use 'hzn nodemanagement manifest new' for an empty manifest template.",
    "translation": "Remove a manifest file from the management hub. Use 'hzn nodemanagement manifest new' for an empty manifest template."
  },
  {
    "id": "The type of manifest to remove. Valid values include 'agent_upgrade_manifests'.",
    "translation": "The type of manifest to remove. Valid values include 'agent_upgrade_manifests'."
  },
  {
    "id": "The id of the manifest to remove.",
    "translation": "The id of the manifest to remove."
  },
  {
    "id": "List agent files and types stored in the management hub.",
    "translation": "List agent files and types stored in the management hub."
  },
  {
    "id": "Display a list of agent files stored in the management hub.",
    "translation": "Display a list of agent files stored in the management hub."
  },
  {
    "id": "Filter the list of agent upgrade files by the specified type. Valid values include 'agent_software_files', 'agent_cert_files' and 'agent_config_files'.",
    "translation": "Filter the list of agent upgrade files by the specified type. Valid values include 'agent_software_files', 'agent_cert_files' and 'agent_config_files'."
  },
  {
    "id": "Filter the list of agent upgrade files by the specified version range or version string. Version can be a version range, a single version string or 'latest'.",
    "translation": "Filter the list of agent upgrade files by the specified version range or version string. Version can be a version range, a single version string or 'latest'."
  },
  {
    "id": "Display a list of agent file types with their corresponding versions.",
    "translation": "Display a list of agent file types with their corresponding versions."
  },
  {
    "id": "The type of agent files to list versions for. Valid values include 'agent_software_files', 'agent_cert_files' and 'agent_config_files'.",
    "translation": "The type of agent files to list versions for. Valid values include 'agent_software_files', 'agent_cert_files' and 'agent_config_files'."
  },
  {
    "id": "Show only a list of versions for a given file type. Must also specify a file type with the --type flag.",
    "translation": "Show only a list of versions for a given file type. Must also specify a file type with the --type flag."
  },
  {
    "id": "List and manage policy for this Horizon edge node.",
    "translation": "List and manage policy for this Horizon edge node."
  },
  {
    "id": "Display this edge node's policy.",
    "translation": "Display this edge node's policy."
  },
  {
    "id": "Display an empty policy template that can be filled in.",
    "translation": "Display an empty policy template that can be filled in."
  },
  {
    "id": "(DEPRECATED) This command is deprecated. Please use 'hzn policy update' to update the node policy. This command is used to update either the node policy properties or the constraints, but not both.",
    "translation": "(DEPRECATED) This command is deprecated. Please use 'hzn policy update' to update the node policy. This command is used to update either the node policy properties or the constraints, but not both."
  },
  {
    "id": "The new constraints or properties in the format '{Constraintsconstraint_list}' or '{Propertiesproperty_list}'.",
    "translation": "The new constraints or properties in the format '{Constraintsconstraint_list}' or '{Propertiesproperty_list}'."
  },
  {
    "id": "Remove the node's policy.",
    "translation": "Remove the node's policy."
  },
  {
    "id": "Create or replace the node's policy. The node's built-in properties cannot be modified or deleted by this command, with the exception of openhorizon.allowPrivileged.",
    "translation": "Create or replace the node's policy. The node's built-in properties cannot be modified or deleted by this command, with the exception of openhorizon.allowPrivileged."
  },
  {
    "id": "The JSON input file name containing the node policy. Specify -f- to read from stdin. A node policy contains the 'deployment' and 'management' attributes. Please use 'hzn policy new' to see the node policy format.",
    "translation": "The JSON input file name containing the node policy. Specify -f- to read from stdin. A node policy contains the 'deployment' and 'management' attributes. Please use 'hzn policy new' to see the node policy format."
  },
  {
    "id": "Create an input file template for this pattern that can be used for the 'hzn register' command (once filled in). This examines the services that the specified pattern uses, and determines the node owner input that is required for them.",
    "translation": "Create an input file template for this pattern that can be used for the 'hzn register' command (once filled in). This examines the services that the specified pattern uses, and determines the node owner input that is required for them."
  },
  {
    "id": "The Horizon exchange node ID and token (it must already exist).",
    "translation": "The Horizon exchange node ID and token (it must already exist)."
  },
  {
    "id": "The JSON input template file name that should be created. This file will contain placeholders for you to fill in user input values.",
    "translation": "The JSON input template file name that should be created. This file will contain placeholders for you to fill in user input values."
  },
  {
    "id": "The Horizon exchange organization ID that the node will be registered in.",
    "translation": "The Horizon exchange organization ID that the node will be registered in."
  },
  {
    "id": "The Horizon exchange pattern that describes what workloads that should be deployed to this node. If the pattern is from a different organization than the node, use the 'other_org/pattern' format.",
    "translation": "The Horizon exchange pattern that describes what workloads that should be deployed to this node. If the pattern is from a different organization than the node, use the 'other_org/pattern' format."
  },
  {
    "id": "The architecture to write the template file for. (Horizon ignores services in patterns whose architecture is different from the target system.) The architecture must be what is returned by 'hzn node list' on the target system.",
    "translation": "The architecture to write the template file for. (Horizon ignores services in patterns whose architecture is different from the target system.) The architecture must be what is returned by 'hzn node list' on the target system."
  },
  {
    "id": "Register this edge node with Horizon.",
    "translation": "Register this edge node with Horizon."
  },
  {
    "id": "The Horizon exchange node ID and token. The node ID must be unique within the organization. If not specified, HZN_EXCHANGE_NODE_AUTH will be used as a default. If both -n and HZN_EXCHANGE_NODE_AUTH are not specified, the node ID will be created by Horizon from the machine serial number or fully qualified hostname. If the token is not specified, Horizon will create a random token. If node resource in the Exchange identified by the ID and token does not yet exist, you must also specify the -u flag so it can be created.",
    "translation": "The Horizon exchange node ID and token. The node ID must be unique within the organization. If not specified, HZN_EXCHANGE_NODE_AUTH will be used as a default. If both -n and HZN_EXCHANGE_NODE_AUTH are not specified, the node ID will be created by Horizon from the machine serial number or fully qualified hostname. If the token is not specified, Horizon will create a random token. If node resource in the Exchange identified by the ID and token does not yet exist, you must also specify the -u flag so it can be created."
  },
  {
    "id": "The name of the node. If not specified, it will be the same as the node id.",
    "translation": "The name of the node. If not specified, it will be the same as the node id."
  },
  {
    "id": "User credentials to create the node resource in the Horizon exchange if it does not already exist. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default.",
    "translation": "User credentials to create the node resource in the Horizon exchange if it does not already exist. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default."
  },
  {
    "id": "A JSON file that sets or overrides user input variables needed by the services that will be deployed to this node. See {Sampledir}/user_input.json. Specify -f- to read from stdin.",
    "translation": "A JSON file that sets or overrides user input variables needed by the services that will be deployed to this node. See {Sampledir}/user_input.json. Specify -f- to read from stdin."
  },
  {
    "id": "The Horizon exchange organization ID that the node should be registered in. The default is the HZN_ORG_ID environment variable. Mutually exclusive with <nodeorg> and <pattern> arguments.",
    "translation": "The Horizon exchange organization ID that the node should be registered in. The default is the HZN_ORG_ID environment variable. Mutually exclusive with <nodeorg> and <pattern> arguments."
  },
  {
    "id": "The Horizon exchange pattern that describes what workloads that should be deployed to this node. If the pattern is from a different organization than the node, use the 'other_org/pattern' format. Mutually exclusive with <nodeorg> and <pattern> arguments.",
    "translation": "The Horizon exchange pattern that describes what workloads that should be deployed to this node. If the pattern is from a different organization than the node, use the 'other_org/pattern' format. Mutually exclusive with <nodeorg> and <pattern> arguments."
  },
  {
    "id": "A JSON file that sets or overrides the node policy for this node. A node policy contains the 'deployment' and 'management' attributes. Please use 'hzn policy new' to see the node policy format.",
    "translation": "A JSON file that sets or overrides the node policy for this node. A node policy contains the 'deployment' and 'management' attributes. Please use 'hzn policy new' to see the node policy format."
  },
  {
    "id": "The Horizon exchange organization ID that the node should be registered in. Mutually exclusive with -o and -p.",
    "translation": "The Horizon exchange organization ID that the node should be registered in. Mutually exclusive with -o and -p."
  },
  {
    "id": "The Horizon exchange pattern that describes what workloads that should be deployed to this node. If the pattern is from a different organization than the node, use the 'other_org/pattern' format. Mutually exclusive with -o and -p.",
    "translation": "The Horizon exchange pattern that describes what workloads that should be deployed to this node. If the pattern is from a different organization than the node, use the 'other_org/pattern' format. Mutually exclusive with -o and -p."
  },
  {
    "id": "The name of the HA group that this node will be added to.",
    "translation": "The name of the HA group that this node will be added to."
  },
  {
    "id": "Wait for the named service to start executing on this node. When registering with a pattern, use '*' to watch all the services in the pattern. When registering with a policy, '*' is not a valid value for -s. This flag is not supported for edge cluster nodes.",
    "translation": "Wait for the named service to start executing on this node. When registering with a pattern, use '*' to watch all the services in the pattern. When registering with a policy, '*' is not a valid value for -s. This flag is not supported for edge cluster nodes."
  },
  {
    "id": "The org of the service to wait for on this node. If '-s *' is specified, then --serviceorg must be omitted.",
    "translation": "The org of the service to wait for on this node. If '-s *' is specified, then --serviceorg must be omitted."
  },
  {
    "id": "The number of seconds for the --service to start. The default is 60 seconds, beginning when registration is successful. Ignored if --service is not specified.",
    "translation": "The number of seconds for the --service to start. The default is 60 seconds, beginning when registration is successful. Ignored if --service is not specified."
  },
  {
    "id": "List or manage the services that are currently registered on this Horizon edge node.",
    "translation": "List or manage the services that are currently registered on this Horizon edge node."
  },
  {
    "id": "List or manage the configuration state for the services that are currently registered on this Horizon edge node.",
    "translation": "List or manage the configuration state for the services that are currently registered on this Horizon edge node."
  },
  {
    "id": "List the configuration state for the services that are currently registered on this Horizon edge node.",
    "translation": "List the configuration state for the services that are currently registered on this Horizon edge node."
  },
  {
    "id": "Change the configuration state to 'active' for a service.",
    "translation": "Change the configuration state to 'active' for a service."
  },
  {
    "id": "Resume all registerd services.",
    "translation": "Resume all registerd services."
  },
  {
    "id": "The organization of the service that should be resumed.",
    "translation": "The organization of the service that should be resumed."
  },
  {
    "id": "The name of the service that should be resumed. If omitted, all the services for the organization will be resumed.",
    "translation": "The name of the service that should be resumed. If omitted, all the services for the organization will be resumed."
  },
  {
    "id": "The version of the service that should be resumed. If omitted, all the versions for this service will be resumed.",
    "translation": "The version of the service that should be resumed. If omitted, all the versions for this service will be resumed."
  },
  {
    "id": "Change the configuration state to 'suspend' for a service. Parent and child dependencies of the suspended service will be stopped until the service is resumed.",
    "translation": "Change the configuration state to 'suspend' for a service. Parent and child dependencies of the suspended service will be stopped until the service is resumed."
  },
  {
    "id": "Suspend all registerd services.",
    "translation": "Suspend all registerd services."
  },
  {
    "id": "The organization of the service that should be suspended.",
    "translation": "The organization of the service that should be suspended."
  },
  {
    "id": "The name of the service that should be suspended. If omitted, all the services for the organization will be suspended.",
    "translation": "The name of the service that should be suspended. If omitted, all the services for the organization will be suspended."
  },
  {
    "id": "The version of the service that should be suspended. If omitted, all the versions for this service will be suspended.",
    "translation": "The version of the service that should be suspended. If omitted, all the versions for this service will be suspended."
  },
  {
    "id": "Show the container logs for a service.",
    "translation": "Show the container logs for a service."
  },
  {
    "id": "The name of the service whose log records should be displayed. The service name is the same as the url field of a service definition. Displays log records similar to tail behavior and returns .",
    "translation": "The name of the service whose log records should be displayed. The service name is the same as the url field of a service definition. Displays log records similar to tail behavior and returns ."
  },
  {
    "id": "The version of the service.",
    "translation": "The version of the service."
  },
  {
    "id": "The name of the container within the service whose log records should be displayed.",
    "translation": "The name of the container within the service whose log records should be displayed."
  },
  {
    "id": "List the services variable configuration that has been done on this Horizon edge node.",
    "translation": "List the services variable configuration that has been done on this Horizon edge node."
  },
  {
    "id": "List the services that are currently registered on this Horizon edge node.",
    "translation": "List the services that are currently registered on this Horizon edge node."
  },
  {
    "id": "Display the current horizon internal status for the node.",
    "translation": "Display the current horizon internal status for the node."
  },
  {
    "id": "Unregister and reset this Horizon edge node so that it is ready to be registered again. Warning: this will stop all the Horizon services running on this edge node, and restart the Horizon agent.",
    "translation": "Unregister and reset this Horizon edge node so that it is ready to be registered again. Warning: this will stop all the Horizon services running on this edge node, and restart the Horizon agent."
  },
  {
    "id": "Also remove this node resource from the Horizon exchange (because you no longer want to use this node with Horizon).",
    "translation": "Also remove this node resource from the Horizon exchange (because you no longer want to use this node with Horizon)."
  },
  {
    "id": "Also remove all the previous registration information. Use it only after the 'hzn unregister' command failed. Please capture the logs by running 'hzn eventlog list -a -l' command before using this flag.",
    "translation": "Also remove all the previous registration information. Use it only after the 'hzn unregister' command failed. Please capture the logs by running 'hzn eventlog list -a -l' command before using this flag."
  },
  {
    "id": "The number of minutes to wait for unregistration to complete. The default is zero which will wait forever.",
    "translation": "The number of minutes to wait for unregistration to complete. The default is zero which will wait forever."
  },
  {
    "id": "Perform a deep clean on a node running in a container. This flag  must be used with -D and only if the agent was installed as anax-in-container.",
    "translation": "Perform a deep clean on a node running in a container. This flag  must be used with -D and only if the agent was installed as anax-in-container."
  },
  {
    "id": "List or manage the service user inputs that are currently registered on this Horizon edge node.",
    "translation": "List or manage the service user inputs that are currently registered on this Horizon edge node."
  },
  {
    "id": "Add a new user input object or overwrite the current user input object for this Horizon edge node.",
    "translation": "Add a new user input object or overwrite the current user input object for this Horizon edge node."
  },
  {
    "id": "The file path to the json file with the user input object. Specify -f- to read from stdin.",
    "translation": "The file path to the json file with the user input object. Specify -f- to read from stdin."
  },
  {
    "id": "List the service user inputs currently registered on this Horizon edge node.",
    "translation": "List the service user inputs currently registered on this Horizon edge node."
  },
  {
    "id": "Display an empty userinput template.",
    "translation": "Display an empty userinput template."
  },
  {
    "id": "Remove the user inputs that are currently registered on this Horizon edge node.",
    "translation": "Remove the user inputs that are currently registered on this Horizon edge node."
  },
  {
    "id": "Skip the 'Are you sure?' prompt.",
    "translation": "Skip the 'Are you sure?' prompt."
  },
  {
    "id": "Update an existing user input object for this Horizon edge node.",
    "translation": "Update an existing user input object for this Horizon edge node."
  },
  {
    "id": "The file path to the json file with the updated user input object. Specify -f- to read from stdin.",
    "translation": "The file path to the json file with the updated user input object. Specify -f- to read from stdin."
  },
  {
    "id": "List and manage node management status for the local node.",
    "translation": "List and manage node management status for the local node."
  },
  {
    "id": "Display the node managment status for the local node.",
    "translation": "Display the node managment status for the local node."
  },
  {
    "id": "The name of the node management policy. If omitted the status of all management policies for this node will be displayed.",
    "translation": "The name of the node management policy. If omitted the status of all management policies for this node will be displayed."
  },
  {
    "id": "Show the entire contents of each node management status object.",
    "translation": "Show the entire contents of each node management status object."
  },
  {
    "id": "Re-evaluate the node management policy (nmp). Run this command to retry a nmp when the upgrade failed and the problem is fixed. Do not run this command when the node is still in the middle of an upgrade.",
    "translation": "Re-evaluate the node management policy (nmp). Run this command to retry a nmp when the upgrade failed and the problem is fixed. Do not run this command when the node is still in the middle of an upgrade."
  },
  {
    "id": "The name of the node management policy. If omitted all management policies for this node will be re-evaluated.",
    "translation": "The name of the node management policy. If omitted all management policies for this node will be re-evaluated."
  },
  {
    "id": "Utility commands.",
    "translation": "Utility commands."
  },
  {
    "id": "Convert the configuration file from JSON format to a shell script.",
    "translation": "Convert the configuration file from JSON format to a shell script."
  },
  {
    "id": "The path of a configuration file to be converted.",
    "translation": "The path of a configuration file to be converted."
  },
  {
    "id": "Sign the text in stdin. The signature is sent to stdout.",
    "translation": "Sign the text in stdin. The signature is sent to stdout."
  },
  {
    "id": "The path of a private key file to be used to sign the stdin.",
    "translation": "The path of a private key file to be used to sign the stdin."
  },
  {
    "id": "Verify that the signature specified via -s is a valid signature for the text in stdin.",
    "translation": "Verify that the signature specified via -s is a valid signature for the text in stdin."
  },
  {
    "id": "The path of public key file (that corresponds to the private key that was used to sign) to verify the signature of stdin.",
    "translation": "The path of public key file (that corresponds to the private key that was used to sign) to verify the signature of stdin."
  },
  {
    "id": "The supposed signature of stdin.",
    "translation": "The supposed signature of stdin."
  },
  {
    "id": "List and manage secrets in the secrets manager. NOTE: You must authenticate as an administrator to list secrets available to the entire organization.",
    "translation": "List and manage secrets in the secrets manager. NOTE: You must authenticate as an administrator to list secrets available to the entire organization."
  },
  {
    "id": "Horizon Exchange credentials to query secrets manager resources. The default is HZN_EXCHANGE_USER_AUTH environment variable. If you don't prepend it with the user's org, it will automatically be prepended with the value of the HZN_ORG_ID environment variable.",
    "translation": "Horizon Exchange credentials to query secrets manager resources. The default is HZN_EXCHANGE_USER_AUTH environment variable. If you don't prepend it with the user's org, it will automatically be prepended with the value of the HZN_ORG_ID environment variable."
  },
  {
    "id": "List and manage secrets in the secrets manager.",
    "translation": "List and manage secrets in the secrets manager."
  },
  {
    "id": "Display the names of the secrets in the secrets manager.",
    "translation": "Display the names of the secrets in the secrets manager."
  },
  {
    "id": "List just this one secret. Returns a boolean indicating the existence of the secret. This is the name of the secret used in the secrets manager. If the secret does not exist, returns with exit code 1.",
    "translation": "List just this one secret. Returns a boolean indicating the existence of the secret. This is the name of the secret used in the secrets manager. If the secret does not exist, returns with exit code 1."
  },
  {
    "id": "Add a secret to the secrets manager.",
    "translation": "Add a secret to the secrets manager."
  },
  {
    "id": "The name of the secret. It must be unique within your organization. This name is used in deployment policies and patterns to bind this secret to a secret name in a service definition.",
    "translation": "The name of the secret. It must be unique within your organization. This name is used in deployment policies and patterns to bind this secret to a secret name in a service definition."
  },
  {
    "id": "Filepath to a file containing the secret details. Mutually exclusive with --secretDetail. Specify -f- to read from stdin.",
    "translation": "Filepath to a file containing the secret details. Mutually exclusive with --secretDetail. Specify -f- to read from stdin."
  },
  {
    "id": "A key for the secret.",
    "translation": "A key for the secret."
  },
  {
    "id": "The secret details as a string. Secret details are the actual secret itself, not the name of the secret. For example, a password, a private key, etc. are examples of secret details. Mutually exclusive with --secretFile.",
    "translation": "The secret details as a string. Secret details are the actual secret itself, not the name of the secret. For example, a password, a private key, etc. are examples of secret details. Mutually exclusive with --secretFile."
  },
  {
    "id": "Overwrite the existing secret if it exists in the secrets manager. It will skip the 'do you want to overwrite' prompt.",
    "translation": "Overwrite the existing secret if it exists in the secrets manager. It will skip the 'do you want to overwrite' prompt."
  },
  {
    "id": "Remove a secret in the secrets manager.",
    "translation": "Remove a secret in the secrets manager."
  },
  {
    "id": "The name of the secret to be removed from the secrets manager.",
    "translation": "The name of the secret to be removed from the secrets manager."
  },
  {
    "id": "Read the details of a secret stored in the secrets manager. This consists of the key and value pair provided on secret creation.",
    "translation": "Read the details of a secret stored in the secrets manager. This consists of the key and value pair provided on secret creation."
  },
  {
    "id": "The name of the secret to read in the secrets manager.",
    "translation": "The name of the secret to read in the secrets manager."
  },
  {
    "id": "Show the Horizon version.",
    "translation": "Show the Horizon version."
  },
  {
    "id": "List and manage resources in SDO owner services",
    "translation": "List and manage resources in SDO owner services"
  },
  {
    "id": "List and manage Horizon SDO ownership keys.",
    "translation": "List and manage Horizon SDO ownership keys."
  },
  {
    "id": "List the SDO ownership keys stored in SDO owner services.",
    "translation": "List the SDO ownership keys stored in SDO owner services."
  },
  {
    "id": "List the full details of this SDO ownership key.",
    "translation": "List the full details of this SDO ownership key."
  },
  {
    "id": "Create a new key in SDO owner services.",
    "translation": "Create a new key in SDO owner services."
  },
  {
    "id": "The file containing metadata for the key to be created in SDO owner services. Must be JSON file type extension.",
    "translation": "The file containing metadata for the key to be created in SDO owner services. Must be JSON file type extension."
  },
  {
    "id": "The file that the returned public key is written to. If omit, the key will be printed to the console.",
    "translation": "The file that the returned public key is written to. If omit, the key will be printed to the console."
  },
  {
    "id": "Overwrite the existing output public key file if it exists.",
    "translation": "Overwrite the existing output public key file if it exists."
  },
  {
    "id": "Download the specified key from SDO owner services.",
    "translation": "Download the specified key from SDO owner services."
  },
  {
    "id": "The name of the key to be downloaded from SDO owner services.",
    "translation": "The name of the key to be downloaded from SDO owner services."
  },
  {
    "id": "The file that the data of downloaded key is written to. If omit, the key will be printed to the console.",
    "translation": "The file that the data of downloaded key is written to. If omit, the key will be printed to the console."
  },
  {
    "id": "Overwrite the existing file if it exists.",
    "translation": "Overwrite the existing file if it exists."
  },
  {
    "id": "Remove a key from SDO owner services.",
    "translation": "Remove a key from SDO owner services."
  },
  {
    "id": "The name of the key to be removed from SDO owner services.",
    "translation": "The name of the key to be removed from SDO owner services."
  },
  {
    "id": "Create a new SDO key metadata template file. All fields must be filled before adding to SDO owner services.",
    "translation": "Create a new SDO key metadata template file. All fields must be filled before adding to SDO owner services."
  },
  {
    "id": "The file that the SDO key template will be written to in JSON format. If omit, the key metadata will be printed to the console.",
    "translation": "The file that the SDO key template will be written to in JSON format. If omit, the key metadata will be printed to the console."
  },
  {
    "id": "List and manage Horizon SDO ownership vouchers.",
    "translation": "List and manage Horizon SDO ownership vouchers."
  },
  {
    "id": "List the imported SDO ownership vouchers.",
    "translation": "List the imported SDO ownership vouchers."
  },
  {
    "id": "List the full details of this SDO ownership voucher.",
    "translation": "List the full details of this SDO ownership voucher."
  },
  {
    "id": "When a voucher uuid is specified the full contents of the voucher will be listed, otherwise the full contents of all the imported vouchers will be listed.",
    "translation": "When a voucher uuid is specified the full contents of the voucher will be listed, otherwise the full contents of all the imported vouchers will be listed."
  },
  {
    "id": "Display properties of the SDO ownership voucher.",
    "translation": "Display properties of the SDO ownership voucher."
  },
  {
    "id": "The SDO ownership voucher file.",
    "translation": "The SDO ownership voucher file."
  },
  {
    "id": "Imports the SDO ownership voucher so that the corresponding device can be booted, configured, and registered.",
    "translation": "Imports the SDO ownership voucher so that the corresponding device can be booted, configured, and registered."
  },
  {
    "id": "The SDO ownership voucher file. Must be file type extension: json, tar, tar.gz, tgz, or zip. If it is any of the tar/zip formats, all json files within it will be imported (other files/dirs will be silently ignored).",
    "translation": "The SDO ownership voucher file. Must be file type extension: json, tar, tar.gz, tgz, or zip. If it is any of the tar/zip formats, all json files within it will be imported (other files/dirs will be silently ignored)."
  },
  {
    "id": "Automatically create a node policy that will result in the specified example edge service (for example 'helloworld') being deployed to the edge device associated with this voucher. It is mutually exclusive with --policy and -p.",
    "translation": "Automatically create a node policy that will result in the specified example edge service (for example 'helloworld') being deployed to the edge device associated with this voucher. It is mutually exclusive with --policy and -p."
  },
  {
    "id": "The node policy file to use for the edge device associated with this voucher. It is mutually exclusive with -e and -p. A node policy contains the 'deployment' and 'management' attributes. Please use 'hzn policy new' to see the node policy format.",
    "translation": "The node policy file to use for the edge device associated with this voucher. It is mutually exclusive with -e and -p. A node policy contains the 'deployment' and 'management' attributes. Please use 'hzn policy new' to see the node policy format."
  },
  {
    "id": "The deployment pattern name to use for the edge device associated with this voucher. If the pattern is from a different organization than the node, use the 'other_org/pattern' format. It is mutually exclusive with -e and --policy.",
    "translation": "The deployment pattern name to use for the edge device associated with this voucher. If the pattern is from a different organization than the node, use the 'other_org/pattern' format. It is mutually exclusive with -e and --policy."
  },
  {
    "id": "A JSON file that sets or overrides user input variables needed by the services that will be deployed to the edge device associated with this voucher. Please use 'hzn userinput new' to see the format.",
    "translation": "A JSON file that sets or overrides user input variables needed by the services that will be deployed to the edge device associated with this voucher. Please use 'hzn userinput new' to see the format."
  },
  {
    "id": "The name of the HA group that the edge device associated with this voucher will be added to.",
    "translation": "The name of the HA group that the edge device associated with this voucher will be added to."
  },
  {
    "id": "Download the specified SDO ownership voucher from SDO owner services.",
    "translation": "Download the specified SDO ownership voucher from SDO owner services."
  },
  {
    "id": "The SDO ownership voucher to download.",
    "translation": "The SDO ownership voucher to download."
  },
  {
    "id": "The file that the data of downloaded voucher is written to in JSON format. This flag must be used with -f. If omit, will use default file name in format of <deviceID>.json and save in current directory.",
    "translation": "The file that the data of downloaded voucher is written to in JSON format. This flag must be used with -f. If omit, will use default file name in format of <deviceID>.json and save in current directory."
  },
  {
    "id": "(DEPRECATED) This command is deprecated. Please use 'hzn sdo voucher' to list and manage Horizon SDO ownership vouchers.",
    "translation": "(DEPRECATED) This command is deprecated. Please use 'hzn sdo voucher' to list and manage Horizon SDO ownership vouchers."
  },
  {
    "id": "(DEPRECATED) This command is deprecated. Please use 'hzn sdo voucher list' to list the imported SDO ownership vouchers.",
    "translation": "(DEPRECATED) This command is deprecated. Please use 'hzn sdo voucher list' to list the imported SDO ownership vouchers."
  },
  {
    "id": "(DEPRECATED) This command is deprecated. Please use 'hzn sdo voucher inspect' to display properties of the SDO ownership voucher.",
    "translation": "(DEPRECATED) This command is deprecated. Please use 'hzn sdo voucher inspect' to display properties of the SDO ownership voucher."
  },
  {
    "id": "(DEPRECATED) This command is deprecated. Please use 'hzn sdo voucher import' to import the SDO ownership voucher",
    "translation": "(DEPRECATED) This command is deprecated. Please use 'hzn sdo voucher import' to import the SDO ownership voucher"
  },
  {
    "id": "Horizon user credentials to import a voucher. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default. If you don't prepend it with the user's org, it will automatically be prepended with the -o value.",
    "translation": "Horizon user credentials to import a voucher. If not specified, HZN_EXCHANGE_USER_AUTH will be used as a default. If you don't prepend it with the user's org, it will automatically be prepended with the -o value."
  },
  {
    "id": "The node policy file to use for the edge device associated with this voucher. It is mutually exclusive with -e and -p.",
    "translation": "The node policy file to use for the edge device associated with this voucher. It is mutually exclusive with -e and -p."
  },
  {
    "id": "organization ID must be specified with either the -o flag or HZN_ORG_ID",
    "translation": "organization ID must be specified with either the -o flag or HZN_ORG_ID"
  },
  {
    "id": "exchange user authentication must be specified with either the -u flag or HZN_EXCHANGE_USER_AUTH",
    "translation": "exchange user authentication must be specified with either the -u flag or HZN_EXCHANGE_USER_AUTH"
  },
  {
    "id": "horizon api agreement output did not include 'agreements' key",
    "translation": "horizon api agreement output did not include 'agreements' key"
  },
  {
    "id": "horizon api agreement output did not include '{WhichAgreements}' key",
    "translation": "horizon api agreement output did not include '{WhichAgreements}' key"
  },
  {
    "id": "failed to marshal agreement with index {I}: {Err}",
    "translation": "failed to marshal agreement with index {I}: {Err}"
  },
  {
    "id": "agreement id {AgreementId} not found",
    "translation": "agreement id {AgreementId} not found"
  },
  {
    "id": "failed to marshal 'hzn agreement list' output: {Err}",
    "translation": "failed to marshal 'hzn agreement list' output: {Err}"
  },
  {
    "id": "No active agreements to cancel.",
    "translation": "No active agreements to cancel."
  },
  {
    "id": "either an agreement ID or -a must be specified.",
    "translation": "either an agreement ID or -a must be specified."
  },
  {
    "id": "Canceling agreement {Id} ...",
    "translation": "Canceling agreement {Id} ..."
  },
  {
    "id": "unable to set env var 'HORIZON_URL', error {Err}",
    "translation": "unable to set env var 'HORIZON_URL', error {Err}"
  },
  {
    "id": "failed to marshal 'agreement list' output: {Err}",
    "translation": "failed to marshal 'agreement list' output: {Err}"
  },
  {
    "id": "failed to marshal 'hzn node list' output: {Err}",
    "translation": "failed to marshal 'hzn node list' output: {Err}"
  },
  {
    "id": "org must be specified with -o when pattern name is specified.",
    "translation": "org must be specified with -o when pattern name is specified."
  },
  {
    "id": "failed to marshal output: {Err}",
    "translation": "failed to marshal output: {Err}"
  },
  {
    "id": "{Org} does not exist in the pattern management cache.",
    "translation": "{Org} does not exist in the pattern management cache."
  },
  {
    "id": "{Org}/{Name} does not exist in the pattern management cache.",
    "translation": "{Org}/{Name} does not exist in the pattern management cache."
  },
  {
    "id": "org must be specified with -o when deployment policy name is specified.",
    "translation": "org must be specified with -o when deployment policy name is specified."
  },
  {
    "id": "{Org} does not exist in the deployment policy management cache.",
    "translation": "{Org} does not exist in the deployment policy management cache."
  },
  {
    "id": "{Org}/{Name} does not exist in the deployment policy management cache.",
    "translation": "{Org}/{Name} does not exist in the deployment policy management cache."
  },
  {
    "id": "failed to marshal 'policy list' output: {Err}",
    "translation": "failed to marshal 'policy list' output: {Err}"
  },
  {
    "id": "Error: The organization '{Org}' does not exist.",
    "translation": "Error: The organization '{Org}' does not exist."
  },
  {
    "id": "Error: Either the organization '{Org}' does not exist or the policy '{Name}' is not hosted by this agbot.",
    "translation": "Error: Either the organization '{Org}' does not exist or the policy '{Name}' is not hosted by this agbot."
  },
  {
    "id": "this command can not be run before running 'hzn register'",
    "translation": "this command can not be run before running 'hzn register'"
  },
  {
    "id": "horizon api attributes output did not include 'attributes' key",
    "translation": "horizon api attributes output did not include 'attributes' key"
  },
  {
    "id": "failed to marshal 'hzn attribute list' output: {Err}",
    "translation": "failed to marshal 'hzn attribute list' output: {Err}"
  },
  {
    "id": "Reading configuration file: {ConfigFile}",
    "translation": "Reading configuration file: {ConfigFile}"
  },
  {
    "id": "Unable to read config file: {ConfigFile}. {Err}",
    "translation": "Unable to read config file: {ConfigFile}. {Err}"
  },
  {
    "id": "Unable to decode content of config file {ConfigFile}. {Err}",
    "translation": "Unable to decode content of config file {ConfigFile}. {Err}"
  },
  {
    "id": "Config file does not exist: {ConfigFile}.",
    "translation": "Config file does not exist: {ConfigFile}."
  },
  {
    "id": "Failed to set the environment variable defined in the MetadataVars attribute in file {ConfigFile}. {Err}",
    "translation": "Failed to set the environment variable defined in the MetadataVars attribute in file {ConfigFile}. {Err}"
  },
  {
    "id": "Failed to set the environment variable in top level in file {ConfigFile}. {Err}",
    "translation": "Failed to set the environment variable in top level in file {ConfigFile}. {Err}"
  },
  {
    "id": "Failed to set the environment variable defined in file {ConfigFile}. {Err}",
    "translation": "Failed to set the environment variable defined in file {ConfigFile}. {Err}"
  },
  {
    "id": "Local configuration {LocalConfigFile} has been setup at the beginning of this command. Will not setup twice.",
    "translation": "Local configuration {LocalConfigFile} has been setup at the beginning of this command. Will not setup twice."
  },
  {
    "id": "Failed to set the environment variable from the local configuration file {LocalConfigFile} for file {FilePath}. Error: {Err}",
    "translation": "Failed to set the environment variable from the local configuration file {LocalConfigFile} for file {FilePath}. Error: {Err}"
  },
  {
    "id": "Failed to restore the environment variable after using local configuration file {UseLocalConfig}. {Err}",
    "translation": "Failed to restore the environment variable after using local configuration file {UseLocalConfig}. {Err}"
  },
  {
    "id": "Failed to get the absolute path for file {ConfigFilepkg}. {Err}",
    "translation": "Failed to get the absolute path for file {ConfigFilepkg}. {Err}"
  },
  {
    "id": "Error reading environment variables from file {ConfigFilepkg}. {Err}",
    "translation": "Error reading environment variables from file {ConfigFilepkg}. {Err}"
  },
  {
    "id": "Error reading environment variables from file /etc/default/horizon. {Err}",
    "translation": "Error reading environment variables from file /etc/default/horizon. {Err}"
  },
  {
    "id": "Failed to get the absolute path for file ~/.hzn/hzn.json. {Err}",
    "translation": "Failed to get the absolute path for file ~/.hzn/hzn.json. {Err}"
  },
  {
    "id": "Error getting project level configuration file name. {Err}",
    "translation": "Error getting project level configuration file name. {Err}"
  },
  {
    "id": "No project level configuration file found.",
    "translation": "No project level configuration file found."
  },
  {
    "id": "[verbose] {M}",
    "translation": "[verbose] {M}"
  },
  {
    "id": "Error: {Msg}",
    "translation": "Error: {Msg}"
  },
  {
    "id": "Warning: {Msg}",
    "translation": "Warning: {Msg}"
  },
  {
    "id": "failed to unmarshal bytes from {ErrMsg}: {Err}",
    "translation": "failed to unmarshal bytes from {ErrMsg}: {Err}"
  },
  {
    "id": "failed to marshal data type from {ErrMsg}: {Err}",
    "translation": "failed to marshal data type from {ErrMsg}: {Err}"
  },
  {
    "id": "problem testing api key match: {Err}",
    "translation": "problem testing api key match: {Err}"
  },
  {
    "id": "Using API key",
    "translation": "Using API key"
  },
  {
    "id": "unable to create docker client: {Err}",
    "translation": "unable to create docker client: {Err}"
  },
  {
    "id": "docker auth domainName: {DomainName}",
    "translation": "docker auth domainName: {DomainName}"
  },
  {
    "id": "unable to load docker credentials for {Domain}: {Err}",
    "translation": "unable to load docker credentials for {Domain}: {Err}"
  },
  {
    "id": "unable to find docker credentials for {Domain}",
    "translation": "unable to find docker credentials for {Domain}"
  },
  {
    "id": "Pushing {ImageName}...",
    "translation": "Pushing {ImageName}..."
  },
  {
    "id": "could not get docker credentials from ~/.docker/config.json: {Err}. Maybe you need to run 'docker login ...' to provide credentials for the image registry.",
    "translation": "could not get docker credentials from ~/.docker/config.json: {Err}. Maybe you need to run 'docker login ...' to provide credentials for the image registry."
  },
  {
    "id": "unable to push docker image {Repository____tag}: {Err}",
    "translation": "unable to push docker image {Repository____tag}: {Err}"
  },
  {
    "id": "Pulling {ImageName}...",
    "translation": "Pulling {ImageName}..."
  },
  {
    "id": "unable to get docker auth for docker.io or {Domain} domain: {Err}",
    "translation": "unable to get docker auth for docker.io or {Domain} domain: {Err}"
  },
  {
    "id": "unable to pull docker image {Repository____tag}. Docker credentials were not found. Maybe you need to run 'docker login ...' if the image registry is private. Error: {Err}: {LoginErr}",
    "translation": "unable to pull docker image {Repository____tag}. Docker credentials were not found. Maybe you need to run 'docker login ...' if the image registry is private. Error: {Err}: {LoginErr}"
  },
  {
    "id": "unable to pull docker image {Repository____tag}: {Err}",
    "translation": "unable to pull docker image {Repository____tag}: {Err}"
  },
  {
    "id": "Could not find the image digest in the docker output, retrieving image digest directly from the image.",
    "translation": "Could not find the image digest in the docker output, retrieving image digest directly from the image."
  },
  {
    "id": "could not inspect image {ImageName}: {Err}.",
    "translation": "could not inspect image {ImageName}: {Err}."
  },
  {
    "id": "could not find digest for image {ImageName}.",
    "translation": "could not find digest for image {ImageName}."
  },
  {
    "id": "the id can not contain more than 1 '/'",
    "translation": "the id can not contain more than 1 '/'"
  },
  {
    "id": "reading stdin failed: {Err}",
    "translation": "reading stdin failed: {Err}"
  },
  {
    "id": "reading {FilePath} failed: {Err}",
    "translation": "reading {FilePath} failed: {Err}"
  },
  {
    "id": "Warning: environment variable '{EnvVarName}' is referenced in input file, but not defined in the environment.",
    "translation": "Warning: environment variable '{EnvVarName}' is referenced in input file, but not defined in the environment."
  },
  {
    "id": "Error reading input, error {Err}",
    "translation": "Error reading input, error {Err}"
  },
  {
    "id": "Exiting.",
    "translation": "Exiting."
  },
  {
    "id": "Failed to get absolute path for file {KeyFile}. {Err}",
    "translation": "Failed to get absolute path for file {KeyFile}. {Err}"
  },
  {
    "id": "Error checking absolute path for file {KeyFile}. {Err}",
    "translation": "Error checking absolute path for file {KeyFile}. {Err}"
  },
  {
    "id": "Error parsing HORIZON_URL: {Err}",
    "translation": "Error parsing HORIZON_URL: {Err}"
  },
  {
    "id": "Error parsing host of the HORIZON_URL: {Err}",
    "translation": "Error parsing host of the HORIZON_URL: {Err}"
  },
  {
    "id": "Error parsing port of the HORIZON_URL: {Err}",
    "translation": "Error parsing port of the HORIZON_URL: {Err}"
  },
  {
    "id": "Unexpected port of the HORIZON_URL: {PortInt}",
    "translation": "Unexpected port of the HORIZON_URL: {PortInt}"
  },
  {
    "id": "The agbot url: {EnvVar}",
    "translation": "The agbot url: {EnvVar}"
  },
  {
    "id": "Error reading HTTP response, error {Err}",
    "translation": "Error reading HTTP response, error {Err}"
  },
  {
    "id": "Can't connect to the Horizon REST API to run {ApiMethod}. Run '{StatusCommand}' to check if the Horizon agent is running. Or run '{StatusURL}' to check the Horizon agent status. Or set HORIZON_URL to connect to another local port that is connected to a remote Horizon agent via a ssh tunnel. Specific error is: {Err}",
    "translation": "Can't connect to the Horizon REST API to run {ApiMethod}. Run '{StatusCommand}' to check if the Horizon agent is running. Or run '{StatusURL}' to check the Horizon agent status. Or set HORIZON_URL to connect to another local port that is connected to a remote Horizon agent via a ssh tunnel. Specific error is: {Err}"
  },
  {
    "id": "Can't connect to the Horizon REST API to run {ApiMethod}. Maybe the ssh tunnel associated with that port is down? Or maybe the remote Horizon agent at the other end of that tunnel is down. Specific error is: {Err}",
    "translation": "Can't connect to the Horizon REST API to run {ApiMethod}. Maybe the ssh tunnel associated with that port is down? Or maybe the remote Horizon agent at the other end of that tunnel is down. Specific error is: {Err}"
  },
  {
    "id": "{ApiMsg} new request failed: {Err}",
    "translation": "{ApiMsg} new request failed: {Err}"
  },
  {
    "id": "HTTP code: {HttpCode}",
    "translation": "HTTP code: {HttpCode}"
  },
  {
    "id": "Bad HTTP code from {ApiMsg}: {HttpCode}",
    "translation": "Bad HTTP code from {ApiMsg}: {HttpCode}"
  },
  {
    "id": "bad HTTP code from {ApiMsg}: {HttpCode}",
    "translation": "bad HTTP code from {ApiMsg}: {HttpCode}"
  },
  {
    "id": "Failed to read body response from {ApiMsg}: {Err}",
    "translation": "Failed to read body response from {ApiMsg}: {Err}"
  },
  {
    "id": "failed to read body response from {ApiMsg}: {Err}",
    "translation": "failed to read body response from {ApiMsg}: {Err}"
  },
  {
    "id": "Failed to unmarshal body response from {ApiMsg}: {Err}",
    "translation": "Failed to unmarshal body response from {ApiMsg}: {Err}"
  },
  {
    "id": "failed to unmarshal body response from {ApiMsg}: {Err}",
    "translation": "failed to unmarshal body response from {ApiMsg}: {Err}"
  },
  {
    "id": "bad HTTP code {HttpCode} from {ApiMsg}: {Body}",
    "translation": "bad HTTP code {HttpCode} from {ApiMsg}: {Body}"
  },
  {
    "id": "failed to marshal body for {ApiMsg}: {Err}",
    "translation": "failed to marshal body for {ApiMsg}: {Err}"
  },
  {
    "id": "HZN_AGBOT_URL is not defined",
    "translation": "HZN_AGBOT_URL is not defined"
  },
  {
    "id": "bad HTTP code {HttpCode} from {ApiMsg}, output: {StringbodyBytes}",
    "translation": "bad HTTP code {HttpCode} from {ApiMsg}, output: {StringbodyBytes}"
  },
  {
    "id": "failed to unmarshal exchange body response from {ApiMsg}: {Err}",
    "translation": "failed to unmarshal exchange body response from {ApiMsg}: {Err}"
  },
  {
    "id": "failed to marshal exchange output from {ApiMsg}: {Err}",
    "translation": "failed to marshal exchange output from {ApiMsg}: {Err}"
  },
  {
    "id": "Failed to unmarshal bytes. {Err}",
    "translation": "Failed to unmarshal bytes. {Err}"
  },
  {
    "id": "Error getting {OldMgmtHubCertPath} from {ANAXOVERWRITEFILE}: {Err}",
    "translation": "Error getting {OldMgmtHubCertPath} from {ANAXOVERWRITEFILE}: {Err}"
  },
  {
    "id": "Encountered error reading ICP cert file {IcpCertPath}: {Err}",
    "translation": "Encountered error reading ICP cert file {IcpCertPath}: {Err}"
  },
  {
    "id": "Error getting HZN_EXCHANGE_URL from {ANAXOVERWRITEFILE}. {Err}",
    "translation": "Error getting HZN_EXCHANGE_URL from {ANAXOVERWRITEFILE}. {Err}"
  },
  {
    "id": "Error getting ExchangeUrl from {ANAXCONFIGFILE}. {Err}",
    "translation": "Error getting ExchangeUrl from {ANAXCONFIGFILE}. {Err}"
  },
  {
    "id": "HZN_EXCHANGE_URL is not set, get it from horizon agent configuration on the node.",
    "translation": "HZN_EXCHANGE_URL is not set, get it from horizon agent configuration on the node."
  },
  {
    "id": "Could not get the Exchange url from environment variable HZN_EXCHANGE_URL or the horizon agent",
    "translation": "Could not get the Exchange url from environment variable HZN_EXCHANGE_URL or the horizon agent"
  },
  {
    "id": "The exchange url: {ExchUrl}",
    "translation": "The exchange url: {ExchUrl}"
  },
  {
    "id": "Error getting HZN_FSS_CSSURL from {ANAXOVERWRITEFILE}. {Err}",
    "translation": "Error getting HZN_FSS_CSSURL from {ANAXOVERWRITEFILE}. {Err}"
  },
  {
    "id": "Error getting model management service Url from {ANAXCONFIGFILE}. {Err}",
    "translation": "Error getting model management service Url from {ANAXCONFIGFILE}. {Err}"
  },
  {
    "id": "HZN_FSS_CSSURL is not set, get it from horizon agent configuration on the node.",
    "translation": "HZN_FSS_CSSURL is not set, get it from horizon agent configuration on the node."
  },
  {
    "id": "Could not get the model management service url from environment variable HZN_FSS_CSSURL or the horizon agent",
    "translation": "Could not get the model management service url from environment variable HZN_FSS_CSSURL or the horizon agent"
  },
  {
    "id": "The model management service url: {MmsUrl}",
    "translation": "The model management service url: {MmsUrl}"
  },
  {
    "id": "HZN_SDO_SVC_URL is not set, get it from {ANAXOVERWRITEFILE}.",
    "translation": "HZN_SDO_SVC_URL is not set, get it from {ANAXOVERWRITEFILE}."
  },
  {
    "id": "Error getting HZN_SDO_SVC_URL from {ANAXOVERWRITEFILE}: {Err}",
    "translation": "Error getting HZN_SDO_SVC_URL from {ANAXOVERWRITEFILE}: {Err}"
  },
  {
    "id": "Could not get the HZN_SDO_SVC_URL value from the environment, {ANAXOVERWRITEFILE}, or one of the hzn.json files",
    "translation": "Could not get the HZN_SDO_SVC_URL value from the environment, {ANAXOVERWRITEFILE}, or one of the hzn.json files"
  },
  {
    "id": "The SDO service url: {SdoUrl}",
    "translation": "The SDO service url: {SdoUrl}"
  },
  {
    "id": "Can't connect to the Horizon {HorizonService} REST API to run {ApiMethod}. Set {ServiceEnvVarName} to use {Article} {HorizonService_1} other than the one the Horizon Agent is currently configured for. Specific error is: {Err}",
    "translation": "Can't connect to the Horizon {HorizonService} REST API to run {ApiMethod}. Set {ServiceEnvVarName} to use {Article} {HorizonService_1} other than the one the Horizon Agent is currently configured for. Specific error is: {Err}"
  },
  {
    "id": "Can't connect to the Horizon {HorizonService} REST API to run {ApiMethod}. Maybe {ServiceEnvVarName} is set incorrectly? Or unset {ServiceEnvVarName_1} to use the {HorizonService_1} that the Horizon Agent is configured for. Specific error is: {Err}",
    "translation": "Can't connect to the Horizon {HorizonService} REST API to run {ApiMethod}. Maybe {ServiceEnvVarName} is set incorrectly? Or unset {ServiceEnvVarName_1} to use the {HorizonService_1} that the Horizon Agent is configured for. Specific error is: {Err}"
  },
  {
    "id": "failed to marshal exchange body for {ApiMsg}: {Err}",
    "translation": "failed to marshal exchange body for {ApiMsg}: {Err}"
  },
  {
    "id": "Failed to get file info: {Err}",
    "translation": "Failed to get file info: {Err}"
  },
  {
    "id": "Malformed URL: {UrlPath}. {ErrUrl}",
    "translation": "Malformed URL: {UrlPath}. {ErrUrl}"
  },
  {
    "id": "unable to open object file {Name}: {Err}",
    "translation": "unable to open object file {Name}: {Err}"
  },
  {
    "id": "Encountered HTTP error: {Err} calling {Service} REST API {ApiMsg}. HTTP status: {Httpstatus}. Will retry.",
    "translation": "Encountered HTTP error: {Err} calling {Service} REST API {ApiMsg}. HTTP status: {Httpstatus}. Will retry."
  },
  {
    "id": "Encountered HTTP error: {Err} calling {Service} REST API {ApiMsg}. HTTP status: {Httpstatus}.",
    "translation": "Encountered HTTP error: {Err} calling {Service} REST API {ApiMsg}. HTTP status: {Httpstatus}."
  },
  {
    "id": "failed to read exchange body response from {ApiMsg}: {Err}",
    "translation": "failed to read exchange body response from {ApiMsg}: {Err}"
  },
  {
    "id": "bad HTTP code {HttpCode} from {ApiMsg}: {Code}, {Msg}",
    "translation": "bad HTTP code {HttpCode} from {ApiMsg}: {Code}, {Msg}"
  },
  {
    "id": "bad HTTP code {HttpCode} from {ApiMsg}",
    "translation": "bad HTTP code {HttpCode} from {ApiMsg}"
  },
  {
    "id": "exchange authentication must be specified with one of the following: the -u flag, the -n flag, HZN_EXCHANGE_USER_AUTH or HZN_EXCHANGE_NODE_AUTH",
    "translation": "exchange authentication must be specified with one of the following: the -u flag, the -n flag, HZN_EXCHANGE_USER_AUTH or HZN_EXCHANGE_NODE_AUTH"
  },
  {
    "id": "exchange authentication must be specified with one of the following: the -u flag, or HZN_EXCHANGE_USER_AUTH",
    "translation": "exchange authentication must be specified with one of the following: the -u flag, or HZN_EXCHANGE_USER_AUTH"
  },
  {
    "id": "Verifying public key file ...",
    "translation": "Verifying public key file ..."
  },
  {
    "id": "provided public key is not valid; error: {Err}",
    "translation": "provided public key is not valid; error: {Err}"
  },
  {
    "id": "Checking private key file format ...",
    "translation": "Checking private key file format ..."
  },
  {
    "id": "provided private key {KeyFile} is not valid; error: {Err}",
    "translation": "provided private key {KeyFile} is not valid; error: {Err}"
  },
  {
    "id": "{Err}. Please create the signing key.",
    "translation": "{Err}. Please create the signing key."
  },
  {
    "id": "private key could not be generated; error: {Err}",
    "translation": "private key could not be generated; error: {Err}"
  },
  {
    "id": "{Arg_1}. Public key could not be generated.",
    "translation": "{Arg_1}. Public key could not be generated."
  },
  {
    "id": "running: {CmdStr}",
    "translation": "running: {CmdStr}"
  },
  {
    "id": "did not get a command object",
    "translation": "did not get a command object"
  },
  {
    "id": "Could not get Stdin pipe, error: {Err}",
    "translation": "Could not get Stdin pipe, error: {Err}"
  },
  {
    "id": "could not retrieve output from command, error: {Err}",
    "translation": "could not retrieve output from command, error: {Err}"
  },
  {
    "id": "could not retrieve stderr from command, error: {Err}",
    "translation": "could not retrieve stderr from command, error: {Err}"
  },
  {
    "id": "Unable to start command, error: {Err}",
    "translation": "Unable to start command, error: {Err}"
  },
  {
    "id": "Unable to write to stdin of command, error: {Err}",
    "translation": "Unable to write to stdin of command, error: {Err}"
  },
  {
    "id": "Unable to close stdin, error: {Err}",
    "translation": "Unable to close stdin, error: {Err}"
  },
  {
    "id": "could not read stdout, error: {Err}",
    "translation": "could not read stdout, error: {Err}"
  },
  {
    "id": "could not read stderr, error: {Err}",
    "translation": "could not read stderr, error: {Err}"
  },
  {
    "id": "command failed: {Err}, stderr: {StringstderrBytes}",
    "translation": "command failed: {Err}, stderr: {StringstderrBytes}"
  },
  {
    "id": "Unable to use {HTTPRequestTimeoutOverride} to set the request timeout, the value is not a valid number: {EnvTimeout}",
    "translation": "Unable to use {HTTPRequestTimeoutOverride} to set the request timeout, the value is not a valid number: {EnvTimeout}"
  },
  {
    "id": "HTTP request timeout set to {RequestTimeout} seconds",
    "translation": "HTTP request timeout set to {RequestTimeout} seconds"
  },
  {
    "id": "Error converting environmental variable HZN_HTTP_RETRIES {MaxRetriess} to integer. {Err1}",
    "translation": "Error converting environmental variable HZN_HTTP_RETRIES {MaxRetriess} to integer. {Err1}"
  },
  {
    "id": "Error converting environmental variable HZN_HTTP_RETRY_INTERVAL {RetryIntervals} to integer. {Err1}",
    "translation": "Error converting environmental variable HZN_HTTP_RETRY_INTERVAL {RetryIntervals} to integer. {Err1}"
  },
  {
    "id": "File {FileName} already exists. Please specify a different file path or file name. To overwrite the existing file, use the '--overwrite' flag.",
    "translation": "File {FileName} already exists. Please specify a different file path or file name. To overwrite the existing file, use the '--overwrite' flag."
  },
  {
    "id": "Failed to save data for object '{DefaultFileName}' to file {FileName}, err: {Err}",
    "translation": "Failed to save data for object '{DefaultFileName}' to file {FileName}, err: {Err}"
  },
  {
    "id": "{Image} parsed into: domain={Domain}, path={Path}, tag={Tag}",
    "translation": "{Image} parsed into: domain={Domain}, path={Path}, tag={Tag}"
  },
  {
    "id": "Warning: could not parse image path '{Image}'. Not pushing it to a docker registry, just including it in the 'deployment' field as-is.",
    "translation": "Warning: could not parse image path '{Image}'. Not pushing it to a docker registry, just including it in the 'deployment' field as-is."
  },
  {
    "id": "Docker pull failure: {Err}",
    "translation": "Docker pull failure: {Err}"
  },
  {
    "id": "Provided log-driver ({LogDriver}) does not support logs viewing. Logs are only available on the following drivers: {DockerDriversWithLoggingSupport}",
    "translation": "Provided log-driver ({LogDriver}) does not support logs viewing. Logs are only available on the following drivers: {DockerDriversWithLoggingSupport}"
  },
  {
    "id": "Problem validating org name: {Err}",
    "translation": "Problem validating org name: {Err}"
  },
  {
    "id": "Error creating StdoutPipe for command: {Err}",
    "translation": "Error creating StdoutPipe for command: {Err}"
  },
  {
    "id": "Error starting command: {Err}",
    "translation": "Error starting command: {Err}"
  },
  {
    "id": "Error waiting for command: {Err}",
    "translation": "Error waiting for command: {Err}"
  },
  {
    "id": "{SysLogPath} could not be opened or does not exist: {Err}",
    "translation": "{SysLogPath} could not be opened or does not exist: {Err}"
  },
  {
    "id": "{SysLogPath} could not get stats: {Err}",
    "translation": "{SysLogPath} could not get stats: {Err}"
  },
  {
    "id": "Error reading from {SysLogPath}: {Err}",
    "translation": "Error reading from {SysLogPath}: {Err}"
  },
  {
    "id": "Unable to state {SysLogPath}: {Err}",
    "translation": "Unable to state {SysLogPath}: {Err}"
  },
  {
    "id": "Neither node id nor node policy is specified. Getting node policy from the local node.",
    "translation": "Neither node id nor node policy is specified. Getting node policy from the local node."
  },
  {
    "id": "Neither node id nor node user input file is specified. Getting node user input from the local node.",
    "translation": "Neither node id nor node user input file is specified. Getting node user input from the local node."
  },
  {
    "id": "No node type has been provided: node type of '{NodeId}' node will be used",
    "translation": "No node type has been provided: node type of '{NodeId}' node will be used"
  },
  {
    "id": "Using compatibility checking input: {CompCheckInput}",
    "translation": "Using compatibility checking input: {CompCheckInput}"
  },
  {
    "id": "failed to marshal 'hzn deploycheck all' output: {Err}",
    "translation": "failed to marshal 'hzn deploycheck all' output: {Err}"
  },
  {
    "id": "Please specify either deployment policy or pattern.",
    "translation": "Please specify either deployment policy or pattern."
  },
  {
    "id": "One of these flags must be specified: -b, -B, -p, or -P.",
    "translation": "One of these flags must be specified: -b, -B, -p, or -P."
  },
  {
    "id": "-n and --ha-group are mutually exclusive.",
    "translation": "-n and --ha-group are mutually exclusive."
  },
  {
    "id": "--ha-group and --node-pol are mutually exclusive.",
    "translation": "--ha-group and --node-pol are mutually exclusive."
  },
  {
    "id": "--ha-group and --node-ui are mutually exclusive.",
    "translation": "--ha-group and --node-ui are mutually exclusive."
  },
  {
    "id": "The HA group {HaGroupName} does not have members.",
    "translation": "The HA group {HaGroupName} does not have members."
  },
  {
    "id": "-n and --node-pol are mutually exclusive.",
    "translation": "-n and --node-pol are mutually exclusive."
  },
  {
    "id": "-n and --node-ui are mutually exclusive.",
    "translation": "-n and --node-ui are mutually exclusive."
  },
  {
    "id": "-b and -B are mutually exclusive.",
    "translation": "-b and -B are mutually exclusive."
  },
  {
    "id": "-p and -P are mutually exclusive.",
    "translation": "-p and -P are mutually exclusive."
  },
  {
    "id": "Cannot use the local node because it is not registered.",
    "translation": "Cannot use the local node because it is not registered."
  },
  {
    "id": "The node architecture {InputArch} specified by -a does not match the architecture of the local node {Arch}.",
    "translation": "The node architecture {InputArch} specified by -a does not match the architecture of the local node {Arch}."
  },
  {
    "id": "The node type {InputType} specified by -t does not match the type of the local node {NodeType}.",
    "translation": "The node type {InputType} specified by -t does not match the type of the local node {NodeType}."
  },
  {
    "id": "The node organization {InputType} specified by -O does not match the organization of the local node {NodeOrg}.",
    "translation": "The node organization {InputType} specified by -O does not match the organization of the local node {NodeOrg}."
  },
  {
    "id": "failed to unmarshal deployment policy json input file {BusinessPolFile}: {Err}",
    "translation": "failed to unmarshal deployment policy json input file {BusinessPolFile}: {Err}"
  },
  {
    "id": "Deployment policy not found for {PolOrg}/{PolId}",
    "translation": "Deployment policy not found for {PolOrg}/{PolId}"
  },
  {
    "id": "Wrong node type specified: {NodeType}. It must be 'device' or 'cluster'.",
    "translation": "Wrong node type specified: {NodeType}. It must be 'device' or 'cluster'."
  },
  {
    "id": "HA group {HaGroupName} does not exist in org {HaGroupOrg}.",
    "translation": "HA group {HaGroupName} does not exist in org {HaGroupOrg}."
  },
  {
    "id": "failed to unmarshal json input file {FilePath}: {Err}",
    "translation": "failed to unmarshal json input file {FilePath}: {Err}"
  },
  {
    "id": "failed to marshal 'hzn deploycheck policy' output: {Err}",
    "translation": "failed to marshal 'hzn deploycheck policy' output: {Err}"
  },
  {
    "id": "Either -b or -B must be specified.",
    "translation": "Either -b or -B must be specified."
  },
  {
    "id": "-b and --service are mutually exclusive.",
    "translation": "-b and --service are mutually exclusive."
  },
  {
    "id": "Please specify the Exchange credential with -u for querying the node, deployment policy, service and service policy.",
    "translation": "Please specify the Exchange credential with -u for querying the node, deployment policy, service and service policy."
  },
  {
    "id": "Please specify the organization with -o for the Exchange credentials: {CredToUse}.",
    "translation": "Please specify the organization with -o for the Exchange credentials: {CredToUse}."
  },
  {
    "id": "Node architecture, organization or type is not specified and node ID is not specified. Getting the node information from the local node.",
    "translation": "Node architecture, organization or type is not specified and node ID is not specified. Getting the node information from the local node."
  },
  {
    "id": "failed to marshal 'hzn deploycheck secretbinding' output: {Err}",
    "translation": "failed to marshal 'hzn deploycheck secretbinding' output: {Err}"
  },
  {
    "id": "Error unmarshaling service json file {FilePath}: {Err}",
    "translation": "Error unmarshaling service json file {FilePath}: {Err}"
  },
  {
    "id": "Error unmarshaling userInput json file: {Err}",
    "translation": "Error unmarshaling userInput json file: {Err}"
  },
  {
    "id": "failed to marshal 'hzn deploycheck userinput' output: {Err}",
    "translation": "failed to marshal 'hzn deploycheck userinput' output: {Err}"
  },
  {
    "id": "URL must be specified in the service definition.",
    "translation": "URL must be specified in the service definition."
  },
  {
    "id": "Version must be specified in the service definition.",
    "translation": "Version must be specified in the service definition."
  },
  {
    "id": "Invalid version format: {Version}.",
    "translation": "Invalid version format: {Version}."
  },
  {
    "id": "Arch must be specified in the service definition.",
    "translation": "Arch must be specified in the service definition."
  },
  {
    "id": "Error in service file {Sfile}. {Err}",
    "translation": "Error in service file {Sfile}. {Err}"
  },
  {
    "id": "failed to unmarshal pattern json input file {PatternFile}: {Err}",
    "translation": "failed to unmarshal pattern json input file {PatternFile}: {Err}"
  },
  {
    "id": "Pattern not found for {PatOrg}/{PatId}",
    "translation": "Pattern not found for {PatOrg}/{PatId}"
  },
  {
    "id": "The service {Org}/{URL} {Arch} {Version} specified in file {SvcDefFilesi} does not match the pattern requirement.",
    "translation": "The service {Org}/{URL} {Arch} {Version} specified in file {SvcDefFilesi} does not match the pattern requirement."
  },
  {
    "id": "The service {Org}/{URL} {Arch} {Version} specified in file {SvcDefFilesi} does not match the deployment policy requirement.",
    "translation": "The service {Org}/{URL} {Arch} {Version} specified in file {SvcDefFilesi} does not match the deployment policy requirement."
  },
  {
    "id": "New dependency created: {Target} .",
    "translation": "New dependency created: {Target} ."
  },
  {
    "id": "'{DEPENDENCYCOMMAND} {DEPENDENCYLISTCOMMAND}' unable to create json object from dependencies, {Err}",
    "translation": "'{DEPENDENCYCOMMAND} {DEPENDENCYLISTCOMMAND}' unable to create json object from dependencies, {Err}"
  },
  {
    "id": "Unable to set env var 'HZN_DONT_SUBST_ENV_VARS', error {Err}",
    "translation": "Unable to set env var 'HZN_DONT_SUBST_ENV_VARS', error {Err}"
  },
  {
    "id": "Unable to restore env var 'HZN_DONT_SUBST_ENV_VARS', error {Err}",
    "translation": "Unable to restore env var 'HZN_DONT_SUBST_ENV_VARS', error {Err}"
  },
  {
    "id": "unable to get list of dependency files in {DepPath}, error: {Err}",
    "translation": "unable to get list of dependency files in {DepPath}, error: {Err}"
  },
  {
    "id": "could not create dependency directory {NewDir}, error: {Err}",
    "translation": "could not create dependency directory {NewDir}, error: {Err}"
  },
  {
    "id": "dependency validation failed, unable to read {Name}, error: {Err}",
    "translation": "dependency validation failed, unable to read {Name}, error: {Err}"
  },
  {
    "id": "dependency validation failed, dependency {Name} has an invalid version {Version}, error: {Err}",
    "translation": "dependency validation failed, dependency {Name} has an invalid version {Version}, error: {Err}"
  },
  {
    "id": "dependency validation failed, unable to verify version range {Version} is within required range {Expression}, error: {Err}",
    "translation": "dependency validation failed, unable to verify version range {Version} is within required range {Expression}, error: {Err}"
  },
  {
    "id": "dependency {URL} at version {VersionRange} does not exist in {Joindirectory_DEFAULTDEPENDENCYDIR}.",
    "translation": "dependency {URL} at version {VersionRange} does not exist in {Joindirectory_DEFAULTDEPENDENCYDIR}."
  },
  {
    "id": "dependency {Name} did not validate, error: {Err}",
    "translation": "dependency {Name} did not validate, error: {Err}"
  },
  {
    "id": "variable {Name} has no default and must be specified in {UserInputsFilePath}",
    "translation": "variable {Name} has no default and must be specified in {UserInputsFilePath}"
  },
  {
    "id": "--specRef is mutually exclusive with --url.",
    "translation": "--specRef is mutually exclusive with --url."
  },
  {
    "id": "--project is mutually exclusive with --specRef, --org and --url.",
    "translation": "--project is mutually exclusive with --specRef, --org and --url."
  },
  {
    "id": "one of --project, or --specRef and --org, or --url and --org must be specified.",
    "translation": "one of --project, or --specRef and --org, or --url and --org must be specified."
  },
  {
    "id": "either --specRef and --org, or --url and --org must be specified.",
    "translation": "either --specRef and --org, or --url and --org must be specified."
  },
  {
    "id": "use --url with service projects.",
    "translation": "use --url with service projects."
  },
  {
    "id": "--project {Project} does not contain Horizon service metadata.",
    "translation": "--project {Project} does not contain Horizon service metadata."
  },
  {
    "id": "Reading Horizon metadata from {Dir}",
    "translation": "Reading Horizon metadata from {Dir}"
  },
  {
    "id": "--specRef or --url is required for remove.",
    "translation": "--specRef or --url is required for remove."
  },
  {
    "id": "--specRef and --url are mutually exclusive.",
    "translation": "--specRef and --url are mutually exclusive."
  },
  {
    "id": "Service project {Dir} verified.",
    "translation": "Service project {Dir} verified."
  },
  {
    "id": "Unable to set env var 'HZN_DONT_SUBST_ENV_VARS' to zero, error {Err}",
    "translation": "Unable to set env var 'HZN_DONT_SUBST_ENV_VARS' to zero, error {Err}"
  },
  {
    "id": "Failed to get the hzn.json configuration file under {Project} directory. Error: {Err}",
    "translation": "Failed to get the hzn.json configuration file under {Project} directory. Error: {Err}"
  },
  {
    "id": "Failed to set the environment variables from configuration file {Projconfigfile}. Error: {Err}",
    "translation": "Failed to set the environment variables from configuration file {Projconfigfile}. Error: {Err}"
  },
  {
    "id": "Reading Horizon metadata from dependency: {AbsProject}",
    "translation": "Reading Horizon metadata from dependency: {AbsProject}"
  },
  {
    "id": "Found dependency {URL}, Org: {Org}",
    "translation": "Found dependency {URL}, Org: {Org}"
  },
  {
    "id": "Failed to restore the environment variables. {Err}",
    "translation": "Failed to restore the environment variables. {Err}"
  },
  {
    "id": "Updated {HomeDirectory}/{USERINPUTFILE} with the dependency's variable and global attribute configuration.",
    "translation": "Updated {HomeDirectory}/{USERINPUTFILE} with the dependency's variable and global attribute configuration."
  },
  {
    "id": "To ensure that the dependency operates correctly, please add variable values to the userinput.json file if this service needs any.",
    "translation": "To ensure that the dependency operates correctly, please add variable values to the userinput.json file if this service needs any."
  },
  {
    "id": "The current project already has userinputs defined for this dependency.",
    "translation": "The current project already has userinputs defined for this dependency."
  },
  {
    "id": "Updated {HomeDirectory}/{USERINPUTFILE} with the dependency's variable configuration.",
    "translation": "Updated {HomeDirectory}/{USERINPUTFILE} with the dependency's variable configuration."
  },
  {
    "id": "no service definition config file found in project",
    "translation": "no service definition config file found in project"
  },
  {
    "id": "no dependency directory found in project",
    "translation": "no dependency directory found in project"
  },
  {
    "id": "Created {FilePath}/{FileName} as a new dependency.",
    "translation": "Created {FilePath}/{FileName} as a new dependency."
  },
  {
    "id": "unable to find highest version of {Surl} {Org} in the Exchange: {Services}",
    "translation": "unable to find highest version of {Surl} {Org} in the Exchange: {Services}"
  },
  {
    "id": "no services found in the Exchange.",
    "translation": "no services found in the Exchange."
  },
  {
    "id": "Creating dependency on: {ServiceDef}, Org: {Org}",
    "translation": "Creating dependency on: {ServiceDef}, Org: {Org}"
  },
  {
    "id": "failed to unmarshal deployment {Deployment}: {Err}",
    "translation": "failed to unmarshal deployment {Deployment}: {Err}"
  },
  {
    "id": "The image docker auths for the service {Org}/{Surl} are: {Imgauths}",
    "translation": "The image docker auths for the service {Org}/{Surl} are: {Imgauths}"
  },
  {
    "id": "failed to get images for {Org}/{Surl}: {Err}",
    "translation": "failed to get images for {Org}/{Surl}: {Err}"
  },
  {
    "id": "Unable to get dependency info for {Sp} , error {Err}",
    "translation": "Unable to get dependency info for {Sp} , error {Err}"
  },
  {
    "id": "'dependency {DEPENDENCYREMOVECOMMAND}' failed to get a list of dependecies. Error {Err}",
    "translation": "'dependency {DEPENDENCYREMOVECOMMAND}' failed to get a list of dependecies. Error {Err}"
  },
  {
    "id": "All dependencies are: {Deps}",
    "translation": "All dependencies are: {Deps}"
  },
  {
    "id": "Found dependency: {Name}",
    "translation": "Found dependency: {Name}"
  },
  {
    "id": "Will not remove dependency {Name} because it is referenced by other services.",
    "translation": "Will not remove dependency {Name} because it is referenced by other services."
  },
  {
    "id": "'dependency {DEPENDENCYREMOVECOMMAND}' dependency not found.",
    "translation": "'dependency {DEPENDENCYREMOVECOMMAND}' dependency not found."
  },
  {
    "id": "Could not read the dependency file {Name}. Error: {Err}",
    "translation": "Could not read the dependency file {Name}. Error: {Err}"
  },
  {
    "id": "Error updating project definition: {Err}",
    "translation": "Error updating project definition: {Err}"
  },
  {
    "id": "Dependency {Name} could not be removed. Error: {Err}",
    "translation": "Dependency {Name} could not be removed. Error: {Err}"
  },
  {
    "id": "Error updating userinputs: {Err}",
    "translation": "Error updating userinputs: {Err}"
  },
  {
    "id": "Removed dependency {Arch}.",
    "translation": "Removed dependency {Arch}."
  },
  {
    "id": "Removed dependency's dependency {Arch}.",
    "translation": "Removed dependency's dependency {Arch}."
  },
  {
    "id": "error creating {DOCKERFILE} for service image. {Err}",
    "translation": "error creating {DOCKERFILE} for service image. {Err}"
  },
  {
    "id": "Edge $SERVICE_NAME Service Pattern for $ARCH",
    "translation": "Edge $SERVICE_NAME Service Pattern for $ARCH"
  },
  {
    "id": "Pattern for $SERVICE_NAME for $ARCH",
    "translation": "Pattern for $SERVICE_NAME for $ARCH"
  },
  {
    "id": "Edge $SERVICE_NAME Service Pattern for all architectures",
    "translation": "Edge $SERVICE_NAME Service Pattern for all architectures"
  },
  {
    "id": "Pattern for $SERVICE_NAME",
    "translation": "Pattern for $SERVICE_NAME"
  },
  {
    "id": "Warning: Failed to convert file name {SvcPath} to absolute path. {Err}",
    "translation": "Warning: Failed to convert file name {SvcPath} to absolute path. {Err}"
  },
  {
    "id": "Warning: Secret {SecName} for service {SvcName} not specified with {SERVICESTARTCOMMAND} command.",
    "translation": "Warning: Secret {SecName} for service {SvcName} not specified with {SERVICESTARTCOMMAND} command."
  },
  {
    "id": "'{SERVICECOMMAND} {SERVICECREATIONCOMMAND}' Failed to get the service name from the image name. {Err}",
    "translation": "'{SERVICECOMMAND} {SERVICECREATIONCOMMAND}' Failed to get the service name from the image name. {Err}"
  },
  {
    "id": "Creating config file for environmental variables: {Dir}/{HZNENVFILE}",
    "translation": "Creating config file for environmental variables: {Dir}/{HZNENVFILE}"
  },
  {
    "id": "Creating user input file: {Dir}/{USERINPUTFILE}",
    "translation": "Creating user input file: {Dir}/{USERINPUTFILE}"
  },
  {
    "id": "Creating secrets file: {Dir}/{SECRETSFILE}",
    "translation": "Creating secrets file: {Dir}/{SECRETSFILE}"
  },
  {
    "id": "Creating service definition file: {Dir}/{SERVICEDEFINITIONFILE}",
    "translation": "Creating service definition file: {Dir}/{SERVICEDEFINITIONFILE}"
  },
  {
    "id": "Creating pattern definition file: {Dir}/{PATTERNDEFINITIONFILE}",
    "translation": "Creating pattern definition file: {Dir}/{PATTERNDEFINITIONFILE}"
  },
  {
    "id": "Creating service policy file: {Dir}/{SERVICEPOLICYFILE}",
    "translation": "Creating service policy file: {Dir}/{SERVICEPOLICYFILE}"
  },
  {
    "id": "Creating .gitignore files for source code management.",
    "translation": "Creating .gitignore files for source code management."
  },
  {
    "id": "Creating image generation files under {Currentdir} directory.",
    "translation": "Creating image generation files under {Currentdir} directory."
  },
  {
    "id": "Created image generation files in {Currentdir} and horizon metadata files in {Dir}. Edit these files to define and configure your new {SERVICECOMMAND}.",
    "translation": "Created image generation files in {Currentdir} and horizon metadata files in {Dir}. Edit these files to define and configure your new {SERVICECOMMAND}."
  },
  {
    "id": "Created horizon metadata files in {Dir}. Edit these files to define and configure your new {SERVICECOMMAND}.",
    "translation": "Created horizon metadata files in {Dir}. Edit these files to define and configure your new {SERVICECOMMAND}."
  },
  {
    "id": "must specify either --org or set the {DEVTOOLHZNORG} environment variable.",
    "translation": "must specify either --org or set the {DEVTOOLHZNORG} environment variable."
  },
  {
    "id": "invalid version string: {Version}",
    "translation": "invalid version string: {Version}"
  },
  {
    "id": "only support one image for a service unless --noImageGen flag is specified.",
    "translation": "only support one image for a service unless --noImageGen flag is specified."
  },
  {
    "id": "image {Image} has invalid format.",
    "translation": "image {Image} has invalid format."
  },
  {
    "id": "please specify the image name with -i flag.",
    "translation": "please specify the image name with -i flag."
  },
  {
    "id": "unsupported deployment config type: {Dconfig}",
    "translation": "unsupported deployment config type: {Dconfig}"
  },
  {
    "id": "Error verifying filepath {SecPath}: {Err}",
    "translation": "Error verifying filepath {SecPath}: {Err}"
  },
  {
    "id": "failed to find the service {ServiceName} in the current project. If this is a new dependent service, please update the dependency list with the 'hzn dev dependency fetch' command.",
    "translation": "failed to find the service {ServiceName} in the current project. If this is a new dependent service, please update the dependency list with the 'hzn dev dependency fetch' command."
  },
  {
    "id": "'{SERVICECOMMAND} {SERVICELOGCOMMAND}' More than one container has been found for deployment: {JoincontainerNames__}. Please specify the service name by -c flag",
    "translation": "'{SERVICECOMMAND} {SERVICELOGCOMMAND}' More than one container has been found for deployment: {JoincontainerNames__}. Please specify the service name by -c flag"
  },
  {
    "id": "'{SERVICECOMMAND} {SERVICELOGCOMMAND}': container {ContainerName} not found in service {ServiceName}",
    "translation": "'{SERVICECOMMAND} {SERVICELOGCOMMAND}': container {ContainerName} not found in service {ServiceName}"
  },
  {
    "id": "'{SERVICECOMMAND} {SERVICELOGCOMMAND}' Unable to list containers: {Arg_3}",
    "translation": "'{SERVICECOMMAND} {SERVICELOGCOMMAND}' Unable to list containers: {Arg_3}"
  },
  {
    "id": "Found containers {Containers}",
    "translation": "Found containers {Containers}"
  },
  {
    "id": "Unable to display log messages: {Err}",
    "translation": "Unable to display log messages: {Err}"
  },
  {
    "id": "Displaying log messages for dev service {ServiceName} with instance id prefix {MsId}.",
    "translation": "Displaying log messages for dev service {ServiceName} with instance id prefix {MsId}."
  },
  {
    "id": "Use ctrl-C to terminate this command.",
    "translation": "Use ctrl-C to terminate this command."
  },
  {
    "id": "'{SERVICECOMMAND} {SERVICELOGCOMMAND}' Cannot find any running container for dev service {ServiceName}",
    "translation": "'{SERVICECOMMAND} {SERVICELOGCOMMAND}' Cannot find any running container for dev service {ServiceName}"
  },
  {
    "id": "$SERVICE_NAME for $ARCH",
    "translation": "$SERVICE_NAME for $ARCH"
  },
  {
    "id": "Who to say hello to",
    "translation": "Who to say hello to"
  },
  {
    "id": "unknown deployment type: {Dc}",
    "translation": "unknown deployment type: {Dc}"
  },
  {
    "id": "{FilePath}: URL must be set.",
    "translation": "{FilePath}: URL must be set."
  },
  {
    "id": "{FilePath}: version must be set to a specific version, e.g. 1.0.0.",
    "translation": "{FilePath}: version must be set to a specific version, e.g. 1.0.0."
  },
  {
    "id": "{FilePath}: org must be set.",
    "translation": "{FilePath}: org must be set."
  },
  {
    "id": "{FilePath}: deployment configuration, {Err}",
    "translation": "{FilePath}: deployment configuration, {Err}"
  },
  {
    "id": "{FilePath}: userInput array index {Ix} does not have name and type specified.",
    "translation": "{FilePath}: userInput array index {Ix} does not have name and type specified."
  },
  {
    "id": "Updated {HomeDirectory}/{SERVICEDEFINITIONFILE} dependencies.",
    "translation": "Updated {HomeDirectory}/{SERVICEDEFINITIONFILE} dependencies."
  },
  {
    "id": "No need to update {HomeDirectory}/{SERVICEDEFINITIONFILE} dependencies.",
    "translation": "No need to update {HomeDirectory}/{SERVICEDEFINITIONFILE} dependencies."
  },
  {
    "id": "error creating {HORIZONGITIGNOREFILE} for source code management. {Err}",
    "translation": "error creating {HORIZONGITIGNOREFILE} for source code management. {Err}"
  },
  {
    "id": "Converted userinput attribute: {GlobalSet} to API attribute: {Attr}",
    "translation": "Converted userinput attribute: {GlobalSet} to API attribute: {Attr}"
  },
  {
    "id": "{GlobalSet} encountered error: {Error}",
    "translation": "{GlobalSet} encountered error: {Error}"
  },
  {
    "id": "Converted API Attributes: {Global} to persistent attributes: {Attributes}",
    "translation": "Converted API Attributes: {Global} to persistent attributes: {Attributes}"
  },
  {
    "id": "{OriginalUserInputFilePath}: global array element ({GlobalSet}) has an empty type, must be one of the supported attribute types. See the Horizon agent /attribute API.",
    "translation": "{OriginalUserInputFilePath}: global array element ({GlobalSet}) has an empty type, must be one of the supported attribute types. See the Horizon agent /attribute API."
  },
  {
    "id": "{USERINPUTFILE} has error: {Err}",
    "translation": "{USERINPUTFILE} has error: {Err}"
  },
  {
    "id": "{OriginalUserInputFilePath}: services array element at index {Ix} is {AbstractUserInput} {Err}",
    "translation": "{OriginalUserInputFilePath}: services array element at index {Ix} is {AbstractUserInput} {Err}"
  },
  {
    "id": "{OriginalUserInputFilePath}: services array does not contain an element for {URL}. Error: {Err}",
    "translation": "{OriginalUserInputFilePath}: services array does not contain an element for {URL}. Error: {Err}"
  },
  {
    "id": "please provide a user input file for service {URL}. Error: {Err}",
    "translation": "please provide a user input file for service {URL}. Error: {Err}"
  },
  {
    "id": "has empty org, must be set to the name of the organization that owns the service.",
    "translation": "has empty org, must be set to the name of the organization that owns the service."
  },
  {
    "id": "has empty url. Must be set to this service's url or a dependency's url.",
    "translation": "has empty url. Must be set to this service's url or a dependency's url."
  },
  {
    "id": "sets variable {VarName} using a value of {Err}.",
    "translation": "sets variable {VarName} using a value of {Err}."
  },
  {
    "id": "sets variable {VarName} of type {VarValue} that is not defined.",
    "translation": "sets variable {VarName} of type {VarValue} that is not defined."
  },
  {
    "id": "Updated {HomeDirectory}/{USERINPUTFILE}.",
    "translation": "Updated {HomeDirectory}/{USERINPUTFILE}."
  },
  {
    "id": "No need to update {HomeDirectory}/{USERINPUTFILE}.",
    "translation": "No need to update {HomeDirectory}/{USERINPUTFILE}."
  },
  {
    "id": "could not create directory {NewDepDir}, error: {Err}",
    "translation": "could not create directory {NewDepDir}, error: {Err}"
  },
  {
    "id": "could not get status of directory {NewDepDir}, error: {Err}",
    "translation": "could not get status of directory {NewDepDir}, error: {Err}"
  },
  {
    "id": "Using working directory: {Dir}",
    "translation": "Using working directory: {Dir}"
  },
  {
    "id": "horizon project in {Dir} already contains {FileName}.",
    "translation": "horizon project in {Dir} already contains {FileName}."
  },
  {
    "id": "error checking for {FileName}: {Err}",
    "translation": "error checking for {FileName}: {Err}"
  },
  {
    "id": "failed to unmarshal {FilePath}, error: {Err}",
    "translation": "failed to unmarshal {FilePath}, error: {Err}"
  },
  {
    "id": "failed to create json object for {FileName}, error: {Err}",
    "translation": "failed to create json object for {FileName}, error: {Err}"
  },
  {
    "id": "unable to write json object for {FileName} to file {FilePath}, error: {Err}",
    "translation": "unable to write json object for {FileName} to file {FilePath}, error: {Err}"
  },
  {
    "id": "unable to write json object for userinput to file {FilePath}, error: {Err}",
    "translation": "unable to write json object for userinput to file {FilePath}, error: {Err}"
  },
  {
    "id": "Must set environment variable {DEVTOOLHZNORG} or specify the user as 'org/user' on the --user-pw flag",
    "translation": "Must set environment variable {DEVTOOLHZNORG} or specify the user as 'org/user' on the --user-pw flag"
  },
  {
    "id": "Must set environment variable {DEVTOOLHZNUSER} or specify user exchange credentials with --user-pw",
    "translation": "Must set environment variable {DEVTOOLHZNUSER} or specify user exchange credentials with --user-pw"
  },
  {
    "id": "Unable to set env var {DEVTOOLHZNEXCHANGEURL} to {ExchangeUrl}, error {Err}",
    "translation": "Unable to set env var {DEVTOOLHZNEXCHANGEURL} to {ExchangeUrl}, error {Err}"
  },
  {
    "id": "Environment variable {DEVTOOLHZNEXCHANGEURL} must be set.",
    "translation": "Environment variable {DEVTOOLHZNEXCHANGEURL} must be set."
  },
  {
    "id": "project has no horizon metadata directory. Use hzn dev to create a new project. Error: {Err}",
    "translation": "project has no horizon metadata directory. Use hzn dev to create a new project. Error: {Err}"
  },
  {
    "id": "'{ProjectType} {Cmd}' project does not validate. {Derr}",
    "translation": "'{ProjectType} {Cmd}' project does not validate. {Derr}"
  },
  {
    "id": "'{ProjectType} {Cmd}' project does not validate. {Verr}",
    "translation": "'{ProjectType} {Cmd}' project does not validate. {Verr}"
  },
  {
    "id": "'{ProjectType} {Cmd}' Must specify configuration file type (-t) when a configuration file is specified (-m).",
    "translation": "'{ProjectType} {Cmd}' Must specify configuration file type (-t) when a configuration file is specified (-m)."
  },
  {
    "id": "'{ProjectType} {Cmd}' configuration file {FileRef} error {Err}",
    "translation": "'{ProjectType} {Cmd}' configuration file {FileRef} error {Err}"
  },
  {
    "id": "project does not validate. {Verr}",
    "translation": "project does not validate. {Verr}"
  },
  {
    "id": "project in {Dir} is not a horizon project.",
    "translation": "project in {Dir} is not a horizon project."
  },
  {
    "id": "Final Attributes: {Attrs}",
    "translation": "Final Attributes: {Attrs}"
  },
  {
    "id": "global attribute conversion error: {Cerr}",
    "translation": "global attribute conversion error: {Cerr}"
  },
  {
    "id": "'{ProjectType} {Cmd}' unable to create Container Worker, {Cerr}",
    "translation": "'{ProjectType} {Cmd}' unable to create Container Worker, {Cerr}"
  },
  {
    "id": "Failed to remove the UDS socket file: {Err}",
    "translation": "Failed to remove the UDS socket file: {Err}"
  },
  {
    "id": "Failed to remove FSS Authentication credential folder, error: {Err}",
    "translation": "Failed to remove FSS Authentication credential folder, error: {Err}"
  },
  {
    "id": "unable to list containers, {Err}",
    "translation": "unable to list containers, {Err}"
  },
  {
    "id": "unable to list existing containers: {Err}",
    "translation": "unable to list existing containers: {Err}"
  },
  {
    "id": "Found main network for service {AgreementId}, {ContainerNetwork}",
    "translation": "Found main network for service {AgreementId}, {ContainerNetwork}"
  },
  {
    "id": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' {StartErr} for dependency {URL}",
    "translation": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' {StartErr} for dependency {URL}"
  },
  {
    "id": "unable to get list of containers in network {NwName}, error {Err}",
    "translation": "unable to get list of containers in network {NwName}, error {Err}"
  },
  {
    "id": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to list existing containers: {Err}",
    "translation": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to list existing containers: {Err}"
  },
  {
    "id": "Containers for service {Org}/{URL} are in network {NetName}",
    "translation": "Containers for service {Org}/{URL} are in network {NetName}"
  },
  {
    "id": "Skipping service because it has no deployment configuration: {DepConfig}",
    "translation": "Skipping service because it has no deployment configuration: {DepConfig}"
  },
  {
    "id": "Working on service {SId}",
    "translation": "Working on service {SId}"
  },
  {
    "id": "unable to retrieve dependency metadata: {Err}",
    "translation": "unable to retrieve dependency metadata: {Err}"
  },
  {
    "id": "unable to start dependencies: {Err}",
    "translation": "unable to start dependencies: {Err}"
  },
  {
    "id": "unable to create environment variables",
    "translation": "unable to create environment variables"
  },
  {
    "id": "Passing environment variables: {EnvironmentAdditions}",
    "translation": "Passing environment variables: {EnvironmentAdditions}"
  },
  {
    "id": "Start {LogName}: {CLIString} with instance id prefix {Id}",
    "translation": "Start {LogName}: {CLIString} with instance id prefix {Id}"
  },
  {
    "id": "unable to start container using {CLIString}, error: {StartErr}",
    "translation": "unable to start container using {CLIString}, error: {StartErr}"
  },
  {
    "id": "Running {LogName}.",
    "translation": "Running {LogName}."
  },
  {
    "id": "Stopping dependencies.",
    "translation": "Stopping dependencies."
  },
  {
    "id": "unable to stop dependencies: {Err}",
    "translation": "unable to stop dependencies: {Err}"
  },
  {
    "id": "Stop {LogName}: {CLIString} with instance id prefix {MsId}",
    "translation": "Stop {LogName}: {CLIString} with instance id prefix {MsId}"
  },
  {
    "id": "failed to create docker client, error: {Derr}",
    "translation": "failed to create docker client, error: {Derr}"
  },
  {
    "id": "failed to convert global attributes in {USERINPUTFILE}, error: {Err}",
    "translation": "failed to convert global attributes in {USERINPUTFILE}, error: {Err}"
  },
  {
    "id": "failed to extract authentication attribute from {USERINPUTFILE}, error: {Err}",
    "translation": "failed to extract authentication attribute from {USERINPUTFILE}, error: {Err}"
  },
  {
    "id": "getting container images into docker.",
    "translation": "getting container images into docker."
  },
  {
    "id": "failed to get container images, error: {Err}",
    "translation": "failed to get container images, error: {Err}"
  },
  {
    "id": "Created network {Name}",
    "translation": "Created network {Name}"
  },
  {
    "id": "unable to list docker networks, error {Err}",
    "translation": "unable to list docker networks, error {Err}"
  },
  {
    "id": "unable to remove docker network {Name}, error {Err}",
    "translation": "unable to remove docker network {Name}, error {Err}"
  },
  {
    "id": "invalid image format: {Image}",
    "translation": "invalid image format: {Image}"
  },
  {
    "id": "file {FilePath} exists already",
    "translation": "file {FilePath} exists already"
  },
  {
    "id": "unable to write content to file {FilePath}, error: {Err}",
    "translation": "unable to write content to file {FilePath}, error: {Err}"
  },
  {
    "id": "The selection string {V} is not valid.",
    "translation": "The selection string {V} is not valid."
  },
  {
    "id": "failed to marshal 'hzn eventlog list' output: {Err}",
    "translation": "failed to marshal 'hzn eventlog list' output: {Err}"
  },
  {
    "id": "Error: event record could not be found",
    "translation": "Error: event record could not be found"
  },
  {
    "id": "failed to marshal 'hzn eventlog surface' output: {Err}",
    "translation": "failed to marshal 'hzn eventlog surface' output: {Err}"
  },
  {
    "id": "failed to marshal 'exchange agbot list' output: {Err}",
    "translation": "failed to marshal 'exchange agbot list' output: {Err}"
  },
  {
    "id": "agbot '{Agbot}' not found in org {AgbotOrg}",
    "translation": "agbot '{Agbot}' not found in org {AgbotOrg}"
  },
  {
    "id": "both patternorg and pattern must be specified (or neither)",
    "translation": "both patternorg and pattern must be specified (or neither)"
  },
  {
    "id": "pattern '{Pattern}' with org '{PatternOrg}' and node org '{NodeOrg}' not found in agbot '{Agbot}'",
    "translation": "pattern '{Pattern}' with org '{PatternOrg}' and node org '{NodeOrg}' not found in agbot '{Agbot}'"
  },
  {
    "id": "Pattern '{Pattern}' with org '{PatternOrg}' and node org '{NodeOrg}' already exists in agbot '{Agbot}'",
    "translation": "Pattern '{Pattern}' with org '{PatternOrg}' and node org '{NodeOrg}' already exists in agbot '{Agbot}'"
  },
  {
    "id": "Adding Business policy org {PolOrg}' to agbot '{Agbot}'. The agbot will start looking for nodes that are compatible with this policy.",
    "translation": "Adding Business policy org {PolOrg}' to agbot '{Agbot}'. The agbot will start looking for nodes that are compatible with this policy."
  },
  {
    "id": "Business policy org {PolOrg}' already exists in agbot '{Agbot}'",
    "translation": "Business policy org {PolOrg}' already exists in agbot '{Agbot}'"
  },
  {
    "id": "Removing Business policy org {PolOrg}' to agbot '{Agbot}'. The agbot is no longer looking for nodes that are compatible with this policy.",
    "translation": "Removing Business policy org {PolOrg}' to agbot '{Agbot}'. The agbot is no longer looking for nodes that are compatible with this policy."
  },
  {
    "id": "Policy {Policy} not found in org {PolOrg}",
    "translation": "Policy {Policy} not found in org {PolOrg}"
  },
  {
    "id": "failed to marshal 'hzn exchange deployment listpolicy' output: {Err}",
    "translation": "failed to marshal 'hzn exchange deployment listpolicy' output: {Err}"
  },
  {
    "id": "Incorrect deployment policy format in file {JsonFilePath}: {Err}",
    "translation": "Incorrect deployment policy format in file {JsonFilePath}: {Err}"
  },
  {
    "id": "The deployment policy has no constraints which might result in the service being deployed to all nodes. Please specify --no-constraints to confirm that this is acceptable.",
    "translation": "The deployment policy has no constraints which might result in the service being deployed to all nodes. Please specify --no-constraints to confirm that this is acceptable."
  },
  {
    "id": "Deployment policy: {PolOrg}/{Policy} updated in the Horizon Exchange",
    "translation": "Deployment policy: {PolOrg}/{Policy} updated in the Horizon Exchange"
  },
  {
    "id": "Cannot create deployment policy {PolOrg}/{Policy}: {Msg}",
    "translation": "Cannot create deployment policy {PolOrg}/{Policy}: {Msg}"
  },
  {
    "id": "Deployment policy: {PolOrg}/{Policy} added in the Horizon Exchange",
    "translation": "Deployment policy: {PolOrg}/{Policy} added in the Horizon Exchange"
  },
  {
    "id": "Invalid format for properties: {Err1}",
    "translation": "Invalid format for properties: {Err1}"
  },
  {
    "id": "Invalid format for constraints: {Err1}",
    "translation": "Invalid format for constraints: {Err1}"
  },
  {
    "id": "Deployment policy attribute to be updated is not found in the input file. Supported attributes are: label, description, service, properties, constraints, userInput and secretBinding.",
    "translation": "Deployment policy attribute to be updated is not found in the input file. Supported attributes are: label, description, service, properties, constraints, userInput and secretBinding."
  },
  {
    "id": "failed to unmarshal attribute input {Attribute}: {Err}",
    "translation": "failed to unmarshal attribute input {Attribute}: {Err}"
  },
  {
    "id": "Updating Policy {PolOrg}/{PolicyName} in the Horizon Exchange and re-evaluating all agreements based on this deployment policy. Existing agreements might be cancelled and re-negotiated.",
    "translation": "Updating Policy {PolOrg}/{PolicyName} in the Horizon Exchange and re-evaluating all agreements based on this deployment policy. Existing agreements might be cancelled and re-negotiated."
  },
  {
    "id": "Policy {PolOrg}/{PolicyName} updated in the Horizon Exchange",
    "translation": "Policy {PolOrg}/{PolicyName} updated in the Horizon Exchange"
  },
  {
    "id": "Are you sure you want to remove deployment policy {Policy} for org {PolOrg} from the Horizon Exchange?",
    "translation": "Are you sure you want to remove deployment policy {Policy} for org {PolOrg} from the Horizon Exchange?"
  },
  {
    "id": "Policy {PolOrg}/{Policy} not found in the Horizon Exchange",
    "translation": "Policy {PolOrg}/{Policy} not found in the Horizon Exchange"
  },
  {
    "id": "Removing deployment policy {PolOrg}/{Policy} and re-evaluating all agreements. Existing agreements might be cancelled and re-negotiated",
    "translation": "Removing deployment policy {PolOrg}/{Policy} and re-evaluating all agreements. Existing agreements might be cancelled and re-negotiated"
  },
  {
    "id": "Deployment policy {PolOrg}/{Policy} removed",
    "translation": "Deployment policy {PolOrg}/{Policy} removed"
  },
  {
    "id": "Failed to validate the secret binding. {Err}",
    "translation": "Failed to validate the secret binding. {Err}"
  },
  {
    "id": "Note: The following secret bindings are not required by any services for this deployment policy:",
    "translation": "Note: The following secret bindings are not required by any services for this deployment policy:"
  },
  {
    "id": "Failed to verify the binding secret in the secret manager. {Err}",
    "translation": "Failed to verify the binding secret in the secret manager. {Err}"
  },
  {
    "id": "Warning: The following binding secrets cannot be verified in the secret manager:",
    "translation": "Warning: The following binding secrets cannot be verified in the secret manager:"
  },
  {
    "id": "Failed to get services {ServiceOrg}/{ServiceName} version {ServiceVersion} from the exchange for all architectures. {Err}",
    "translation": "Failed to get services {ServiceOrg}/{ServiceName} version {ServiceVersion} from the exchange for all architectures. {Err}"
  },
  {
    "id": "Error retrieving service {ServiceOrg}/{ServiceName} version {ServiceVersion} from the Exchange. {Err}",
    "translation": "Error retrieving service {ServiceOrg}/{ServiceName} version {ServiceVersion} from the Exchange. {Err}"
  },
  {
    "id": "Error validating secret bindings for service {SId}. {Err}",
    "translation": "Error validating secret bindings for service {SId}. {Err}"
  },
  {
    "id": "Error validating secret bindings for dependent service {Id}. {Err}",
    "translation": "Error validating secret bindings for dependent service {Id}. {Err}"
  },
  {
    "id": "Deployment policy label.",
    "translation": "Deployment policy label."
  },
  {
    "id": "Deployment policy description.",
    "translation": "Deployment policy description."
  },
  {
    "id": "The name of the service.",
    "translation": "The name of the service."
  },
  {
    "id": "The org of the service.",
    "translation": "The org of the service."
  },
  {
    "id": "Set to '*' to use services of any hardware architecture.",
    "translation": "Set to '*' to use services of any hardware architecture."
  },
  {
    "id": "A list of service versions.",
    "translation": "A list of service versions."
  },
  {
    "id": "A list of policy properties that describe the service being deployed.",
    "translation": "A list of policy properties that describe the service being deployed."
  },
  {
    "id": "A list of constraint expressions of the form <property name> <operator> <property value>,",
    "translation": "A list of constraint expressions of the form <property name> <operator> <property value>,"
  },
  {
    "id": "separated by boolean operators AND (&&) or OR (||).",
    "translation": "separated by boolean operators AND (&&) or OR (||)."
  },
  {
    "id": "A list of userInput variables to set when the service runs, listed by service.",
    "translation": "A list of userInput variables to set when the service runs, listed by service."
  },
  {
    "id": "The service version range to which these variables should be applied.",
    "translation": "The service version range to which these variables should be applied."
  },
  {
    "id": "The input variables to be set.",
    "translation": "The input variables to be set."
  },
  {
    "id": "A list of secret bindings for the secret names defined in the services, listed by service.",
    "translation": "A list of secret bindings for the secret names defined in the services, listed by service."
  },
  {
    "id": "The service version range.",
    "translation": "The service version range."
  },
  {
    "id": "The secret bindings.",
    "translation": "The secret bindings."
  },
  {
    "id": "The valid formats for secret provider secret names are:",
    "translation": "The valid formats for secret provider secret names are:"
  },
  {
    "id": "'<secretname>' for organization level secret.",
    "translation": "'<secretname>' for organization level secret."
  },
  {
    "id": "'user/<username>/<secretname>' for user level secret.",
    "translation": "'user/<username>/<secretname>' for user level secret."
  },
  {
    "id": "Flags -s and -l are mutually exclusive.",
    "translation": "Flags -s and -l are mutually exclusive."
  },
  {
    "id": "failed to marshal 'hzn exchange catalog servicelist -l' output: {Err}",
    "translation": "failed to marshal 'hzn exchange catalog servicelist -l' output: {Err}"
  },
  {
    "id": "failed to marshal 'hzn exchange catalog servicelist -s' output: {Err}",
    "translation": "failed to marshal 'hzn exchange catalog servicelist -s' output: {Err}"
  },
  {
    "id": "failed to marshal 'hzn exchange catalog servicelist' output: {Err}",
    "translation": "failed to marshal 'hzn exchange catalog servicelist' output: {Err}"
  },
  {
    "id": "failed to marshal 'hzn exchange catalog patternlist -l' output: {Err}",
    "translation": "failed to marshal 'hzn exchange catalog patternlist -l' output: {Err}"
  },
  {
    "id": "failed to marshal 'hzn exchange catalog patternlist -s' output: {Err}",
    "translation": "failed to marshal 'hzn exchange catalog patternlist -s' output: {Err}"
  },
  {
    "id": "failed to marshal 'hzn exchange catalog patternlist' output: {Err}",
    "translation": "failed to marshal 'hzn exchange catalog patternlist' output: {Err}"
  },
  {
    "id": "HA group {HaGroupName} not found in org {HaGroupOrg}",
    "translation": "HA group {HaGroupName} not found in org {HaGroupOrg}"
  },
  {
    "id": "failed to marshal 'hzn exchange hagroup list' output: {Err}",
    "translation": "failed to marshal 'hzn exchange hagroup list' output: {Err}"
  },
  {
    "id": "Optional. The name of the HA group.",
    "translation": "Optional. The name of the HA group."
  },
  {
    "id": "A description of the HA group.",
    "translation": "A description of the HA group."
  },
  {
    "id": "A list of node names that are members of this group.",
    "translation": "A list of node names that are members of this group."
  },
  {
    "id": "HA group name is not specified.",
    "translation": "HA group name is not specified."
  },
  {
    "id": "HA group description cannot be empty.",
    "translation": "HA group description cannot be empty."
  },
  {
    "id": "HA group {HaGroupOrg}/{HaGroupName} updated in the Horizon Exchange",
    "translation": "HA group {HaGroupOrg}/{HaGroupName} updated in the Horizon Exchange"
  },
  {
    "id": "Cannot create HA group {HaGroupOrg}/{HaGroupName}: {Msg}",
    "translation": "Cannot create HA group {HaGroupOrg}/{HaGroupName}: {Msg}"
  },
  {
    "id": "HA group {HaGroupOrg}/{HaGroupName} added in the Horizon Exchange",
    "translation": "HA group {HaGroupOrg}/{HaGroupName} added in the Horizon Exchange"
  },
  {
    "id": "Are you sure you want to remove HA group {HaGroupName} for org {HaGroupOrg} from the Horizon Exchange?",
    "translation": "Are you sure you want to remove HA group {HaGroupName} for org {HaGroupOrg} from the Horizon Exchange?"
  },
  {
    "id": "HA group {HaGroupName} is not found in org {HaGroupOrg}",
    "translation": "HA group {HaGroupName} is not found in org {HaGroupOrg}"
  },
  {
    "id": "HA group {HaGroupOrg}/{HaGroupName} removed from the Horizon Exchange.",
    "translation": "HA group {HaGroupOrg}/{HaGroupName} removed from the Horizon Exchange."
  },
  {
    "id": "node org is different from the group org {HaGroupOrg} for node '{NodeOrg}/{NodeName}'",
    "translation": "node org is different from the group org {HaGroupOrg} for node '{NodeOrg}/{NodeName}'"
  },
  {
    "id": "node '{NodeName}' not found in org {NodeOrg}",
    "translation": "node '{NodeName}' not found in org {NodeOrg}"
  },
  {
    "id": "Node {NodeName} is already in HA group {HaGroupOrg}/{HaGroupName}. Skipping the node.",
    "translation": "Node {NodeName} is already in HA group {HaGroupOrg}/{HaGroupName}. Skipping the node."
  },
  {
    "id": "Nodes \"{JoinnodesToAdd_}\" are added to HA group {HaGroupOrg}/{HaGroupName} in the Horizon Exchange",
    "translation": "Nodes \"{JoinnodesToAdd_}\" are added to HA group {HaGroupOrg}/{HaGroupName} in the Horizon Exchange"
  },
  {
    "id": "Node \"{JoinnodesToAdd_}\" is added to HA group {HaGroupOrg}/{HaGroupName} in the Horizon Exchange",
    "translation": "Node \"{JoinnodesToAdd_}\" is added to HA group {HaGroupOrg}/{HaGroupName} in the Horizon Exchange"
  },
  {
    "id": "Are you sure you want to remove nodes {NodeNames} from HA group {HaGroupName} for org {HaGroupOrg} in the Horizon Exchange?",
    "translation": "Are you sure you want to remove nodes {NodeNames} from HA group {HaGroupName} for org {HaGroupOrg} in the Horizon Exchange?"
  },
  {
    "id": "Node {NodeName} is not in HA group {HaGroupOrg}/{HaGroupName}.",
    "translation": "Node {NodeName} is not in HA group {HaGroupOrg}/{HaGroupName}."
  },
  {
    "id": "Nodes \"{JoinnodesToRemove_}\" are removed from HA group {HaGroupOrg}/{HaGroupName} in the Horizon Exchange",
    "translation": "Nodes \"{JoinnodesToRemove_}\" are removed from HA group {HaGroupOrg}/{HaGroupName} in the Horizon Exchange"
  },
  {
    "id": "Node \"{JoinnodesToRemove_}\" is removed from HA group {HaGroupOrg}/{HaGroupName} in the Horizon Exchange",
    "translation": "Node \"{JoinnodesToRemove_}\" is removed from HA group {HaGroupOrg}/{HaGroupName} in the Horizon Exchange"
  },
  {
    "id": "NMP {NmpName} not found in org {NmpOrg}",
    "translation": "NMP {NmpName} not found in org {NmpOrg}"
  },
  {
    "id": "failed to marshal 'hzn exchange nmp list' output: {Err}",
    "translation": "failed to marshal 'hzn exchange nmp list' output: {Err}"
  },
  {
    "id": "A short description of the policy.",
    "translation": "A short description of the policy."
  },
  {
    "id": "A much longer description of the policy.",
    "translation": "A much longer description of the policy."
  },
  {
    "id": "A list of policy properties that describe this policy.",
    "translation": "A list of policy properties that describe this policy."
  },
  {
    "id": "This policy applies to nodes using one of these patterns.",
    "translation": "This policy applies to nodes using one of these patterns."
  },
  {
    "id": "Is this policy enabled or disabled.",
    "translation": "Is this policy enabled or disabled."
  },
  {
    "id": "When to start an upgrade, default \"now\".",
    "translation": "When to start an upgrade, default \"now\"."
  },
  {
    "id": "Enable agents to randomize upgrade start time within start + startWindow seconds, default 0.",
    "translation": "Enable agents to randomize upgrade start time within start + startWindow seconds, default 0."
  },
  {
    "id": "Assertions on how the agent should update itself.",
    "translation": "Assertions on how the agent should update itself."
  },
  {
    "id": "The manifest file containing the software, config and cert files to upgrade.",
    "translation": "The manifest file containing the software, config and cert files to upgrade."
  },
  {
    "id": "Is this policy allowed to perform a downgrade to a previous version.",
    "translation": "Is this policy allowed to perform a downgrade to a previous version."
  },
  {
    "id": "Incorrect node management policy format in file {JsonFilePath}: {Err}",
    "translation": "Incorrect node management policy format in file {JsonFilePath}: {Err}"
  },
  {
    "id": "The node management policy has no constraints which might result in the management policy being deployed to all nodes. Please specify --no-constraints to confirm that this is acceptable.",
    "translation": "The node management policy has no constraints which might result in the management policy being deployed to all nodes. Please specify --no-constraints to confirm that this is acceptable."
  },
  {
    "id": "An AgentAutoUpgradePolicy was defined, but a manifest was not defined. Please specify a manifest that is stored in the CSS before attempting to add an NMP with an AgentAutoUpgradePolicy.",
    "translation": "An AgentAutoUpgradePolicy was defined, but a manifest was not defined. Please specify a manifest that is stored in the CSS before attempting to add an NMP with an AgentAutoUpgradePolicy."
  },
  {
    "id": "An AgentAutoUpgradePolicy was defined with manifest '{FullManifest}' which does not exist in org {ManOrg}.",
    "translation": "An AgentAutoUpgradePolicy was defined with manifest '{FullManifest}' which does not exist in org {ManOrg}."
  },
  {
    "id": "Node management policy {NmpOrg}/{NmpName} updated in the Horizon Exchange",
    "translation": "Node management policy {NmpOrg}/{NmpName} updated in the Horizon Exchange"
  },
  {
    "id": "Cannot create node management policy {NmpOrg}/{NmpName}: {Msg}",
    "translation": "Cannot create node management policy {NmpOrg}/{NmpName}: {Msg}"
  },
  {
    "id": "Node management policy {NmpOrg}/{NmpName} added in the Horizon Exchange",
    "translation": "Node management policy {NmpOrg}/{NmpName} added in the Horizon Exchange"
  },
  {
    "id": "Are you sure you want to remove node management policy {NmpName} for org {NmpOrg} from the Horizon Exchange?",
    "translation": "Are you sure you want to remove node management policy {NmpName} for org {NmpOrg} from the Horizon Exchange?"
  },
  {
    "id": "Node management policy {NmpName} not found in org {NmpOrg}",
    "translation": "Node management policy {NmpName} not found in org {NmpOrg}"
  },
  {
    "id": "Node management policy {NmpOrg}/{NmpName} removed from the Horizon Exchange.",
    "translation": "Node management policy {NmpOrg}/{NmpName} removed from the Horizon Exchange."
  },
  {
    "id": "Node {NodeName} not found in org {NmpOrg}",
    "translation": "Node {NodeName} not found in org {NmpOrg}"
  },
  {
    "id": "Status for NMP {NmpName} not found in org {NmpOrg}",
    "translation": "Status for NMP {NmpName} not found in org {NmpOrg}"
  },
  {
    "id": "Status for NMP {NmpName} not found for node {NodeName} in org {NmpOrg}",
    "translation": "Status for NMP {NmpName} not found for node {NodeName} in org {NmpOrg}"
  },
  {
    "id": "Failed to parse start time: {Err}. The start time must be in RFC3339 format or set to \"now\".",
    "translation": "Failed to parse start time: {Err}. The start time must be in RFC3339 format or set to \"now\"."
  },
  {
    "id": "Failed to parse start window: {Err}. The start window must be Integer.",
    "translation": "Failed to parse start window: {Err}. The start window must be Integer."
  },
  {
    "id": "Node management policy {NmpFullName} is already enabled in the Horizon Exchange",
    "translation": "Node management policy {NmpFullName} is already enabled in the Horizon Exchange"
  },
  {
    "id": "Node management policy {NmpFullName} enabled in the Horizon Exchange",
    "translation": "Node management policy {NmpFullName} enabled in the Horizon Exchange"
  },
  {
    "id": "Cannot enable node management policy {NmpFullName}: {Msg}",
    "translation": "Cannot enable node management policy {NmpFullName}: {Msg}"
  },
  {
    "id": "Node management policy {NmpFullName} is already disabled in the Horizon Exchange",
    "translation": "Node management policy {NmpFullName} is already disabled in the Horizon Exchange"
  },
  {
    "id": "Node management policy {NmpFullName} disabled in the Horizon Exchange",
    "translation": "Node management policy {NmpFullName} disabled in the Horizon Exchange"
  },
  {
    "id": "Cannot disable node management policy {NmpFullName}: {Msg}",
    "translation": "Cannot disable node management policy {NmpFullName}: {Msg}"
  },
  {
    "id": "failed to marshal 'exchange node list' output: {Err}",
    "translation": "failed to marshal 'exchange node list' output: {Err}"
  },
  {
    "id": "if node or token are specified then they both must be specified",
    "translation": "if node or token are specified then they both must be specified"
  },
  {
    "id": "do not specify both the -n flag and the node and token positional arguments. They mean the same thing.",
    "translation": "do not specify both the -n flag and the node and token positional arguments. They mean the same thing."
  },
  {
    "id": "either the node and token positional arguments, or the -n flag must be specified.",
    "translation": "either the node and token positional arguments, or the -n flag must be specified."
  },
  {
    "id": "user '{User}' does not exist with the specified password.",
    "translation": "user '{User}' does not exist with the specified password."
  },
  {
    "id": "Node {NodeId} exists. Only the node token will be updated.",
    "translation": "Node {NodeId} exists. Only the node token will be updated."
  },
  {
    "id": "The node arch and node type will be ignored if they are specified.",
    "translation": "The node arch and node type will be ignored if they are specified."
  },
  {
    "id": "key '{OrgAndCredsorg_nodeId}' not found in exchange nodes output",
    "translation": "key '{OrgAndCredsorg_nodeId}' not found in exchange nodes output"
  },
  {
    "id": "can not update existing node {NodeId} because it is owned by another user ({Owner})",
    "translation": "can not update existing node {NodeId} because it is owned by another user ({Owner})"
  },
  {
    "id": "Node {NodeId} updated.",
    "translation": "Node {NodeId} updated."
  },
  {
    "id": "Node {NodeId} created.",
    "translation": "Node {NodeId} created."
  },
  {
    "id": "Node {NodeOrg}/{Node} not found in the Horizon Exchange.",
    "translation": "Node {NodeOrg}/{Node} not found in the Horizon Exchange."
  },
  {
    "id": "failed to unmarshal attribute: {Err}",
    "translation": "failed to unmarshal attribute: {Err}"
  },
  {
    "id": "Cannot update attribute {K}. Supported attributes are: userInput, pattern, heartbeatIntervals.",
    "translation": "Cannot update attribute {K}. Supported attributes are: userInput, pattern, heartbeatIntervals."
  },
  {
    "id": "failed to marshal attribute input {V}: {Err}",
    "translation": "failed to marshal attribute input {V}: {Err}"
  },
  {
    "id": "Expecting 1 exchange node, but get {Lennodes} nodes",
    "translation": "Expecting 1 exchange node, but get {Lennodes} nodes"
  },
  {
    "id": "failed to unmarshal pattern attribute input {V}: {Err}",
    "translation": "failed to unmarshal pattern attribute input {V}: {Err}"
  },
  {
    "id": "failed to unmarshal heartbeat input {V}: {Err}",
    "translation": "failed to unmarshal heartbeat input {V}: {Err}"
  },
  {
    "id": "Updating {K} for node {NodeOrg}/{Node} in the Horizon Exchange.",
    "translation": "Updating {K} for node {NodeOrg}/{Node} in the Horizon Exchange."
  },
  {
    "id": "Attribute {K} updated.",
    "translation": "Attribute {K} updated."
  },
  {
    "id": "failed to unmarshal exchange node {Device}: {Err}",
    "translation": "failed to unmarshal exchange node {Device}: {Err}"
  },
  {
    "id": "Device will re-evaluate all agreements based on the update. Existing agreements might be cancelled and re-negotiated.",
    "translation": "Device will re-evaluate all agreements based on the update. Existing agreements might be cancelled and re-negotiated."
  },
  {
    "id": "-n is mutually exclusive with <node> and <token> arguments.",
    "translation": "-n is mutually exclusive with <node> and <token> arguments."
  },
  {
    "id": "Please specify both node and token.",
    "translation": "Please specify both node and token."
  },
  {
    "id": "Node id and token are valid.",
    "translation": "Node id and token are valid."
  },
  {
    "id": "Are you sure you want to remove node {NodeOrg}/{Node} from the Horizon Exchange?",
    "translation": "Are you sure you want to remove node {NodeOrg}/{Node} from the Horizon Exchange?"
  },
  {
    "id": "node '{NodeOrg}/{Node}' not found.",
    "translation": "node '{NodeOrg}/{Node}' not found."
  },
  {
    "id": "failed to marshal node policy output: {Err}",
    "translation": "failed to marshal node policy output: {Err}"
  },
  {
    "id": "Incorrect policy format in file {JsonFilePath}: {Err}",
    "translation": "Incorrect policy format in file {JsonFilePath}: {Err}"
  },
  {
    "id": "Note: No properties and constraints are specified under 'deployment' attribute. The top level properties and constraints will be used.",
    "translation": "Note: No properties and constraints are specified under 'deployment' attribute. The top level properties and constraints will be used."
  },
  {
    "id": "Updating Node policy and re-evaluating all agreements based on this policy. Existing agreements might be cancelled and re-negotiated.",
    "translation": "Updating Node policy and re-evaluating all agreements based on this policy. Existing agreements might be cancelled and re-negotiated."
  },
  {
    "id": "Node policy updated.",
    "translation": "Node policy updated."
  },
  {
    "id": "Warning: This command is deprecated. It will continue to be supported until the next major release. Please use 'hzn exchange node addpolicy' to update the node policy.",
    "translation": "Warning: This command is deprecated. It will continue to be supported until the next major release. Please use 'hzn exchange node addpolicy' to update the node policy."
  },
  {
    "id": "Node policy not found for node {NodeOrg}/{Node}",
    "translation": "Node policy not found for node {NodeOrg}/{Node}"
  },
  {
    "id": "failed to unmarshal attribute input {Attribute} for {AttribName}: {Err}",
    "translation": "failed to unmarshal attribute input {Attribute} for {AttribName}: {Err}"
  },
  {
    "id": "Invalid property list {NewProp}: {Err}",
    "translation": "Invalid property list {NewProp}: {Err}"
  },
  {
    "id": "failed to unmarshal attribute input {Attribute} for {AttribName}s: {Err}",
    "translation": "failed to unmarshal attribute input {Attribute} for {AttribName}s: {Err}"
  },
  {
    "id": "Invalid constraint expression {NewConstr}: {Err}",
    "translation": "Invalid constraint expression {NewConstr}: {Err}"
  },
  {
    "id": "Invalid deployment attribute {ExternPol}: {Err}",
    "translation": "Invalid deployment attribute {ExternPol}: {Err}"
  },
  {
    "id": "Invalid management attribute {ExternPol}: {Err}",
    "translation": "Invalid management attribute {ExternPol}: {Err}"
  },
  {
    "id": "Failed to find valid attribute to update in input {Attribute}. Valid attribute names are properties, constraints, deployment and management.",
    "translation": "Failed to find valid attribute to update in input {Attribute}. Valid attribute names are properties, constraints, deployment and management."
  },
  {
    "id": "Updating Node policy {AttribName} attribute for node {Node} in the horizon exchange and re-evaluating all agreements based on this policy. Existing agreements might be cancelled and re-negotiated.",
    "translation": "Updating Node policy {AttribName} attribute for node {Node} in the horizon exchange and re-evaluating all agreements based on this policy. Existing agreements might be cancelled and re-negotiated."
  },
  {
    "id": "Node policy {AttribName} attribute updated for node {Node} in the horizon exchange.",
    "translation": "Node policy {AttribName} attribute updated for node {Node} in the horizon exchange."
  },
  {
    "id": "Are you sure you want to remove node policy for {NodeOrg}/{Node} from the Horizon Exchange?",
    "translation": "Are you sure you want to remove node policy for {NodeOrg}/{Node} from the Horizon Exchange?"
  },
  {
    "id": "Removing Node policy and re-evaluating all agreements. Existing agreements might be cancelled and re-negotiated.",
    "translation": "Removing Node policy and re-evaluating all agreements. Existing agreements might be cancelled and re-negotiated."
  },
  {
    "id": "Node policy removed.",
    "translation": "Node policy removed."
  },
  {
    "id": "failed to marshal 'hzn exchange node listerrors' output: {Err}",
    "translation": "failed to marshal 'hzn exchange node listerrors' output: {Err}"
  },
  {
    "id": "node status not found for node '{NodeOrg}/{Node}'.",
    "translation": "node status not found for node '{NodeOrg}/{Node}'."
  },
  {
    "id": "node '{NodeName}' is not registered with the exchange in org {NodeOrg}",
    "translation": "node '{NodeName}' is not registered with the exchange in org {NodeOrg}"
  },
  {
    "id": "Node policy for {NodeName} not found in org {NodeOrg}",
    "translation": "Node policy for {NodeName} not found in org {NodeOrg}"
  },
  {
    "id": "Statuses for node {NodeName} not found in org {NodeOrg}",
    "translation": "Statuses for node {NodeName} not found in org {NodeOrg}"
  },
  {
    "id": "Node {NodeName} does not contain a status for {NmpName} in org {NodeOrg}",
    "translation": "Node {NodeName} does not contain a status for {NmpName} in org {NodeOrg}"
  },
  {
    "id": "No management status found for node {NodeName} in org {NodeOrg}",
    "translation": "No management status found for node {NodeName} in org {NodeOrg}"
  },
  {
    "id": "Node management status for {NmpStatusNameNoOrg} is reset.",
    "translation": "Node management status for {NmpStatusNameNoOrg} is reset."
  },
  {
    "id": "The the Horizon agent for node {NodeOrg}/{NodeName} will re-evaluate the management policies.",
    "translation": "The the Horizon agent for node {NodeOrg}/{NodeName} will re-evaluate the management policies."
  },
  {
    "id": "Verifying userInputs with the node pattern {Pattern}.",
    "translation": "Verifying userInputs with the node pattern {Pattern}."
  },
  {
    "id": "Error varifying the given user input with the node pattern {Pattern}:",
    "translation": "Error varifying the given user input with the node pattern {Pattern}:"
  },
  {
    "id": "Compatible",
    "translation": "Compatible"
  },
  {
    "id": "Unable to update the node because of the above error.",
    "translation": "Unable to update the node because of the above error."
  },
  {
    "id": "Verifying userInputs for node using policy.",
    "translation": "Verifying userInputs for node using policy."
  },
  {
    "id": "Start validating userinput {ServiceOrg}, {ServiceUrl}, {ServiceVersionRange}, {ServiceArch}",
    "translation": "Start validating userinput {ServiceOrg}, {ServiceUrl}, {ServiceVersionRange}, {ServiceArch}"
  },
  {
    "id": "Unable to validate exchange node userInput, error: {}",
    "translation": "Unable to validate exchange node userInput, error: {}"
  },
  {
    "id": "Unable to validate exchange node userInput, message: {Message}, error: {Err}",
    "translation": "Unable to validate exchange node userInput, message: {Message}, error: {Err}"
  },
  {
    "id": "Unable to validate exchange node userInput, message: {Message}",
    "translation": "Unable to validate exchange node userInput, message: {Message}"
  },
  {
    "id": "Unable to validate exchange node userInput: {Reasont}",
    "translation": "Unable to validate exchange node userInput: {Reasont}"
  },
  {
    "id": "validate exchange node/userinput {Err}",
    "translation": "validate exchange node/userinput {Err}"
  },
  {
    "id": "org '{TheOrg}' not found.",
    "translation": "org '{TheOrg}' not found."
  },
  {
    "id": "failed to marshal 'exchange org list' output: {Err}",
    "translation": "failed to marshal 'exchange org list' output: {Err}"
  },
  {
    "id": "Invalid organization. Organization cannot contain: [ _ , <space> ' ?]",
    "translation": "Invalid organization. Organization cannot contain: [ _ , <space> ' ?]"
  },
  {
    "id": "Invalid input for {Negatives}. Negative integer is not allowed.",
    "translation": "Invalid input for {Negatives}. Negative integer is not allowed."
  },
  {
    "id": "The value for --heartbeatmin must be less than or equal to the value for --heartbeatmax.",
    "translation": "The value for --heartbeatmin must be less than or equal to the value for --heartbeatmax."
  },
  {
    "id": "Invalid input for --max-nodes. Negative integer is not allowed.",
    "translation": "Invalid input for --max-nodes. Negative integer is not allowed."
  },
  {
    "id": "Organization {TheOrg} is successfully added to the Exchange.",
    "translation": "Organization {TheOrg} is successfully added to the Exchange."
  },
  {
    "id": "No agbot found in the Exchange.",
    "translation": "No agbot found in the Exchange."
  },
  {
    "id": "Agbot {Agbot} is responsible for deploying services in org {TheOrg}",
    "translation": "Agbot {Agbot} is responsible for deploying services in org {TheOrg}"
  },
  {
    "id": "Organization {TheOrg} is successfully added to MMS.",
    "translation": "Organization {TheOrg} is successfully added to MMS."
  },
  {
    "id": "Invalid input for --max-nodes. Only -1, 0 and positive integers are allowed.",
    "translation": "Invalid input for --max-nodes. Only -1, 0 and positive integers are allowed."
  },
  {
    "id": "Organization {TheOrg} is successfully updated.",
    "translation": "Organization {TheOrg} is successfully updated."
  },
  {
    "id": "Warning: this will also delete all Exchange resources owned by this org (nodes, services, patterns, etc). Are you sure you want to remove org {TheOrg} from the Horizon Exchange and the MMS?",
    "translation": "Warning: this will also delete all Exchange resources owned by this org (nodes, services, patterns, etc). Are you sure you want to remove org {TheOrg} from the Horizon Exchange and the MMS?"
  },
  {
    "id": "Using agbot {Agbot}",
    "translation": "Using agbot {Agbot}"
  },
  {
    "id": "Cannot unmarshal served pattern",
    "translation": "Cannot unmarshal served pattern"
  },
  {
    "id": "Removing pattern {PatternId} from agbot {Agbot}",
    "translation": "Removing pattern {PatternId} from agbot {Agbot}"
  },
  {
    "id": "Removing policy {PolId} from agbot {Agbot}",
    "translation": "Removing policy {PolId} from agbot {Agbot}"
  },
  {
    "id": "Deleting org {TheOrg} from the Horizon Exchange...",
    "translation": "Deleting org {TheOrg} from the Horizon Exchange..."
  },
  {
    "id": "Org {TheOrg} is deleted from the Horizon Exchange",
    "translation": "Org {TheOrg} is deleted from the Horizon Exchange"
  },
  {
    "id": "Deleting org {TheOrg} from MMS...",
    "translation": "Deleting org {TheOrg} from MMS..."
  },
  {
    "id": "Org {TheOrg} is deleted from MMS",
    "translation": "Org {TheOrg} is deleted from MMS"
  },
  {
    "id": "Organization {TheOrg} is successfully removed.",
    "translation": "Organization {TheOrg} is successfully removed."
  },
  {
    "id": "Invalid input for {JoinnegFlags_}. Only -1, 0 and positive integers are allowed.",
    "translation": "Invalid input for {JoinnegFlags_}. Only -1, 0 and positive integers are allowed."
  },
  {
    "id": "The value for heartbeat minInterval ({Min}) must be less than or equal to the value for heartbeat maxInterval ({Max}).",
    "translation": "The value for heartbeat minInterval ({Min}) must be less than or equal to the value for heartbeat maxInterval ({Max})."
  },
  {
    "id": "Empty string is specified with -t, all tags will be removed.",
    "translation": "Empty string is specified with -t, all tags will be removed."
  },
  {
    "id": "Invalid input for -t or --tag flag: {Tag}. The valid format is '-t mytag=myvalue' or '--tag mytag=myvalue'.",
    "translation": "Invalid input for -t or --tag flag: {Tag}. The valid format is '-t mytag=myvalue' or '--tag mytag=myvalue'."
  },
  {
    "id": "Agbot '{AgOrg}/{Ag1}' specified by -a cannot be not found in the Exchange",
    "translation": "Agbot '{AgOrg}/{Ag1}' specified by -a cannot be not found in the Exchange"
  },
  {
    "id": "failed to marshal 'exchange pattern list' output: {Err}",
    "translation": "failed to marshal 'exchange pattern list' output: {Err}"
  },
  {
    "id": "pattern '{Pattern}' not found in org {PatOrg}",
    "translation": "pattern '{Pattern}' not found in org {PatOrg}"
  },
  {
    "id": "failed to marshal 'hzn exchange pattern list' output: {Err}",
    "translation": "failed to marshal 'hzn exchange pattern list' output: {Err}"
  },
  {
    "id": "Pattern {Pattern} not found in org {PatOrg}",
    "translation": "Pattern {Pattern} not found in org {PatOrg}"
  },
  {
    "id": "Pattern attribute to be updated is not found in the input file. Supported attributes are: label, description, services, userInput and secretBinding.",
    "translation": "Pattern attribute to be updated is not found in the input file. Supported attributes are: label, description, services, userInput and secretBinding."
  },
  {
    "id": "Pattern {PatOrg}/{Pattern} updated in the Horizon Exchange",
    "translation": "Pattern {PatOrg}/{Pattern} updated in the Horizon Exchange"
  },
  {
    "id": "failed to marshal body for {D}: {Err}",
    "translation": "failed to marshal body for {D}: {Err}"
  },
  {
    "id": "failed to unmarshal json for deployment overrides field {StringjsonBytes}: {Err}",
    "translation": "failed to unmarshal json for deployment overrides field {StringjsonBytes}: {Err}"
  },
  {
    "id": "the org specified in the input file ({Org}) must match the org specified on the command line ({Org_1})",
    "translation": "the org specified in the input file ({Org}) must match the org specified on the command line ({Org_1})"
  },
  {
    "id": "the pattern definition ({Services}) must contain services, unable to proceed",
    "translation": "the pattern definition ({Services}) must contain services, unable to proceed"
  },
  {
    "id": "Signing deployment_overrides field in service {I__1}, serviceVersion number {J__1}",
    "translation": "Signing deployment_overrides field in service {I__1}, serviceVersion number {J__1}"
  },
  {
    "id": "failed to marshal deployment_overrides field in service {I__1}, serviceVersion number {J__1}: {Err}",
    "translation": "failed to marshal deployment_overrides field in service {I__1}, serviceVersion number {J__1}: {Err}"
  },
  {
    "id": "problem signing the deployment_overrides string: {Err}",
    "translation": "problem signing the deployment_overrides string: {Err}"
  },
  {
    "id": "Updating {ExchId} in the Exchange...",
    "translation": "Updating {ExchId} in the Exchange..."
  },
  {
    "id": "Creating {ExchId} in the Exchange...",
    "translation": "Creating {ExchId} in the Exchange..."
  },
  {
    "id": "Storing {NewPubKeyName} with the pattern in the Exchange...",
    "translation": "Storing {NewPubKeyName} with the pattern in the Exchange..."
  },
  {
    "id": "key '{Org____pattern}' not found in resources returned from exchange",
    "translation": "key '{Org____pattern}' not found in resources returned from exchange"
  },
  {
    "id": "verifying deployment_overrides string in service {I__1}, serviceVersion number {J__1}",
    "translation": "verifying deployment_overrides string in service {I__1}, serviceVersion number {J__1}"
  },
  {
    "id": "problem verifying deployment_overrides string in service {I__1}, serviceVersion number {J__1} with {KeyFilePath}: {Err}",
    "translation": "problem verifying deployment_overrides string in service {I__1}, serviceVersion number {J__1} with {KeyFilePath}: {Err}"
  },
  {
    "id": "Deployment_overrides string in service {I__1}, serviceVersion number {J__1} was not signed with the private key associated with this public key {KeyFilePath}.",
    "translation": "Deployment_overrides string in service {I__1}, serviceVersion number {J__1} was not signed with the private key associated with this public key {KeyFilePath}."
  },
  {
    "id": "All signatures verified",
    "translation": "All signatures verified"
  },
  {
    "id": "Are you sure you want to remove pattern {Org}/{Pattern} from the Horizon Exchange?",
    "translation": "Are you sure you want to remove pattern {Org}/{Pattern} from the Horizon Exchange?"
  },
  {
    "id": "key '{KeyName}' not found",
    "translation": "key '{KeyName}' not found"
  },
  {
    "id": "Note: The following secret bindings are not required by any services for this pattern:",
    "translation": "Note: The following secret bindings are not required by any services for this pattern:"
  },
  {
    "id": "Note: The fully qualified binding secret name is 'openhorizon/<node_org>/<secret_binding_name>'. The binding secret cannot be verified in the secret manager for a public pattern because the node organization can be different from the pattern organization.",
    "translation": "Note: The fully qualified binding secret name is 'openhorizon/<node_org>/<secret_binding_name>'. The binding secret cannot be verified in the secret manager for a public pattern because the node organization can be different from the pattern organization."
  },
  {
    "id": "No secret is defined for any of the services. The secret binding is not needed: {SecretBinding}.",
    "translation": "No secret is defined for any of the services. The secret binding is not needed: {SecretBinding}."
  },
  {
    "id": "-f can only be used when one service is specified.",
    "translation": "-f can only be used when one service is specified."
  },
  {
    "id": "-F can only be used when -f is specified.",
    "translation": "-F can only be used when -f is specified."
  },
  {
    "id": "failed to marshal 'hzn exchange service list' output: {Err}",
    "translation": "failed to marshal 'hzn exchange service list' output: {Err}"
  },
  {
    "id": "service '{Service}' not found in org {SvcOrg}",
    "translation": "service '{Service}' not found in org {SvcOrg}"
  },
  {
    "id": "Ignoring -f because the clusterDeployment attribute is empty for this service.",
    "translation": "Ignoring -f because the clusterDeployment attribute is empty for this service."
  },
  {
    "id": "Flag -K cannot be specified without -k flag.",
    "translation": "Flag -K cannot be specified without -k flag."
  },
  {
    "id": "Flags -I and -P are mutually exclusive.",
    "translation": "Flags -I and -P are mutually exclusive."
  },
  {
    "id": "Need to set 'true' or 'false' when specifying flag --public.",
    "translation": "Need to set 'true' or 'false' when specifying flag --public."
  },
  {
    "id": "failed to parse {Public}: {Err}",
    "translation": "failed to parse {Public}: {Err}"
  },
  {
    "id": "Error validating the input service: {Err}",
    "translation": "Error validating the input service: {Err}"
  },
  {
    "id": "Adding service policy for service: {ServiceAddPolicyService}",
    "translation": "Adding service policy for service: {ServiceAddPolicyService}"
  },
  {
    "id": "Service policy added for service: {ServiceAddPolicyService}",
    "translation": "Service policy added for service: {ServiceAddPolicyService}"
  },
  {
    "id": "Service {Org}/{ExchId} exists in the Exchange, do you want to overwrite it?",
    "translation": "Service {Org}/{ExchId} exists in the Exchange, do you want to overwrite it?"
  },
  {
    "id": "Storing {PubKeyNameToStore} with the service in the Exchange...",
    "translation": "Storing {PubKeyNameToStore} with the service in the Exchange..."
  },
  {
    "id": "Error: registry-token value of '{RegTok}' is not in the required format: registry:user:token. Not storing that in the Horizon exchange.",
    "translation": "Error: registry-token value of '{RegTok}' is not in the required format: registry:user:token. Not storing that in the Horizon exchange."
  },
  {
    "id": "unable to get container images from deployment configuration: {Err}",
    "translation": "unable to get container images from deployment configuration: {Err}"
  },
  {
    "id": "If you haven't already, push your docker images to the registry:",
    "translation": "If you haven't already, push your docker images to the registry:"
  },
  {
    "id": "the '{Tagdsig}' field is non-blank, but being ignored, because the '{Tagd}' field is null",
    "translation": "the '{Tagdsig}' field is non-blank, but being ignored, because the '{Tagd}' field is null"
  },
  {
    "id": "Signing service...",
    "translation": "Signing service..."
  },
  {
    "id": "unable to sign deployment config: {Err}",
    "translation": "unable to sign deployment config: {Err}"
  },
  {
    "id": "the '{Tagd}' field is a non-empty string, which implies this service is pre-signed, but the '{Tagdsig}' field is empty",
    "translation": "the '{Tagd}' field is a non-empty string, which implies this service is pre-signed, but the '{Tagdsig}' field is empty"
  },
  {
    "id": "'{Tagd}' field is invalid type. It must be either a json object or a string (for pre-signed)",
    "translation": "'{Tagd}' field is invalid type. It must be either a json object or a string (for pre-signed)"
  },
  {
    "id": "error verifying deployment string with {KeyFilePath}: {Err}",
    "translation": "error verifying deployment string with {KeyFilePath}: {Err}"
  },
  {
    "id": "Deployment string was not signed with the private key associated with this public key {KeyFilePath}.",
    "translation": "Deployment string was not signed with the private key associated with this public key {KeyFilePath}."
  },
  {
    "id": "error verifying cluster deployment string with {KeyFilePath}: {Err}",
    "translation": "error verifying cluster deployment string with {KeyFilePath}: {Err}"
  },
  {
    "id": "Cluster deployment string was not signed with the private key associated with this public key {KeyFilePath}.",
    "translation": "Cluster deployment string was not signed with the private key associated with this public key {KeyFilePath}."
  },
  {
    "id": "Are you sure you want to remove service {Svcorg}/{Service} from the Horizon Exchange?",
    "translation": "Are you sure you want to remove service {Svcorg}/{Service} from the Horizon Exchange?"
  },
  {
    "id": "keys not found",
    "translation": "keys not found"
  },
  {
    "id": "docker auth {AuthId} not found",
    "translation": "docker auth {AuthId} not found"
  },
  {
    "id": "docker auths not found",
    "translation": "docker auths not found"
  },
  {
    "id": "service '{Svcorg}/{Service}' not found.",
    "translation": "service '{Svcorg}/{Service}' not found."
  },
  {
    "id": "failed to marshal 'hzn exchange service listpolicy' output: {Err}",
    "translation": "failed to marshal 'hzn exchange service listpolicy' output: {Err}"
  },
  {
    "id": "Adding built-in property values...",
    "translation": "Adding built-in property values..."
  },
  {
    "id": "The following property values will be overridden: service.url, service.name, service.org, service.version, service.arch",
    "translation": "The following property values will be overridden: service.url, service.name, service.org, service.version, service.arch"
  },
  {
    "id": "Updating Service policy and re-evaluating all agreements based on this Service policy. Existing agreements might be cancelled and re-negotiated.",
    "translation": "Updating Service policy and re-evaluating all agreements based on this Service policy. Existing agreements might be cancelled and re-negotiated."
  },
  {
    "id": "Service policy updated.",
    "translation": "Service policy updated."
  },
  {
    "id": "Are you sure you want to remove service policy for {Svcorg}/{Service} from the Horizon Exchange?",
    "translation": "Are you sure you want to remove service policy for {Svcorg}/{Service} from the Horizon Exchange?"
  },
  {
    "id": "Removing Service policy and re-evaluating all agreements. Existing agreements might be cancelled and re-negotiated.",
    "translation": "Removing Service policy and re-evaluating all agreements. Existing agreements might be cancelled and re-negotiated."
  },
  {
    "id": "Service policy removed.",
    "translation": "Service policy removed."
  },
  {
    "id": "File {FileName} already exists, do you want to overwrite?",
    "translation": "File {FileName} already exists, do you want to overwrite?"
  },
  {
    "id": "Failed to create file {FileName}. {Err}",
    "translation": "Failed to create file {FileName}. {Err}"
  },
  {
    "id": "Failed to save the clusterDeployment operator yaml to file {FileName}. {Err}",
    "translation": "Failed to save the clusterDeployment operator yaml to file {FileName}. {Err}"
  },
  {
    "id": "The clusterDeployment operator yaml archive is saved to file {FileName}",
    "translation": "The clusterDeployment operator yaml archive is saved to file {FileName}"
  },
  {
    "id": "error getting kube deployment configuration: {Err}",
    "translation": "error getting kube deployment configuration: {Err}"
  },
  {
    "id": "error decoding the cluster deployment configuration: {Err}",
    "translation": "error decoding the cluster deployment configuration: {Err}"
  },
  {
    "id": "service id does not exist in the Exchange: {SvcOrg}/{SvcId}",
    "translation": "service id does not exist in the Exchange: {SvcOrg}/{SvcId}"
  },
  {
    "id": "failed to marshal 'hzn exchange service listnode' output: {Err}",
    "translation": "failed to marshal 'hzn exchange service listnode' output: {Err}"
  },
  {
    "id": "user '{TrimPrefixtheUser_}' not found in org {Org}",
    "translation": "user '{TrimPrefixtheUser_}' not found in org {Org}"
  },
  {
    "id": "failed to marshal 'exchange user list' output: {Err}",
    "translation": "failed to marshal 'exchange user list' output: {Err}"
  },
  {
    "id": "failed to check exchange version, error: {Err}",
    "translation": "failed to check exchange version, error: {Err}"
  },
  {
    "id": "an email must be specified because the Exchange API version is less than {USEREMAILOPTIONALEXCHANGEVERSION}.",
    "translation": "an email must be specified because the Exchange API version is less than {USEREMAILOPTIONALEXCHANGEVERSION}."
  },
  {
    "id": "Only users in the root org can be hubadmins.",
    "translation": "Only users in the root org can be hubadmins."
  },
  {
    "id": "Users in the root org must be hubadmins. Omit the -H option.",
    "translation": "Users in the root org must be hubadmins. Omit the -H option."
  },
  {
    "id": "A user in the root org cannot be an org admin.",
    "translation": "A user in the root org cannot be an org admin."
  },
  {
    "id": "Warning: this will also delete all Exchange resources owned by this user (nodes, services, patterns, etc). Are you sure you want to remove user {Org}/{User} from the Horizon Exchange?",
    "translation": "Warning: this will also delete all Exchange resources owned by this user (nodes, services, patterns, etc). Are you sure you want to remove user {Org}/{User} from the Horizon Exchange?"
  },
  {
    "id": "The current exchange version {ExchangeVersion} is not a valid version string.",
    "translation": "The current exchange version {ExchangeVersion} is not a valid version string."
  },
  {
    "id": "Failed to compare the versions. {Err}",
    "translation": "Failed to compare the versions. {Err}"
  },
  {
    "id": "failed to marshal 'key list' output: {Err}",
    "translation": "failed to marshal 'key list' output: {Err}"
  },
  {
    "id": "horizon api trust output did not include 'pem' key",
    "translation": "horizon api trust output did not include 'pem' key"
  },
  {
    "id": "Creating RSA PSS private and public keys, and an x509 certificate for distribution. This is a CPU-intensive operation and, depending on key length and platform, may take a while. Key generation on an amd64 or ppc64 system using the default key length will complete in less than 1 minute.",
    "translation": "Creating RSA PSS private and public keys, and an x509 certificate for distribution. This is a CPU-intensive operation and, depending on key length and platform, may take a while. Key generation on an amd64 or ppc64 system using the default key length will complete in less than 1 minute."
  },
  {
    "id": "failed to create a new key pair: {Err}",
    "translation": "failed to create a new key pair: {Err}"
  },
  {
    "id": "Move private key file from {PrivKeyName} to {PrivKeyFile}",
    "translation": "Move private key file from {PrivKeyName} to {PrivKeyFile}"
  },
  {
    "id": "failed to move private key file from {PrivKeyName} to {PrivKeyFile}. {Err}",
    "translation": "failed to move private key file from {PrivKeyName} to {PrivKeyFile}. {Err}"
  },
  {
    "id": "Move public key file from {PubKeyName} to {PubKeyFile}.",
    "translation": "Move public key file from {PubKeyName} to {PubKeyFile}."
  },
  {
    "id": "failed to move public key file from {PubKeyName} to {PubKeyFile}. {Err}",
    "translation": "failed to move public key file from {PubKeyName} to {PubKeyFile}. {Err}"
  },
  {
    "id": "Created keys:\n \t{PrivKeyFile}\n\t{PubKeyFile}",
    "translation": "Created keys:\n \t{PrivKeyFile}\n\t{PubKeyFile}"
  },
  {
    "id": "asked to import the created public key, but can not determine the name.",
    "translation": "asked to import the created public key, but can not determine the name."
  },
  {
    "id": "Importing public key file {PubKeyFile} to the Horizon agent.",
    "translation": "Importing public key file {PubKeyFile} to the Horizon agent."
  },
  {
    "id": "{PubKeyFile} imported to the Horizon agent",
    "translation": "{PubKeyFile} imported to the Horizon agent"
  },
  {
    "id": "Public key '{KeyName}' removed from the Horizon agent.",
    "translation": "Public key '{KeyName}' removed from the Horizon agent."
  },
  {
    "id": "-d is mutually exclusive with -k and -K",
    "translation": "-d is mutually exclusive with -k and -K"
  },
  {
    "id": "Creating directory {OutputDirPub}.",
    "translation": "Creating directory {OutputDirPub}."
  },
  {
    "id": "{PrivKeyFile} is a directory. Please specify a file name.",
    "translation": "{PrivKeyFile} is a directory. Please specify a file name."
  },
  {
    "id": "File {PrivKeyFile} and {PubKeyFile} exist, do you want to overwrite?",
    "translation": "File {PrivKeyFile} and {PubKeyFile} exist, do you want to overwrite?"
  },
  {
    "id": "File {PrivKeyFile} exists, do you want to overwrite?",
    "translation": "File {PrivKeyFile} exists, do you want to overwrite?"
  },
  {
    "id": "Deleting file {PrivKeyFile}.",
    "translation": "Deleting file {PrivKeyFile}."
  },
  {
    "id": "cleaned {String} resulted in an empty string.",
    "translation": "cleaned {String} resulted in an empty string."
  },
  {
    "id": "plugin context must include 'currentDir' as the current directory of the service definition file",
    "translation": "plugin context must include 'currentDir' as the current directory of the service definition file"
  },
  {
    "id": "unable to read kube operator {DepoperatorYamlArchive}, error {Err}",
    "translation": "unable to read kube operator {DepoperatorYamlArchive}, error {Err}"
  },
  {
    "id": "failed to marshal {KUBEDEPLOYMENTCONFIGTYPE} deployment string {Dep}, error {Err}",
    "translation": "failed to marshal {KUBEDEPLOYMENTCONFIGTYPE} deployment string {Dep}, error {Err}"
  },
  {
    "id": "problem signing {KUBEDEPLOYMENTCONFIGTYPE} deployment string: {Err}",
    "translation": "problem signing {KUBEDEPLOYMENTCONFIGTYPE} deployment string: {Err}"
  },
  {
    "id": "operatorYamlArchive must have a string type value, has {C}",
    "translation": "operatorYamlArchive must have a string type value, has {C}"
  },
  {
    "id": "operatorYamlArchive must be non-empty strings",
    "translation": "operatorYamlArchive must be non-empty strings"
  },
  {
    "id": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' not supported for services using a {KUBEDEPLOYMENTCONFIGTYPE} deployment configuration",
    "translation": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' not supported for services using a {KUBEDEPLOYMENTCONFIGTYPE} deployment configuration"
  },
  {
    "id": "failed to marshal 'hzn metering list' output: {Err}",
    "translation": "failed to marshal 'hzn metering list' output: {Err}"
  },
  {
    "id": "Using '{NewImage}' in 'deployment' field instead of '{Image}'",
    "translation": "Using '{NewImage}' in 'deployment' field instead of '{Image}'"
  },
  {
    "id": "failed to marshal deployment string {Dep}, error {Err}",
    "translation": "failed to marshal deployment string {Dep}, error {Err}"
  },
  {
    "id": "problem signing deployment string: {Err}",
    "translation": "problem signing deployment string: {Err}"
  },
  {
    "id": "each service defined under 'deployment.services' must be a json object (with strings as the keys)",
    "translation": "each service defined under 'deployment.services' must be a json object (with strings as the keys)"
  },
  {
    "id": "service '{SvcName}' defined under 'deployment.services' does not have mandatory 'image' field",
    "translation": "service '{SvcName}' defined under 'deployment.services' does not have mandatory 'image' field"
  },
  {
    "id": "service '{SvcName}' defined under 'deployment.services' has unrecognized field '{K}'. See https://github.com/open-horizon/anax/blob/master/doc/deployment_string.md",
    "translation": "service '{SvcName}' defined under 'deployment.services' has unrecognized field '{K}'. See https://github.com/open-horizon/anax/blob/master/doc/deployment_string.md"
  },
  {
    "id": "service '{SvcName}' defined under 'deployment.services' has a malformed ports value {DepSvck}, error {Err}",
    "translation": "service '{SvcName}' defined under 'deployment.services' has a malformed ports value {DepSvck}, error {Err}"
  },
  {
    "id": "service '{SvcName}' defined under 'deployment.services' is mapping a port {PortBinding} to the default Horizon API port {AnaxAPIPortDefault}. This service will fail when deployed on a node which has not changed the default Horizon API port.",
    "translation": "service '{SvcName}' defined under 'deployment.services' is mapping a port {PortBinding} to the default Horizon API port {AnaxAPIPortDefault}. This service will fail when deployed on a node which has not changed the default Horizon API port."
  },
  {
    "id": "the 'deployment' field must contain the 'services' field, whose value must be a json object (with strings as the keys)",
    "translation": "the 'deployment' field must contain the 'services' field, whose value must be a json object (with strings as the keys)"
  },
  {
    "id": "the 'deployment' field must contain either the native Horizon deployment config or the Helm deployment config, whose value must be a json object (with strings as the keys)",
    "translation": "the 'deployment' field must contain either the native Horizon deployment config or the Helm deployment config, whose value must be a json object (with strings as the keys)"
  },
  {
    "id": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to start file sync service, {Sserr}",
    "translation": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to start file sync service, {Sserr}"
  },
  {
    "id": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to get service dependencies, {Derr}",
    "translation": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to get service dependencies, {Derr}"
  },
  {
    "id": "Starting dependencies.",
    "translation": "Starting dependencies."
  },
  {
    "id": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to generate test agreementId, {Aerr}",
    "translation": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to generate test agreementId, {Aerr}"
  },
  {
    "id": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to start service dependencies, {Perr}",
    "translation": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to start service dependencies, {Perr}"
  },
  {
    "id": "'{SERVICECOMMAND} {SERVICESTOPCOMMAND}' unable to stop service dependencies, {Err}",
    "translation": "'{SERVICECOMMAND} {SERVICESTOPCOMMAND}' unable to stop service dependencies, {Err}"
  },
  {
    "id": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to stop file sync service, {Sserr}",
    "translation": "'{SERVICECOMMAND} {SERVICESTARTCOMMAND}' unable to stop file sync service, {Sserr}"
  },
  {
    "id": "Stopped service.",
    "translation": "Stopped service."
  },
  {
    "id": "failed to marshal 'hzn nmp status' output: {Err}",
    "translation": "failed to marshal 'hzn nmp status' output: {Err}"
  },
  {
    "id": "The following node management policy will be re-evaluated: {NmpName}.",
    "translation": "The following node management policy will be re-evaluated: {NmpName}."
  },
  {
    "id": "No node management policy for this node.",
    "translation": "No node management policy for this node."
  },
  {
    "id": "The following node management policies will be re-evaluated: {JoinallIDs_}.",
    "translation": "The following node management policies will be re-evaluated: {JoinallIDs_}."
  },
  {
    "id": "Failed to get proper response from Horizon agent",
    "translation": "Failed to get proper response from Horizon agent"
  },
  {
    "id": "Horizon CLI version: {HORIZONVERSION}",
    "translation": "Horizon CLI version: {HORIZONVERSION}"
  },
  {
    "id": "Horizon Agent version: {HorizonVersion}",
    "translation": "Horizon Agent version: {HorizonVersion}"
  },
  {
    "id": "Horizon Agent version: failed to get.",
    "translation": "Horizon Agent version: failed to get."
  },
  {
    "id": "Horizon Agent HZN Environment Variables are:",
    "translation": "Horizon Agent HZN Environment Variables are:"
  },
  {
    "id": "HZN_ORG_ID: {Org}",
    "translation": "HZN_ORG_ID: {Org}"
  },
  {
    "id": "HZN_EXCHANGE_USER_AUTH: {UserPw}",
    "translation": "HZN_EXCHANGE_USER_AUTH: {UserPw}"
  },
  {
    "id": "HZN_EXCHANGE_URL: {ExchUrl}",
    "translation": "HZN_EXCHANGE_URL: {ExchUrl}"
  },
  {
    "id": "HZN_FSS_CSSURL: {CssUrl}",
    "translation": "HZN_FSS_CSSURL: {CssUrl}"
  },
  {
    "id": "HZN_AGBOT_URL: {AgbotUrl}",
    "translation": "HZN_AGBOT_URL: {AgbotUrl}"
  },
  {
    "id": "Invalid agent file type specified. Valid types include: {String}",
    "translation": "Invalid agent file type specified. Valid types include: {String}"
  },
  {
    "id": "--version must specify a valid version range, a valid version string or \"latest\"",
    "translation": "--version must specify a valid version range, a valid version string or \"latest\""
  },
  {
    "id": "failed to check version range {FileVersion}: {Err}",
    "translation": "failed to check version range {FileVersion}: {Err}"
  },
  {
    "id": "error comparing agent file versions: {Err}",
    "translation": "error comparing agent file versions: {Err}"
  },
  {
    "id": "must specify --type with --version-only",
    "translation": "must specify --type with --version-only"
  },
  {
    "id": "Invalid manifest type specified. Valid types include: {String}",
    "translation": "Invalid manifest type specified. Valid types include: {String}"
  },
  {
    "id": "must specify --type with --id",
    "translation": "must specify --type with --id"
  },
  {
    "id": "must specify --type and --id with --long",
    "translation": "must specify --type and --id with --long"
  },
  {
    "id": "Cannot specify --skipDigitalSig with --hash",
    "translation": "Cannot specify --skipDigitalSig with --hash"
  },
  {
    "id": "Cannot specify --skipDigitalSig with --hashAlgo",
    "translation": "Cannot specify --skipDigitalSig with --hashAlgo"
  },
  {
    "id": "Invalid value for --hashAlgo, please use SHA1 or SHA256",
    "translation": "Invalid value for --hashAlgo, please use SHA1 or SHA256"
  },
  {
    "id": "Digital sign with {HashAlgorithm} will be performed for data integrity.",
    "translation": "Digital sign with {HashAlgorithm} will be performed for data integrity."
  },
  {
    "id": "Failed to digital sign the manifest {ManifestFile}, Error: {Err}",
    "translation": "Failed to digital sign the manifest {ManifestFile}, Error: {Err}"
  },
  {
    "id": "Digital sign finished.",
    "translation": "Digital sign finished."
  },
  {
    "id": "Manifest {ManOrg}/{ObjectID} updated in the Management Hub",
    "translation": "Manifest {ManOrg}/{ObjectID} updated in the Management Hub"
  },
  {
    "id": "Manifest {ManOrg}/{ObjectID} added to the Management Hub",
    "translation": "Manifest {ManOrg}/{ObjectID} added to the Management Hub"
  },
  {
    "id": "The following files were specified in the manifest file but do not exist in the Management Hub:",
    "translation": "The following files were specified in the manifest file but do not exist in the Management Hub:"
  },
  {
    "id": "The version specified in SoftwareUpgrade is not a valid version string or \"latest\": {Version}",
    "translation": "The version specified in SoftwareUpgrade is not a valid version string or \"latest\": {Version}"
  },
  {
    "id": "File \"{ManFile}\" version \"{Version}\" of type \"agent_software_files\".",
    "translation": "File \"{ManFile}\" version \"{Version}\" of type \"agent_software_files\"."
  },
  {
    "id": "The version specified in CertificateUpgrade is not a valid version string or \"latest\": {Version}",
    "translation": "The version specified in CertificateUpgrade is not a valid version string or \"latest\": {Version}"
  },
  {
    "id": "File \"{ManFile}\" version \"{Version}\" of type \"agent_cert_files\".",
    "translation": "File \"{ManFile}\" version \"{Version}\" of type \"agent_cert_files\"."
  },
  {
    "id": "The version specified in ConfigurationUpgrade is not a valid version string or \"latest\": {Version}",
    "translation": "The version specified in ConfigurationUpgrade is not a valid version string or \"latest\": {Version}"
  },
  {
    "id": "File \"{ManFile}\" version \"{Version}\" of type \"agent_config_files\".",
    "translation": "File \"{ManFile}\" version \"{Version}\" of type \"agent_config_files\"."
  },
  {
    "id": "Run 'hzn nodemanagement agentfiles list' to get a list of valid files.",
    "translation": "Run 'hzn nodemanagement agentfiles list' to get a list of valid files."
  },
  {
    "id": "Are you sure you want to remove manifest {ManOrg}/{ManifestId} from the Management Hub?",
    "translation": "Are you sure you want to remove manifest {ManOrg}/{ManifestId} from the Management Hub?"
  },
  {
    "id": "Manifest '{ManOrg}/{ManifestId}' of type '{ManifestType}' not found in the Management Hub",
    "translation": "Manifest '{ManOrg}/{ManifestId}' of type '{ManifestType}' not found in the Management Hub"
  },
  {
    "id": "Manifest {ManOrg}/{ManifestId} deleted from the Management Hub",
    "translation": "Manifest {ManOrg}/{ManifestId} deleted from the Management Hub"
  },
  {
    "id": "Fill in this section to perform a software upgrade of the agent. Remove this section to prevent software upgrade.",
    "translation": "Fill in this section to perform a software upgrade of the agent. Remove this section to prevent software upgrade."
  },
  {
    "id": "A list of agent software files stored in the Management Hub.",
    "translation": "A list of agent software files stored in the Management Hub."
  },
  {
    "id": "Run 'hzn nm agentfiles list -t agent_software_files' to get a list of available files.",
    "translation": "Run 'hzn nm agentfiles list -t agent_software_files' to get a list of available files."
  },
  {
    "id": "The agent software version this manifest applies to. Specify \"latest\" to get the most recent version.",
    "translation": "The agent software version this manifest applies to. Specify \"latest\" to get the most recent version."
  },
  {
    "id": "Fill in this section to upgrade the agent certificate. Remove this section to prevent certificate upgrade.",
    "translation": "Fill in this section to upgrade the agent certificate. Remove this section to prevent certificate upgrade."
  },
  {
    "id": "The name of a certificate file stored in the Management Hub. Default is \"agent-install.crt\".",
    "translation": "The name of a certificate file stored in the Management Hub. Default is \"agent-install.crt\"."
  },
  {
    "id": "Run 'hzn nm agentfiles list -t agent_cert_files' to get a list of available files.",
    "translation": "Run 'hzn nm agentfiles list -t agent_cert_files' to get a list of available files."
  },
  {
    "id": "The agent certificate version this manifest applies to. Specify \"latest\" to get the most recent version.",
    "translation": "The agent certificate version this manifest applies to. Specify \"latest\" to get the most recent version."
  },
  {
    "id": "Fill in this section to upgrade the agent config. Remove this section to prevent config upgrade.",
    "translation": "Fill in this section to upgrade the agent config. Remove this section to prevent config upgrade."
  },
  {
    "id": "The name of a config file stored in the Management Hub. Default is \"agent-install.crt\".",
    "translation": "The name of a config file stored in the Management Hub. Default is \"agent-install.crt\"."
  },
  {
    "id": "Run 'hzn nm agentfiles list -t agent_config_files' to get a list of available files.",
    "translation": "Run 'hzn nm agentfiles list -t agent_config_files' to get a list of available files."
  },
  {
    "id": "The agent config version this manifest applies to. Specify \"latest\" to get the most recent version.",
    "translation": "The agent config version this manifest applies to. Specify \"latest\" to get the most recent version."
  },
  {
    "id": "deployment config {Dep} is not supported",
    "translation": "deployment config {Dep} is not supported"
  },
  {
    "id": "starting test mode is not supported for this project",
    "translation": "starting test mode is not supported for this project"
  },
  {
    "id": "stopping test mode is not supported for this project",
    "translation": "stopping test mode is not supported for this project"
  },
  {
    "id": "failed to marshal 'hzn policy list' output: {Err}",
    "translation": "failed to marshal 'hzn policy list' output: {Err}"
  },
  {
    "id": "Warning: built-in properties {IncludedBuiltIns} are read-only. The given value will be ignored.",
    "translation": "Warning: built-in properties {IncludedBuiltIns} are read-only. The given value will be ignored."
  },
  {
    "id": "Updating Horizon node policy and re-evaluating all agreements based on this node policy. Existing agreements might be cancelled and re-negotiated.",
    "translation": "Updating Horizon node policy and re-evaluating all agreements based on this node policy. Existing agreements might be cancelled and re-negotiated."
  },
  {
    "id": "Warning: This command is deprecated. It will continue to be supported until the next major release. Please use 'hzn policy update' to update the node policy.",
    "translation": "Warning: This command is deprecated. It will continue to be supported until the next major release. Please use 'hzn policy update' to update the node policy."
  },
  {
    "id": "Horizon node policy updated.",
    "translation": "Horizon node policy updated."
  },
  {
    "id": "Are you sure you want to remove the node policy?",
    "translation": "Are you sure you want to remove the node policy?"
  },
  {
    "id": "Removing Horizon node policy and re-evaluating all agreements. Existing agreements might be cancelled and re-negotiated.",
    "translation": "Removing Horizon node policy and re-evaluating all agreements. Existing agreements might be cancelled and re-negotiated."
  },
  {
    "id": "A list of policy properties that describe the object.",
    "translation": "A list of policy properties that describe the object."
  },
  {
    "id": "It applies to both deployment and node management.",
    "translation": "It applies to both deployment and node management."
  },
  {
    "id": "It usually containts the built-in node properties.",
    "translation": "It usually containts the built-in node properties."
  },
  {
    "id": "It should be empty unless deployment and managment have the same constraint expressions.",
    "translation": "It should be empty unless deployment and managment have the same constraint expressions."
  },
  {
    "id": "Policies that are used for deployment only.",
    "translation": "Policies that are used for deployment only."
  },
  {
    "id": "A list of policy properties for deployment.",
    "translation": "A list of policy properties for deployment."
  },
  {
    "id": "It overwrites the properties with the same name on the top level.",
    "translation": "It overwrites the properties with the same name on the top level."
  },
  {
    "id": "A list of constraints for deployment.",
    "translation": "A list of constraints for deployment."
  },
  {
    "id": "It overwrites all the constraints on the top level if not empty.",
    "translation": "It overwrites all the constraints on the top level if not empty."
  },
  {
    "id": "Policies that are used for node management only.",
    "translation": "Policies that are used for node management only."
  },
  {
    "id": "A list of policy properties for node management.",
    "translation": "A list of policy properties for node management."
  },
  {
    "id": "A list of constraints for node management.",
    "translation": "A list of constraints for node management."
  },
  {
    "id": "Unable to create UserInputFile object from file {FilePath}. {Err}",
    "translation": "Unable to create UserInputFile object from file {FilePath}. {Err}"
  },
  {
    "id": "Incorrect node policy format in file {JsonFilePath}: {Err}",
    "translation": "Incorrect node policy format in file {JsonFilePath}: {Err}"
  },
  {
    "id": "Reading input file {InputFile}...",
    "translation": "Reading input file {InputFile}..."
  },
  {
    "id": "Retrieved user input object from file {InputFile}: {UserInputFileObj}",
    "translation": "Retrieved user input object from file {InputFile}: {UserInputFileObj}"
  },
  {
    "id": "Note: No properties and constraints are specified under 'deployment' attribute in the node policy file {NodepolicyFlag}. The top level properties and constraints will be used.",
    "translation": "Note: No properties and constraints are specified under 'deployment' attribute in the node policy file {NodepolicyFlag}. The top level properties and constraints will be used."
  },
  {
    "id": "hzn cli is configured with exchange url {ExchUrlBase} from {ExchangeUrlLocation} and the horizon agent is configured with exchange url {AnaxExchUrlBase} from {ExchangeUrlLocationFromAnax}. hzn register will not work with mismatched exchange urls.",
    "translation": "hzn cli is configured with exchange url {ExchUrlBase} from {ExchangeUrlLocation} and the horizon agent is configured with exchange url {AnaxExchUrlBase} from {ExchangeUrlLocationFromAnax}. hzn register will not work with mismatched exchange urls."
  },
  {
    "id": "Horizon Exchange base URL: {ExchUrlBase}",
    "translation": "Horizon Exchange base URL: {ExchUrlBase}"
  },
  {
    "id": "Failed to read value for HZN_REGISTER_HTTP_TIMEOUT from config file. Continuing with default value.",
    "translation": "Failed to read value for HZN_REGISTER_HTTP_TIMEOUT from config file. Continuing with default value."
  },
  {
    "id": "this Horizon node is already registered or in the process of being registered. If you want to register it differently, run 'hzn unregister' first.",
    "translation": "this Horizon node is already registered or in the process of being registered. If you want to register it differently, run 'hzn unregister' first."
  },
  {
    "id": "Failed to get proper response from the Horizon agent",
    "translation": "Failed to get proper response from the Horizon agent"
  },
  {
    "id": "Unable to read machine serial number, error: {MsErr}. Continuing device registration.",
    "translation": "Unable to read machine serial number, error: {MsErr}. Continuing device registration."
  },
  {
    "id": "Node ID not specified, using machine serial number {NodeId} as node ID.",
    "translation": "Node ID not specified, using machine serial number {NodeId} as node ID."
  },
  {
    "id": "Node ID not specified, and machine serial number not found, generating random node ID.",
    "translation": "Node ID not specified, and machine serial number not found, generating random node ID."
  },
  {
    "id": "Unable to generate random node id, error: {Err}",
    "translation": "Unable to generate random node id, error: {Err}"
  },
  {
    "id": "Generated random node ID: {NodeId}.",
    "translation": "Generated random node ID: {NodeId}."
  },
  {
    "id": "Using node ID '{NodeId}' from the Horizon agent",
    "translation": "Using node ID '{NodeId}' from the Horizon agent"
  },
  {
    "id": "could not create a random token",
    "translation": "could not create a random token"
  },
  {
    "id": "Generated random node token",
    "translation": "Generated random node token"
  },
  {
    "id": "node '{Org}/{NodeId}' does not exist in the Exchange with the specified token, and the -u flag was not specified to provide exchange user credentials to create/update it.",
    "translation": "node '{Org}/{NodeId}' does not exist in the Exchange with the specified token, and the -u flag was not specified to provide exchange user credentials to create/update it."
  },
  {
    "id": "Node {Org}/{NodeId} does not exist in the Exchange with the specified token, creating/updating it...",
    "translation": "Node {Org}/{NodeId} does not exist in the Exchange with the specified token, creating/updating it..."
  },
  {
    "id": "Updating node token...",
    "translation": "Updating node token..."
  },
  {
    "id": "Node type mismatch. The node type '{NodeType}' does not match the node type '{NodeType_1}' of the Exchange node {NId}.",
    "translation": "Node type mismatch. The node type '{NodeType}' does not match the node type '{NodeType_1}' of the Exchange node {NId}."
  },
  {
    "id": "Node {Org}/{NodeId} exists in the Exchange",
    "translation": "Node {Org}/{NodeId} exists in the Exchange"
  },
  {
    "id": "Updating node name...",
    "translation": "Updating node name..."
  },
  {
    "id": "No pattern or node policy is specified. Will proceed with the existing node policy.",
    "translation": "No pattern or node policy is specified. Will proceed with the existing node policy."
  },
  {
    "id": "Will proceed with the given node policy.",
    "translation": "Will proceed with the given node policy."
  },
  {
    "id": "Pattern {ExchangePattern} defined for the node on the Exchange.",
    "translation": "Pattern {ExchangePattern} defined for the node on the Exchange."
  },
  {
    "id": "Cannot proceed with the given pattern {Pattern} because it is different from the pattern {ExchangePattern} defined for the node in the Exchange.\nTo correct the problem, please do one of the following: \n\t- Remove the node from the Exchange \n\t- Remove the pattern from the node in the Exchange \n\t- Register without a pattern (the pattern defined on the node in the Exchange will be used)",
    "translation": "Cannot proceed with the given pattern {Pattern} because it is different from the pattern {ExchangePattern} defined for the node in the Exchange.\nTo correct the problem, please do one of the following: \n\t- Remove the node from the Exchange \n\t- Remove the pattern from the node in the Exchange \n\t- Register without a pattern (the pattern defined on the node in the Exchange will be used)"
  },
  {
    "id": "pattern '{Patorg}/{Patname}' not found from the Exchange.",
    "translation": "pattern '{Patorg}/{Patname}' not found from the Exchange."
  },
  {
    "id": "Cannot proceed with the given pattern {Pattern} because it does not include any services.",
    "translation": "Cannot proceed with the given pattern {Pattern} because it does not include any services."
  },
  {
    "id": "Will proceed with the given pattern {Pattern}.",
    "translation": "Will proceed with the given pattern {Pattern}."
  },
  {
    "id": "Cannot proceed with the given HA group {HaGroupName} because the node is in a different HA group {ExistingHagrName}.",
    "translation": "Cannot proceed with the given HA group {HaGroupName} because the node is in a different HA group {ExistingHagrName}."
  },
  {
    "id": "The node is already in the HA group '{HaGroupName}'.",
    "translation": "The node is already in the HA group '{HaGroupName}'."
  },
  {
    "id": "Node {Org}/{NodeId} is in HA group {HaGroupName}.",
    "translation": "Node {Org}/{NodeId} is in HA group {HaGroupName}."
  },
  {
    "id": "Updating the node policy...",
    "translation": "Updating the node policy..."
  },
  {
    "id": "Initializing the Horizon node with node type '{NodeType}'...",
    "translation": "Initializing the Horizon node with node type '{NodeType}'..."
  },
  {
    "id": "Error initializing the node: {Err}",
    "translation": "Error initializing the node: {Err}"
  },
  {
    "id": "Setting global variables...",
    "translation": "Setting global variables..."
  },
  {
    "id": "Error setting user input variables: {Err}",
    "translation": "Error setting user input variables: {Err}"
  },
  {
    "id": "Note: no input file was specified. This is only valid if none of the services need variables set.",
    "translation": "Note: no input file was specified. This is only valid if none of the services need variables set."
  },
  {
    "id": "However, if there is 'userInput' specified in the node already in the Exchange, the userInput will be used.",
    "translation": "However, if there is 'userInput' specified in the node already in the Exchange, the userInput will be used."
  },
  {
    "id": "Changing Horizon state to configured to register this node with Horizon...",
    "translation": "Changing Horizon state to configured to register this node with Horizon..."
  },
  {
    "id": "Error setting node state to configured: {Err}",
    "translation": "Error setting node state to configured: {Err}"
  },
  {
    "id": "NOTE: The -s flag is currently not supported for nodeType: {NodeType}. Node registration will complete without waiting for the service to start.",
    "translation": "NOTE: The -s flag is currently not supported for nodeType: {NodeType}. Node registration will complete without waiting for the service to start."
  },
  {
    "id": "Horizon node is registered. Workload agreement negotiation should begin shortly. Run 'hzn agreement list' to view.",
    "translation": "Horizon node is registered. Workload agreement negotiation should begin shortly. Run 'hzn agreement list' to view."
  },
  {
    "id": "Horizon node is registered. Workload services should begin executing shortly.",
    "translation": "Horizon node is registered. Workload services should begin executing shortly."
  },
  {
    "id": "Please specify the user credentials with -u flag in order to create or update the HA group {Org}/{HaGroupName}.",
    "translation": "Please specify the user credentials with -u flag in order to create or update the HA group {Org}/{HaGroupName}."
  },
  {
    "id": "Creating HA group {Org}/{HaGroupName} ...",
    "translation": "Creating HA group {Org}/{HaGroupName} ..."
  },
  {
    "id": "HA group {Org}/{HaGroupName} created with node {NodeId} as the member.",
    "translation": "HA group {Org}/{HaGroupName} created with node {NodeId} as the member."
  },
  {
    "id": "Adding node {NodeId} to HA group {Org}/{HaGroupName} ...",
    "translation": "Adding node {NodeId} to HA group {Org}/{HaGroupName} ..."
  },
  {
    "id": "Node {NodeId} is added to HA group {HaGroupName}.",
    "translation": "Node {NodeId} is added to HA group {HaGroupName}."
  },
  {
    "id": "Critical error encountered in registration. Attempting to undo registration steps to leave node in the unregistered state.",
    "translation": "Critical error encountered in registration. Attempting to undo registration steps to leave node in the unregistered state."
  },
  {
    "id": "Error unregistering node. Retrying.",
    "translation": "Error unregistering node. Retrying."
  },
  {
    "id": "Failed to unregister node. Attempting a deep clean of the node.",
    "translation": "Failed to unregister node. Attempting a deep clean of the node."
  },
  {
    "id": "Failed to deep clean the node. {Err}",
    "translation": "Failed to deep clean the node. {Err}"
  },
  {
    "id": "Registration failed. Node successfully returned to unregistered state.",
    "translation": "Registration failed. Node successfully returned to unregistered state."
  },
  {
    "id": "Bad HTTP code {HttpCode} returned from node.",
    "translation": "Bad HTTP code {HttpCode} returned from node."
  },
  {
    "id": "Call to anax to create node timed out.",
    "translation": "Call to anax to create node timed out."
  },
  {
    "id": "Call to {Resource} timed out.",
    "translation": "Call to {Resource} timed out."
  },
  {
    "id": "Registration failed because {Matches0}",
    "translation": "Registration failed because {Matches0}"
  },
  {
    "id": "{Errstring}. Please define variables for service {Matches2} in the input file {InputFile}. Run 'hzn unregister' and then 'hzn register...' again",
    "translation": "{Errstring}. Please define variables for service {Matches2} in the input file {InputFile}. Run 'hzn unregister' and then 'hzn register...' again"
  },
  {
    "id": "{Errstring}. Please create an input file, define variables for service {Matches2}. Run 'hzn unregister' and then 'hzn register...' again with the -f flag to specify the input file.",
    "translation": "{Errstring}. Please create an input file, define variables for service {Matches2}. Run 'hzn unregister' and then 'hzn register...' again with the -f flag to specify the input file."
  },
  {
    "id": "Call to node to change state to configured executed successfully.",
    "translation": "Call to node to change state to configured executed successfully."
  },
  {
    "id": "Timeout on the call to update node config state. Checking if it is updated.",
    "translation": "Timeout on the call to update node config state. Checking if it is updated."
  },
  {
    "id": "Node state is unconfigured.",
    "translation": "Node state is unconfigured."
  },
  {
    "id": "Timeout waiting for node config state call to return.",
    "translation": "Timeout waiting for node config state call to return."
  },
  {
    "id": "Waiting for node config state update call to return. {TotalWait} seconds until timeout.",
    "translation": "Waiting for node config state update call to return. {TotalWait} seconds until timeout."
  },
  {
    "id": "-o and -p are mutually exclusive with <nodeorg> and <pattern> arguments.",
    "translation": "-o and -p are mutually exclusive with <nodeorg> and <pattern> arguments."
  },
  {
    "id": "Please specify the node organization id.",
    "translation": "Please specify the node organization id."
  },
  {
    "id": "-s must be specified if --serviceorg is specified",
    "translation": "-s must be specified if --serviceorg is specified"
  },
  {
    "id": "When registering with a node policy, '*' is not a valid value for -s.",
    "translation": "When registering with a node policy, '*' is not a valid value for -s."
  },
  {
    "id": "When registering with a pattern, if -s is '*' (i.e. all the top-level services in the pattern will be monitored), --serviceorg must be omitted.",
    "translation": "When registering with a pattern, if -s is '*' (i.e. all the top-level services in the pattern will be monitored), --serviceorg must be omitted."
  },
  {
    "id": "invalid node ID: {Err}",
    "translation": "invalid node ID: {Err}"
  },
  {
    "id": "the HA group organization ID '{HaGroupOrg}' is different from the node organization ID '{Org}'.",
    "translation": "the HA group organization ID '{HaGroupOrg}' is different from the node organization ID '{Org}'."
  },
  {
    "id": "invalid HA group ID: {Err}",
    "translation": "invalid HA group ID: {Err}"
  },
  {
    "id": "Could not validate. {Err}",
    "translation": "Could not validate. {Err}"
  },
  {
    "id": "A-Za-z0-9, unicode characters and special symbols !-*+()?.,:&@ are only allowed.",
    "translation": "A-Za-z0-9, unicode characters and special symbols !-*+()?.,:&@ are only allowed."
  },
  {
    "id": "Whitespace is not permitted.",
    "translation": "Whitespace is not permitted."
  },
  {
    "id": "invalid version range '{Vr}': {Err}",
    "translation": "invalid version range '{Vr}': {Err}"
  },
  {
    "id": "unable to verify that {Version} is within {VRange}, error {Err}",
    "translation": "unable to verify that {Version} is within {VRange}, error {Err}"
  },
  {
    "id": "found no services in the Exchange matching: org={Org}, url={Url}, arch={Arch}",
    "translation": "found no services in the Exchange matching: org={Org}, url={Url}, arch={Arch}"
  },
  {
    "id": "error comparing version {ServiceshighestKey} with version {Version}. {Err}",
    "translation": "error comparing version {ServiceshighestKey} with version {Version}. {Err}"
  },
  {
    "id": "found no services in the Exchange matched: org={Org}, specRef={Url}, version range={VersionRanges}, arch={Arch}",
    "translation": "found no services in the Exchange matched: org={Org}, specRef={Url}, version range={VersionRanges}, arch={Arch}"
  },
  {
    "id": "Ignoring version {VersionRange} of service {Org}/{Url} with node type mismatch: the service type '{ServiceType}' does not match the node type '{NodeType}' of the Exchange node {NId}.",
    "translation": "Ignoring version {VersionRange} of service {Org}/{Url} with node type mismatch: the service type '{ServiceType}' does not match the node type '{NodeType}' of the Exchange node {NId}."
  },
  {
    "id": "found: {Org}, {Url}, {Arch}, {VersionRange}",
    "translation": "found: {Org}, {Url}, {Arch}, {VersionRange}"
  },
  {
    "id": "Failed to check if deployment requires privileged: {Err}",
    "translation": "Failed to check if deployment requires privileged: {Err}"
  },
  {
    "id": "did not find pattern '{PatKey}' as expected",
    "translation": "did not find pattern '{PatKey}' as expected"
  },
  {
    "id": "Ignoring service that is a different architecture: {ServiceOrg}, {ServiceURL}, {ServiceArch}",
    "translation": "Ignoring service that is a different architecture: {ServiceOrg}, {ServiceURL}, {ServiceArch}"
  },
  {
    "id": "failed to marshal the user input template file: {Err}",
    "translation": "failed to marshal the user input template file: {Err}"
  },
  {
    "id": "problem writing the user input template file: {Err}",
    "translation": "problem writing the user input template file: {Err}"
  },
  {
    "id": "Wrote {InputFile}",
    "translation": "Wrote {InputFile}"
  },
  {
    "id": "failed to marshal the example node policy file: {Err}",
    "translation": "failed to marshal the example node policy file: {Err}"
  },
  {
    "id": "problem writing the example node policy file: {Err}",
    "translation": "problem writing the example node policy file: {Err}"
  },
  {
    "id": "One or more of services contain privileged in the deployment string. Make sure your node policy file allows privileged. A sample node policy file has been created: {NodePolicySampleFile}",
    "translation": "One or more of services contain privileged in the deployment string. Make sure your node policy file allows privileged. A sample node policy file has been created: {NodePolicySampleFile}"
  },
  {
    "id": "Failed",
    "translation": "Failed"
  },
  {
    "id": "Progress so far: no agreements formed yet",
    "translation": "Progress so far: no agreements formed yet"
  },
  {
    "id": "Progress so far: agreement proposal has been received",
    "translation": "Progress so far: agreement proposal has been received"
  },
  {
    "id": "Progress so far: agreement is accepted",
    "translation": "Progress so far: agreement is accepted"
  },
  {
    "id": "Progress so far: agreement is finalized",
    "translation": "Progress so far: agreement is finalized"
  },
  {
    "id": "Progress so far: service is created",
    "translation": "Progress so far: service is created"
  },
  {
    "id": "Progress so far: execution is started",
    "translation": "Progress so far: execution is started"
  },
  {
    "id": "Success",
    "translation": "Success"
  },
  {
    "id": "Status of the services you are watching:",
    "translation": "Status of the services you are watching:"
  },
  {
    "id": "{Org}/{Name} \t{Status1}",
    "translation": "{Org}/{Name} \t{Status1}"
  },
  {
    "id": "--timeout must be a positive integer.",
    "translation": "--timeout must be a positive integer."
  },
  {
    "id": "Waiting for up to {WaitTimeout} seconds for following services to start:",
    "translation": "Waiting for up to {WaitTimeout} seconds for following services to start:"
  },
  {
    "id": "{Org}/{Name}",
    "translation": "{Org}/{Name}"
  },
  {
    "id": "Timeout waiting for some services to successfully start. Analyzing possible reasons for the timeout...",
    "translation": "Timeout waiting for some services to successfully start. Analyzing possible reasons for the timeout..."
  },
  {
    "id": "The following services failed during execution:",
    "translation": "The following services failed during execution:"
  },
  {
    "id": "{Org}/{Name}: {FailedDescArri}",
    "translation": "{Org}/{Name}: {FailedDescArri}"
  },
  {
    "id": "The following services might need more time to start executing, continuing analysis:",
    "translation": "The following services might need more time to start executing, continuing analysis:"
  },
  {
    "id": "The following services are not deployed to the node, continuing analysis:",
    "translation": "The following services are not deployed to the node, continuing analysis:"
  },
  {
    "id": "Currently, there are {Lenags} active agreements on this node. Use `hzn agreement list' to see the agreements that have been formed so far.",
    "translation": "Currently, there are {Lenags} active agreements on this node. Use `hzn agreement list' to see the agreements that have been formed so far."
  },
  {
    "id": "Currently, there are no active agreements on this node.",
    "translation": "Currently, there are no active agreements on this node."
  },
  {
    "id": "Currently, there are no errors recorded in the node's event log.",
    "translation": "Currently, there are no errors recorded in the node's event log."
  },
  {
    "id": "Use the 'hzn deploycheck all -b' or 'hzn deploycheck all -B' command to verify that node, service configuration and deployment policy are compatible.",
    "translation": "Use the 'hzn deploycheck all -b' or 'hzn deploycheck all -B' command to verify that node, service configuration and deployment policy are compatible."
  },
  {
    "id": "Using the 'hzn deploycheck all -p' command to verify that node, service configuration and pattern are compatible.",
    "translation": "Using the 'hzn deploycheck all -p' command to verify that node, service configuration and pattern are compatible."
  },
  {
    "id": "Command output:",
    "translation": "Command output:"
  },
  {
    "id": "Using the 'hzn deploycheck userinput -p' command to verify that node, service configuration and pattern are compatible.",
    "translation": "Using the 'hzn deploycheck userinput -p' command to verify that node, service configuration and pattern are compatible."
  },
  {
    "id": "The secret binding compatibility cannot be verified because the user credential is not provided. Please use the 'hzn deploycheck secretbinding -p' command to verify.",
    "translation": "The secret binding compatibility cannot be verified because the user credential is not provided. Please use the 'hzn deploycheck secretbinding -p' command to verify."
  },
  {
    "id": "unable to convert eventlog source, error: {Err}",
    "translation": "unable to convert eventlog source, error: {Err}"
  },
  {
    "id": "{Format2006_01_02_150405}: {Message}",
    "translation": "{Format2006_01_02_150405}: {Message}"
  },
  {
    "id": "The following errors were found in the node's event log and are related to {Org}/{Name}. Use 'hzn eventlog list -s severity=error -l' to see the full detail of the errors.",
    "translation": "The following errors were found in the node's event log and are related to {Org}/{Name}. Use 'hzn eventlog list -s severity=error -l' to see the full detail of the errors."
  },
  {
    "id": "Analysis complete.",
    "translation": "Analysis complete."
  },
  {
    "id": "Importing key file name: {Name}",
    "translation": "Importing key file name: {Name}"
  },
  {
    "id": "unsupported key file type extension: {Name}",
    "translation": "unsupported key file type extension: {Name}"
  },
  {
    "id": "Key \"{Name}\" successfully added to the SDO owner services.",
    "translation": "Key \"{Name}\" successfully added to the SDO owner services."
  },
  {
    "id": "Key \"{Name}\" successfully downloaded to {FileName} from the SDO owner services.",
    "translation": "Key \"{Name}\" successfully downloaded to {FileName} from the SDO owner services."
  },
  {
    "id": "Listing SDO keys.",
    "translation": "Listing SDO keys."
  },
  {
    "id": "json unmarshalling HTTP response '{StringrespBodyBytes}' from {ApiMsg}: {Err}",
    "translation": "json unmarshalling HTTP response '{StringrespBodyBytes}' from {ApiMsg}: {Err}"
  },
  {
    "id": "SDO key name {KeyName} not found",
    "translation": "SDO key name {KeyName} not found"
  },
  {
    "id": "failed to marshal 'hzn sdo keys list' output: {Err}",
    "translation": "failed to marshal 'hzn sdo keys list' output: {Err}"
  },
  {
    "id": "Downloading SDO key \"{KeyName}\".",
    "translation": "Downloading SDO key \"{KeyName}\"."
  },
  {
    "id": "Removing SDO key \"{KeyName}\".",
    "translation": "Removing SDO key \"{KeyName}\"."
  },
  {
    "id": "Key \"{KeyName}\" successfully deleted from the SDO owner services.",
    "translation": "Key \"{KeyName}\" successfully deleted from the SDO owner services."
  },
  {
    "id": "Creating SDO key template at \"{OutputFile}\".",
    "translation": "Creating SDO key template at \"{OutputFile}\"."
  },
  {
    "id": "parsing the json: {Err}",
    "translation": "parsing the json: {Err}"
  },
  {
    "id": "Key template successfully written to {FileName}.",
    "translation": "Key template successfully written to {FileName}."
  },
  {
    "id": "Invalid key name. Key \"{KeyName}\" does not exist in org \"{Org}\".",
    "translation": "Invalid key name. Key \"{KeyName}\" does not exist in org \"{Org}\"."
  },
  {
    "id": "Invalid metadata file. Key \"{Name}\" already exists in SDO owner services for org \"{Org}\".",
    "translation": "Invalid metadata file. Key \"{Name}\" already exists in SDO owner services for org \"{Org}\"."
  },
  {
    "id": "Invalid metadata file. Key already exists in SDO owner services for org \"{Org}\".",
    "translation": "Invalid metadata file. Key already exists in SDO owner services for org \"{Org}\"."
  },
  {
    "id": "Invalid credentials. User \"{User}\" cannot access keys in org \"{Org}\" with given credentials.",
    "translation": "Invalid credentials. User \"{User}\" cannot access keys in org \"{Org}\" with given credentials."
  },
  {
    "id": "Invalid credentials. User \"{User}\" cannot access key \"{KeyName}\" in org \"{Org}\" with given credentials.",
    "translation": "Invalid credentials. User \"{User}\" cannot access key \"{KeyName}\" in org \"{Org}\" with given credentials."
  },
  {
    "id": "reading the bytes from {KeyFileName}: {Err}",
    "translation": "reading the bytes from {KeyFileName}: {Err}"
  },
  {
    "id": "parsing the json from {KeyFileName}: {Err}",
    "translation": "parsing the json from {KeyFileName}: {Err}"
  },
  {
    "id": "given metadata file {KeyFileName} has missing fields:\n{Err}",
    "translation": "given metadata file {KeyFileName} has missing fields:\n{Err}"
  },
  {
    "id": "given metadata file {KeyFileName} has unsupported key name.\n{Err}",
    "translation": "given metadata file {KeyFileName} has unsupported key name.\n{Err}"
  },
  {
    "id": "given metadata file {KeyFileName} has unsupported country name.\n{Err}",
    "translation": "given metadata file {KeyFileName} has unsupported country name.\n{Err}"
  },
  {
    "id": "JSON Body:{StringkeyBytes}",
    "translation": "JSON Body:{StringkeyBytes}"
  },
  {
    "id": "field \"key_name\" is missing",
    "translation": "field \"key_name\" is missing"
  },
  {
    "id": "field \"{Field}\" is missing",
    "translation": "field \"{Field}\" is missing"
  },
  {
    "id": "Please fill these and try again.",
    "translation": "Please fill these and try again."
  },
  {
    "id": "Key name can only contain lowercase characters, numbers, and hyphens",
    "translation": "Key name can only contain lowercase characters, numbers, and hyphens"
  },
  {
    "id": "Country name must be a 2 Letter Country Code",
    "translation": "Country name must be a 2 Letter Country Code"
  },
  {
    "id": "Inspecting voucher file name: {Name}",
    "translation": "Inspecting voucher file name: {Name}"
  },
  {
    "id": "WARNING: \"hzn voucher inspect\" is deprecated and will be removed in a future release. Please use \"hzn sdo voucher inspect\" instead.",
    "translation": "WARNING: \"hzn voucher inspect\" is deprecated and will be removed in a future release. Please use \"hzn sdo voucher inspect\" instead."
  },
  {
    "id": "parsing json: {Error}",
    "translation": "parsing json: {Error}"
  },
  {
    "id": "base64 decoding {T4}: {Err}",
    "translation": "base64 decoding {T4}: {Err}"
  },
  {
    "id": "decoding {T4} yielded {N} bytes",
    "translation": "decoding {T4} yielded {N} bytes"
  },
  {
    "id": "did not find any rendezvous server URLs in the voucher",
    "translation": "did not find any rendezvous server URLs in the voucher"
  },
  {
    "id": "decoding UUID: {Error}",
    "translation": "decoding UUID: {Error}"
  },
  {
    "id": "Listing imported SDO vouchers.",
    "translation": "Listing imported SDO vouchers."
  },
  {
    "id": "Invalid voucher name. Voucher \"{Voucher}\" does not exist in org \"{Org}\".",
    "translation": "Invalid voucher name. Voucher \"{Voucher}\" does not exist in org \"{Org}\"."
  },
  {
    "id": "Invalid credentials. User \"{User}\" cannot access vouchers in org \"{Org}\" with given credentials.",
    "translation": "Invalid credentials. User \"{User}\" cannot access vouchers in org \"{Org}\" with given credentials."
  },
  {
    "id": "Invalid credentials. User \"{User}\" cannot access voucher \"{Voucher}\" in org \"{Org}\" with given credentials.",
    "translation": "Invalid credentials. User \"{User}\" cannot access voucher \"{Voucher}\" in org \"{Org}\" with given credentials."
  },
  {
    "id": "failed to marshal 'hzn sdo voucher list' output: {Err}",
    "translation": "failed to marshal 'hzn sdo voucher list' output: {Err}"
  },
  {
    "id": "WARNING: \"hzn voucher list\" is deprecated and will be removed in a future release. Please use \"hzn sdo voucher list\" instead.",
    "translation": "WARNING: \"hzn voucher list\" is deprecated and will be removed in a future release. Please use \"hzn sdo voucher list\" instead."
  },
  {
    "id": "Voucher \"{Device}\" successfully downloaded to {FileName} from the SDO owner services.",
    "translation": "Voucher \"{Device}\" successfully downloaded to {FileName} from the SDO owner services."
  },
  {
    "id": "Importing voucher file name: {Name}",
    "translation": "Importing voucher file name: {Name}"
  },
  {
    "id": "-e, --policy, and -p are all mutually exclusive (can specify one of them)",
    "translation": "-e, --policy, and -p are all mutually exclusive (can specify one of them)"
  },
  {
    "id": "accessing {PolicyFilePath}: {Err}",
    "translation": "accessing {PolicyFilePath}: {Err}"
  },
  {
    "id": "reading voucher file {Name}: {Err}",
    "translation": "reading voucher file {Name}: {Err}"
  },
  {
    "id": "unsupported voucher file type extension: {Name}",
    "translation": "unsupported voucher file type extension: {Name}"
  },
  {
    "id": "WARNING: \"hzn voucher import\" is deprecated and will be removed in a future release. Please use \"hzn sdo voucher import\" instead.",
    "translation": "WARNING: \"hzn voucher import\" is deprecated and will be removed in a future release. Please use \"hzn sdo voucher import\" instead."
  },
  {
    "id": "creating zip reader for {Name}: {Err}",
    "translation": "creating zip reader for {Name}: {Err}"
  },
  {
    "id": "opening file {Name} within zip for {Name_1}: {Err}",
    "translation": "opening file {Name} within zip for {Name_1}: {Err}"
  },
  {
    "id": "Importing {VoucherFileName} for device {Uuid}, using rendezvous servers {RendezvousUrls__} ...",
    "translation": "Importing {VoucherFileName} for device {Uuid}, using rendezvous servers {RendezvousUrls__} ..."
  },
  {
    "id": "Voucher imported. Node id: {NodeId}, token: {NodeToken}",
    "translation": "Voucher imported. Node id: {NodeId}, token: {NodeToken}"
  },
  {
    "id": "reading the policy file {PolicyFilePath}: {Err}",
    "translation": "reading the policy file {PolicyFilePath}: {Err}"
  },
  {
    "id": "Using node policy: {PolicyStr}",
    "translation": "Using node policy: {PolicyStr}"
  },
  {
    "id": "Invalid voucher file format: {StringrespBodyBytes}.",
    "translation": "Invalid voucher file format: {StringrespBodyBytes}."
  },
  {
    "id": "Adding/updating node...",
    "translation": "Adding/updating node..."
  },
  {
    "id": "reading the service cofiguration user input file {UserInputFileName}: {Err}",
    "translation": "reading the service cofiguration user input file {UserInputFileName}: {Err}"
  },
  {
    "id": "failed to unmarshal json string '{PolicyStr}': {Err}",
    "translation": "failed to unmarshal json string '{PolicyStr}': {Err}"
  },
  {
    "id": "Incorrect policy format in '{PolicyStr}': {Err}",
    "translation": "Incorrect policy format in '{PolicyStr}': {Err}"
  },
  {
    "id": "Adding/updating node policy...",
    "translation": "Adding/updating node policy..."
  },
  {
    "id": "failed to unmarshal REST API response: {Perr}",
    "translation": "failed to unmarshal REST API response: {Perr}"
  },
  {
    "id": "failed to marshal 'agbot API' output: {Jerr}",
    "translation": "failed to marshal 'agbot API' output: {Jerr}"
  },
  {
    "id": "Vault component not found in the management hub. Retrying...",
    "translation": "Vault component not found in the management hub. Retrying..."
  },
  {
    "id": "-f is mutually exclusive with --secretDetail.",
    "translation": "-f is mutually exclusive with --secretDetail."
  },
  {
    "id": "Must specify either -f or --secretDetail.",
    "translation": "Must specify either -f or --secretDetail."
  },
  {
    "id": "Incorrect secret name given: {SecretName}",
    "translation": "Incorrect secret name given: {SecretName}"
  },
  {
    "id": "Secret \"{SecretName}\" already exists in the secrets manager. Do you want to overwrite?",
    "translation": "Secret \"{SecretName}\" already exists in the secrets manager. Do you want to overwrite?"
  },
  {
    "id": "Secret \"{SecretName}\" successfully added to the secrets manager.",
    "translation": "Secret \"{SecretName}\" successfully added to the secrets manager."
  },
  {
    "id": "Are you sure you want to remove secret {SecretName} from the secrets manager?",
    "translation": "Are you sure you want to remove secret {SecretName} from the secrets manager?"
  },
  {
    "id": "Secret \"{SecretName}\" successfully deleted from the secrets manager.",
    "translation": "Secret \"{SecretName}\" successfully deleted from the secrets manager."
  },
  {
    "id": "Bad request, secret name \"{SecretName}\" invalid.",
    "translation": "Bad request, secret name \"{SecretName}\" invalid."
  },
  {
    "id": "Permission denied, user \"{User}\" cannot access \"{SecretName}\".",
    "translation": "Permission denied, user \"{User}\" cannot access \"{SecretName}\"."
  },
  {
    "id": "Secret \"{SecretName}\" not found in the secrets manager, nothing to remove.",
    "translation": "Secret \"{SecretName}\" not found in the secrets manager, nothing to remove."
  },
  {
    "id": "Vault component not found in the management hub.",
    "translation": "Vault component not found in the management hub."
  },
  {
    "id": "failed to marshal 'hzn service list' output: {Err}",
    "translation": "failed to marshal 'hzn service list' output: {Err}"
  },
  {
    "id": "The node is not registered.",
    "translation": "The node is not registered."
  },
  {
    "id": "Found service {SpecRef} with service id {InstanceId}.",
    "translation": "Found service {SpecRef} with service id {InstanceId}."
  },
  {
    "id": "Service {RefUrl} is not running on the node.",
    "translation": "Service {RefUrl} is not running on the node."
  },
  {
    "id": "Service {RefUrl} version {ServiceVersion} is not running on the node.",
    "translation": "Service {RefUrl} version {ServiceVersion} is not running on the node."
  },
  {
    "id": "Deployment unmarshalling error: {Err}",
    "translation": "Deployment unmarshalling error: {Err}"
  },
  {
    "id": "Service definition {ServiceName} consists of more than one container: {JoincNames__}. Please specify the service name by -c flag",
    "translation": "Service definition {ServiceName} consists of more than one container: {JoincNames__}. Please specify the service name by -c flag"
  },
  {
    "id": "Service logs are unavailable: {Err}",
    "translation": "Service logs are unavailable: {Err}"
  },
  {
    "id": "Container {ContainerName} is not running as part of service {ServiceName}.",
    "translation": "Container {ContainerName} is not running as part of service {ServiceName}."
  },
  {
    "id": "Container {ContainerName} is not running as part of service {ServiceName} version.",
    "translation": "Container {ContainerName} is not running as part of service {ServiceName} version."
  },
  {
    "id": "Could not find service {ServiceName} running on the node.",
    "translation": "Could not find service {ServiceName} running on the node."
  },
  {
    "id": "Could not find service {ServiceName} version {ServiceVersion} running on the node.",
    "translation": "Could not find service {ServiceName} version {ServiceVersion} running on the node."
  },
  {
    "id": "Displaying log messages of container {ContainerName} for service {Name} with service id {InstanceId}.",
    "translation": "Displaying log messages of container {ContainerName} for service {Name} with service id {InstanceId}."
  },
  {
    "id": "failed to marshal 'hzn service registered' output: {Err}",
    "translation": "failed to marshal 'hzn service registered' output: {Err}"
  },
  {
    "id": "failed to marshal 'hzn service configstate' output: {Err}",
    "translation": "failed to marshal 'hzn service configstate' output: {Err}"
  },
  {
    "id": "all the registered services",
    "translation": "all the registered services"
  },
  {
    "id": "service {ServiceOrg}/{ServiceUrl} version {ServiceVer}",
    "translation": "service {ServiceOrg}/{ServiceUrl} version {ServiceVer}"
  },
  {
    "id": "all the versions for service {ServiceOrg}/{ServiceUrl}",
    "translation": "all the versions for service {ServiceOrg}/{ServiceUrl}"
  },
  {
    "id": "all the registered services from organization {ServiceOrg}",
    "translation": "all the registered services from organization {ServiceOrg}"
  },
  {
    "id": "Please specify the service name for version {ServiceVer}.",
    "translation": "Please specify the service name for version {ServiceVer}."
  },
  {
    "id": "Please specify the organization for service {ServiceUrl}.",
    "translation": "Please specify the organization for service {ServiceUrl}."
  },
  {
    "id": "Are you sure you want to suspend {Msgpart} for this Horizon node?",
    "translation": "Are you sure you want to suspend {Msgpart} for this Horizon node?"
  },
  {
    "id": "Suspending {Msgpart}, cancelling related agreements, stopping related service containers...",
    "translation": "Suspending {Msgpart}, cancelling related agreements, stopping related service containers..."
  },
  {
    "id": "Service suspending request successfully sent, please use 'hzn agreement' and 'docker ps' to make sure the related agreements and service containers are removed. It may take a couple of minutes.",
    "translation": "Service suspending request successfully sent, please use 'hzn agreement' and 'docker ps' to make sure the related agreements and service containers are removed. It may take a couple of minutes."
  },
  {
    "id": "Error returned suspending the service: {RespBody}",
    "translation": "Error returned suspending the service: {RespBody}"
  },
  {
    "id": "Error: {Err}",
    "translation": "Error: {Err}"
  },
  {
    "id": "Resuming {Msgpart} ...",
    "translation": "Resuming {Msgpart} ..."
  },
  {
    "id": "Service resuming request successfully sent, please use 'hzn agreement' and 'docker ps' to make sure the related agreements and service containers are started. It may take a couple of minutes.",
    "translation": "Service resuming request successfully sent, please use 'hzn agreement' and 'docker ps' to make sure the related agreements and service containers are started. It may take a couple of minutes."
  },
  {
    "id": "Error returned resuming the service: {RespBody}",
    "translation": "Error returned resuming the service: {RespBody}"
  },
  {
    "id": "failed to marshal 'hzn status -l' output: {Err}",
    "translation": "failed to marshal 'hzn status -l' output: {Err}"
  },
  {
    "id": "failed to marshal 'hzn status' output: {Err}",
    "translation": "failed to marshal 'hzn status' output: {Err}"
  },
  {
    "id": "must specify exchange credentials to access the model management service",
    "translation": "must specify exchange credentials to access the model management service"
  },
  {
    "id": "object '{ObjId}' of type '{ObjType}' not found in org {Org}",
    "translation": "object '{ObjId}' of type '{ObjType}' not found in org {Org}"
  },
  {
    "id": "Verifying data with digital signature....",
    "translation": "Verifying data with digital signature...."
  },
  {
    "id": "Failed to verify data: {Error}",
    "translation": "Failed to verify data: {Error}"
  },
  {
    "id": "Verifying digital signature is done.",
    "translation": "Verifying digital signature is done."
  },
  {
    "id": "Failed to save data for object '{ObjId}' of type '{ObjType}' to file {FileName}, err: {Err}",
    "translation": "Failed to save data for object '{ObjId}' of type '{ObjType}' to file {FileName}, err: {Err}"
  },
  {
    "id": "Data of object {ObjId} saved to file {FileName}",
    "translation": "Data of object {ObjId} saved to file {FileName}"
  },
  {
    "id": "must specify exchange credentials to access the model management service.",
    "translation": "must specify exchange credentials to access the model management service."
  },
  {
    "id": "Invalid --policy/-p value: {DestPolicy}, --policy/-p should be true or false",
    "translation": "Invalid --policy/-p value: {DestPolicy}, --policy/-p should be true or false"
  },
  {
    "id": "Invalid --data value: {WithData}, --data should be true or false",
    "translation": "Invalid --data value: {WithData}, --data should be true or false"
  },
  {
    "id": "must omit --policy or set it to true when filtering by --service, --property, or --updateTime",
    "translation": "must omit --policy or set it to true when filtering by --service, --property, or --updateTime"
  },
  {
    "id": "service should be in format service-org/service-name",
    "translation": "service should be in format service-org/service-name"
  },
  {
    "id": "updateTime should be in RC3339 format: yyyy-MM-ddTHH:mm:ssZ, or yyyy-MM-dd",
    "translation": "updateTime should be in RC3339 format: yyyy-MM-ddTHH:mm:ssZ, or yyyy-MM-dd"
  },
  {
    "id": "must specify destinationType if set destinationId",
    "translation": "must specify destinationType if set destinationId"
  },
  {
    "id": "expirationTimeBefore should be specified 'now' or timestamp in RC3339 format: yyyy-MM-ddTHH:mm:ssZ",
    "translation": "expirationTimeBefore should be specified 'now' or timestamp in RC3339 format: yyyy-MM-ddTHH:mm:ssZ"
  },
  {
    "id": "Invalid --deleted value: {WithData}, --data should be true or false",
    "translation": "Invalid --deleted value: {WithData}, --data should be true or false"
  },
  {
    "id": "destination detail for object '{ObjectID}' of type '{ObjectType}' not found in org {Org}",
    "translation": "destination detail for object '{ObjectID}' of type '{ObjectType}' not found in org {Org}"
  },
  {
    "id": "failed to marshal 'hzn mms object list' output: {Err1}",
    "translation": "failed to marshal 'hzn mms object list' output: {Err1}"
  },
  {
    "id": "Listing objects in org {Org}:",
    "translation": "Listing objects in org {Org}:"
  },
  {
    "id": "Required: A unique identifier of the object.",
    "translation": "Required: A unique identifier of the object."
  },
  {
    "id": "Required: The type of the object.",
    "translation": "Required: The type of the object."
  },
  {
    "id": "Required: The organization ID of the object (an object belongs to exactly one organization).",
    "translation": "Required: The organization ID of the object (an object belongs to exactly one organization)."
  },
  {
    "id": "The node id (without org prefix) where the object should be placed.",
    "translation": "The node id (without org prefix) where the object should be placed."
  },
  {
    "id": "If omitted the object is sent to all nodes with the same destinationType.",
    "translation": "If omitted the object is sent to all nodes with the same destinationType."
  },
  {
    "id": "Delete this field when you are using destinationPolicy.",
    "translation": "Delete this field when you are using destinationPolicy."
  },
  {
    "id": "The pattern in use by nodes that should receive this object.",
    "translation": "The pattern in use by nodes that should receive this object."
  },
  {
    "id": "If omitted (and if destinationsList is omitted too) the object is broadcast to all known nodes.",
    "translation": "If omitted (and if destinationsList is omitted too) the object is broadcast to all known nodes."
  },
  {
    "id": "Delete this field when you are using policy.",
    "translation": "Delete this field when you are using policy."
  },
  {
    "id": "The list of destinations as an array of pattern:nodeId pairs that should receive this object.",
    "translation": "The list of destinations as an array of pattern:nodeId pairs that should receive this object."
  },
  {
    "id": "If provided, destinationType and destinationID must be omitted.",
    "translation": "If provided, destinationType and destinationID must be omitted."
  },
  {
    "id": "The policy specification that should be used to distribute this object.",
    "translation": "The policy specification that should be used to distribute this object."
  },
  {
    "id": "Delete these fields if the target node is using a pattern.",
    "translation": "Delete these fields if the target node is using a pattern."
  },
  {
    "id": "Valid types are string, bool, int, float, list of strings (comma separated), version.",
    "translation": "Valid types are string, bool, int, float, list of strings (comma separated), version."
  },
  {
    "id": "Type can be omitted if the type is discernable from the value, e.g. unquoted true is boolean.",
    "translation": "Type can be omitted if the type is discernable from the value, e.g. unquoted true is boolean."
  },
  {
    "id": "A list of constraint expressions of the form <property name> <operator> <property value>, separated by boolean operators AND (&&) or OR (||).",
    "translation": "A list of constraint expressions of the form <property name> <operator> <property value>, separated by boolean operators AND (&&) or OR (||)."
  },
  {
    "id": "The service(s) that will use this object.",
    "translation": "The service(s) that will use this object."
  },
  {
    "id": "Set to '*' to indicate services of any hardware architecture.",
    "translation": "Set to '*' to indicate services of any hardware architecture."
  },
  {
    "id": "A version range.",
    "translation": "A version range."
  },
  {
    "id": "A timestamp/date indicating when the object expires (it is automatically deleted). The timestamp should be provided in RFC3339 format.",
    "translation": "A timestamp/date indicating when the object expires (it is automatically deleted). The timestamp should be provided in RFC3339 format."
  },
  {
    "id": "Arbitrary string value. The value is not semantically interpreted. The Model Management System does not keep multiple version of an object.",
    "translation": "Arbitrary string value. The value is not semantically interpreted. The Model Management System does not keep multiple version of an object."
  },
  {
    "id": "An arbitrary description.",
    "translation": "An arbitrary description."
  },
  {
    "id": "A timestamp/date as to when this object should automatically be activated. The timestamp should be provided in RFC3339 format.",
    "translation": "A timestamp/date as to when this object should automatically be activated. The timestamp should be provided in RFC3339 format."
  },
  {
    "id": "must specify --id with --type",
    "translation": "must specify --id with --type"
  },
  {
    "id": "cannot specify --id and --type with --def",
    "translation": "cannot specify --id and --type with --def"
  },
  {
    "id": "must specify either --type and --id or --def",
    "translation": "must specify either --type and --id or --def"
  },
  {
    "id": "cannot specify --pattern with --def",
    "translation": "cannot specify --pattern with --def"
  },
  {
    "id": "cannot specify --skipDigitalSig with --hash",
    "translation": "cannot specify --skipDigitalSig with --hash"
  },
  {
    "id": "cannot specify --skipDigitalSig with --hashAlgo",
    "translation": "cannot specify --skipDigitalSig with --hashAlgo"
  },
  {
    "id": "invalid value for --hashAlgo, please use SHA1 or SHA256",
    "translation": "invalid value for --hashAlgo, please use SHA1 or SHA256"
  },
  {
    "id": "failed to unmarshal definition file {ObjMetadataFile}: {Err}",
    "translation": "failed to unmarshal definition file {ObjMetadataFile}: {Err}"
  },
  {
    "id": "Digital sign with {HashAlgorithm} will be performed for data integrity. It will delay the MMS object publish.",
    "translation": "Digital sign with {HashAlgorithm} will be performed for data integrity. It will delay the MMS object publish."
  },
  {
    "id": "failed to digital sign the file {ObjFile}, Error: {Err}",
    "translation": "failed to digital sign the file {ObjFile}, Error: {Err}"
  },
  {
    "id": "Upload object in chunk, chunk size is: {ChunkSize}",
    "translation": "Upload object in chunk, chunk size is: {ChunkSize}"
  },
  {
    "id": "Object {ObjFile} uploaded to org {Org} in the Model Management Service",
    "translation": "Object {ObjFile} uploaded to org {Org} in the Model Management Service"
  },
  {
    "id": "Object status: {Stringresp}",
    "translation": "Object status: {Stringresp}"
  },
  {
    "id": "Object status is still {Stringresp} after {Count} try",
    "translation": "Object status is still {Stringresp} after {Count} try"
  },
  {
    "id": "Object {ObjectID} added to org {Org} in the Model Management Service",
    "translation": "Object {ObjectID} added to org {Org} in the Model Management Service"
  },
  {
    "id": "Object {ObjId} deleted from org {Org} in the Model Management Service",
    "translation": "Object {ObjId} deleted from org {Org} in the Model Management Service"
  },
  {
    "id": "failed to marshal 'hzn mms object types' output: {Err}",
    "translation": "failed to marshal 'hzn mms object types' output: {Err}"
  },
  {
    "id": "Hash value is loaded.",
    "translation": "Hash value is loaded."
  },
  {
    "id": "Start hashing the file...",
    "translation": "Start hashing the file..."
  },
  {
    "id": "Data hash is generated. Start digital signing with the data hash...",
    "translation": "Data hash is generated. Start digital signing with the data hash..."
  },
  {
    "id": "Hash algorithm {HashAlgo} is not supported",
    "translation": "Hash algorithm {HashAlgo} is not supported"
  },
  {
    "id": "unable to get file info of object file {Name}: {Err}",
    "translation": "unable to get file info of object file {Name}: {Err}"
  },
  {
    "id": "error to read object file {Name} from offset {StartOffset}: {Err}",
    "translation": "error to read object file {Name} from offset {StartOffset}: {Err}"
  },
  {
    "id": "read unexpected length of data (read data length: {N}, expected data length: {DataLength}) from object file {Name} from offset {StartOffset}: {Err}",
    "translation": "read unexpected length of data (read data length: {N}, expected data length: {DataLength}) from object file {Name} from offset {StartOffset}: {Err}"
  },
  {
    "id": "Uploading: {Size__100} {}",
    "translation": "Uploading: {Size__100} {}"
  },
  {
    "id": "Encountered HTTP error: {Err} calling MMS REST API {ApiMsg}. HTTP status: {Httpstatus}. Will retry.",
    "translation": "Encountered HTTP error: {Err} calling MMS REST API {ApiMsg}. HTTP status: {Httpstatus}. Will retry."
  },
  {
    "id": "Encountered HTTP error: {Err} calling MMS REST API {ApiMsg}. HTTP status: {Httpstatus}.",
    "translation": "Encountered HTTP error: {Err} calling MMS REST API {ApiMsg}. HTTP status: {Httpstatus}."
  },
  {
    "id": "Error during calling MMS REST API {ApiMsg}: {Error}",
    "translation": "Error during calling MMS REST API {ApiMsg}: {Error}"
  },
  {
    "id": "health status API returned HTTP code {HttpCode}",
    "translation": "health status API returned HTTP code {HttpCode}"
  },
  {
    "id": "unable to create network {NETWORKNAME} for file sync service, error {Err}",
    "translation": "unable to create network {NETWORKNAME} for file sync service, error {Err}"
  },
  {
    "id": "unable to start CSS, error {Err}",
    "translation": "unable to start CSS, error {Err}"
  },
  {
    "id": "Error checking CSS status: {Err}",
    "translation": "Error checking CSS status: {Err}"
  },
  {
    "id": "Unable to stop {MakeLabelNameCSSNAME}, error {Err}, please stop manually, Remove the css image and try 'hzn dev service start' again",
    "translation": "Unable to stop {MakeLabelNameCSSNAME}, error {Err}, please stop manually, Remove the css image and try 'hzn dev service start' again"
  },
  {
    "id": "Unable to remove CSS image, err: {Err}",
    "translation": "Unable to remove CSS image, err: {Err}"
  },
  {
    "id": "Unable to start CSS with new pulled image, error {Err}",
    "translation": "Unable to start CSS with new pulled image, error {Err}"
  },
  {
    "id": "CSS is not running correctly with new pulled image, exit.",
    "translation": "CSS is not running correctly with new pulled image, exit."
  },
  {
    "id": "unable to load file objects into CSS, error {Err}",
    "translation": "unable to load file objects into CSS, error {Err}"
  },
  {
    "id": "unable to start ESS, error {Err}",
    "translation": "unable to start ESS, error {Err}"
  },
  {
    "id": "Unable to stop {MakeLabelNameESSNAME}, error {Err}",
    "translation": "Unable to stop {MakeLabelNameESSNAME}, error {Err}"
  },
  {
    "id": "Unable to remove network {NETWORKNAME} for file sync service, error {Err}",
    "translation": "Unable to remove network {NETWORKNAME} for file sync service, error {Err}"
  },
  {
    "id": "unable to list existing docker images, error {Err}",
    "translation": "unable to list existing docker images, error {Err}"
  },
  {
    "id": "Found docker image {Name} locally.",
    "translation": "Found docker image {Name} locally."
  },
  {
    "id": "unable to pull CSS container using image {GetFSSFullImageName}, error {Err}. Set environment variable {DEVTOOLHZNFSSIMAGETAG} to use a different image tag.",
    "translation": "unable to pull CSS container using image {GetFSSFullImageName}, error {Err}. Set environment variable {DEVTOOLHZNFSSIMAGETAG} to use a different image tag."
  },
  {
    "id": "Pulled docker image {Name}.",
    "translation": "Pulled docker image {Name}."
  },
  {
    "id": "Removing docker image {Name}.",
    "translation": "Removing docker image {Name}."
  },
  {
    "id": "RemoveImageErr: {Err}",
    "translation": "RemoveImageErr: {Err}"
  },
  {
    "id": "unable to remove CSS image: {Name}, please manually remove it 'docker rmi {Name_1}'",
    "translation": "unable to remove CSS image: {Name}, please manually remove it 'docker rmi {Name_1}'"
  },
  {
    "id": "Docker image {Name} removed.",
    "translation": "Docker image {Name} removed."
  },
  {
    "id": "unable to create CSS container using image {GetFSSImageName}, error {Err}. Set environment variable {DEVTOOLHZNFSSIMAGETAG} to use a diferent image tag.",
    "translation": "unable to create CSS container using image {GetFSSImageName}, error {Err}. Set environment variable {DEVTOOLHZNFSSIMAGETAG} to use a diferent image tag."
  },
  {
    "id": "unable to start CSS container, error {Err}",
    "translation": "unable to start CSS container, error {Err}"
  },
  {
    "id": "Created {MakeLabelNameCSSNAME} container, listening on host port {GetCSSPort}",
    "translation": "Created {MakeLabelNameCSSNAME} container, listening on host port {GetCSSPort}"
  },
  {
    "id": "File sync service container {MakeLabelNameCSSNAME} listening on host port {GetCSSPort}",
    "translation": "File sync service container {MakeLabelNameCSSNAME} listening on host port {GetCSSPort}"
  },
  {
    "id": "unable to create SSL certificate for ESS, error {Err}",
    "translation": "unable to create SSL certificate for ESS, error {Err}"
  },
  {
    "id": "unable to open ESS SSL Certificate file {ESSSSLClientCertPath}, error {Err}",
    "translation": "unable to open ESS SSL Certificate file {ESSSSLClientCertPath}, error {Err}"
  },
  {
    "id": "unable to read ESS SSL Certificate file {ESSSSLClientCertPath}, error {Err}",
    "translation": "unable to read ESS SSL Certificate file {ESSSSLClientCertPath}, error {Err}"
  },
  {
    "id": "unable to open ESS SSL Certificate Key file {ESSSSLCertKeyPath}, error {Err}",
    "translation": "unable to open ESS SSL Certificate Key file {ESSSSLCertKeyPath}, error {Err}"
  },
  {
    "id": "unable to read ESS SSL Certificate Key file {ESSSSLCertKeyPath}, error {Err}",
    "translation": "unable to read ESS SSL Certificate Key file {ESSSSLCertKeyPath}, error {Err}"
  },
  {
    "id": "unable to create ESS container, error {Err}",
    "translation": "unable to create ESS container, error {Err}"
  },
  {
    "id": "unable to start ESS container, error {Err}",
    "translation": "unable to start ESS container, error {Err}"
  },
  {
    "id": "Created {MakeLabelNameESSNAME} container",
    "translation": "Created {MakeLabelNameESSNAME} container"
  },
  {
    "id": "unable to list docker containers, error {Err}",
    "translation": "unable to list docker containers, error {Err}"
  },
  {
    "id": "unable to stop docker container {Name}, error {Err}",
    "translation": "unable to stop docker container {Name}, error {Err}"
  },
  {
    "id": "unable to remove docker container {Name}, error {Err}",
    "translation": "unable to remove docker container {Name}, error {Err}"
  },
  {
    "id": "Stopped {Name} container",
    "translation": "Stopped {Name} container"
  },
  {
    "id": "Loading {FileName} into CSS",
    "translation": "Loading {FileName} into CSS"
  },
  {
    "id": "unable to open file object {FileName}, error {Err}",
    "translation": "unable to open file object {FileName}, error {Err}"
  },
  {
    "id": "unable to read file object {FileName}, error {Err}",
    "translation": "unable to read file object {FileName}, error {Err}"
  },
  {
    "id": "unable to add file {FileName} to the CSS, error {Err}",
    "translation": "unable to add file {FileName} to the CSS, error {Err}"
  },
  {
    "id": "Configuration files {FileObjects} loaded into the File sync service.",
    "translation": "Configuration files {FileObjects} loaded into the File sync service."
  },
  {
    "id": "unable to marshal CSS file PUT for {Metadata}, error {Err}",
    "translation": "unable to marshal CSS file PUT for {Metadata}, error {Err}"
  },
  {
    "id": "unable to create CSS file PUT request for {Metadata}, error {Err}",
    "translation": "unable to create CSS file PUT request for {Metadata}, error {Err}"
  },
  {
    "id": "unable to send CSS file PUT request to CSS for {Metadata}, error {Err}",
    "translation": "unable to send CSS file PUT request to CSS for {Metadata}, error {Err}"
  },
  {
    "id": "Received HTTP code: {StatusCode}",
    "translation": "Received HTTP code: {StatusCode}"
  },
  {
    "id": "unable to PUT file {Metadata} into CSS, HTTP code {StatusCode}",
    "translation": "unable to PUT file {Metadata} into CSS, HTTP code {StatusCode}"
  },
  {
    "id": "unable to create get CSS status request, error {Err}",
    "translation": "unable to create get CSS status request, error {Err}"
  },
  {
    "id": "CSS status is not ready after waiting {Timeout__checkLimit} seconds, timeout",
    "translation": "CSS status is not ready after waiting {Timeout__checkLimit} seconds, timeout"
  },
  {
    "id": "CSS status is not ready, terminating service start request.",
    "translation": "CSS status is not ready, terminating service start request."
  },
  {
    "id": "Cannot use -C flag if not performing a deep clean. Must specify -D flag to use -C flag.",
    "translation": "Cannot use -C flag if not performing a deep clean. Must specify -D flag to use -C flag."
  },
  {
    "id": "Are you sure you want to unregister this Horizon node?",
    "translation": "Are you sure you want to unregister this Horizon node?"
  },
  {
    "id": "Cannot backup eventlogs: {Err}",
    "translation": "Cannot backup eventlogs: {Err}"
  },
  {
    "id": "Unregistering this node, cancelling all agreements, stopping all workloads, and restarting Horizon...",
    "translation": "Unregistering this node, cancelling all agreements, stopping all workloads, and restarting Horizon..."
  },
  {
    "id": "Node unregistering using anax API failed. External deep clean will be attempted. Specific anax API error is: {Error}",
    "translation": "Node unregistering using anax API failed. External deep clean will be attempted. Specific anax API error is: {Error}"
  },
  {
    "id": "The node was not successfully unregistered, please use 'hzn unregister -D' to ensure the node is completely reset. Specific anax API error is: {Error}",
    "translation": "The node was not successfully unregistered, please use 'hzn unregister -D' to ensure the node is completely reset. Specific anax API error is: {Error}"
  },
  {
    "id": "{Err}\nThe node was not successfully unregistered, please use 'hzn unregister -D' to ensure the node is completely reset.",
    "translation": "{Err}\nThe node was not successfully unregistered, please use 'hzn unregister -D' to ensure the node is completely reset."
  },
  {
    "id": "Horizon node unregistered. You may now run 'hzn register ...' again, if desired.",
    "translation": "Horizon node unregistered. You may now run 'hzn register ...' again, if desired."
  },
  {
    "id": "WARNING: The node is unregistered, but an error occurred during unregistration.",
    "translation": "WARNING: The node is unregistered, but an error occurred during unregistration."
  },
  {
    "id": "The error was: {Err}",
    "translation": "The error was: {Err}"
  },
  {
    "id": "Horizon node delete call successful with return code: {Output}",
    "translation": "Horizon node delete call successful with return code: {Output}"
  },
  {
    "id": "Timeout unregistering the node.",
    "translation": "Timeout unregistering the node."
  },
  {
    "id": "Timeout in {TotalWait} seconds ...",
    "translation": "Timeout in {TotalWait} seconds ..."
  },
  {
    "id": "Waiting for Horizon node unregister to complete: {UpdateStatus}",
    "translation": "Waiting for Horizon node unregister to complete: {UpdateStatus}"
  },
  {
    "id": "{Lenags} agreements remaining to be terminated.",
    "translation": "{Lenags} agreements remaining to be terminated."
  },
  {
    "id": "No Timeout specified ...",
    "translation": "No Timeout specified ..."
  },
  {
    "id": "Starting external deep clean ...",
    "translation": "Starting external deep clean ..."
  },
  {
    "id": "Deleting local horizon DB...",
    "translation": "Deleting local horizon DB..."
  },
  {
    "id": "Restarting anax...",
    "translation": "Restarting anax..."
  },
  {
    "id": "Error resolving horizon container name: {Err}",
    "translation": "Error resolving horizon container name: {Err}"
  },
  {
    "id": "Looking for horizon container by name: {ContainerName}",
    "translation": "Looking for horizon container by name: {ContainerName}"
  },
  {
    "id": "Error during checking if anax container is running: {ErrBytes}",
    "translation": "Error during checking if anax container is running: {ErrBytes}"
  },
  {
    "id": "Restarting horizon container...",
    "translation": "Restarting horizon container..."
  },
  {
    "id": "Error during removing horizon db files from horizon container: {ErrBytes}",
    "translation": "Error during removing horizon db files from horizon container: {ErrBytes}"
  },
  {
    "id": "Error during removing policy files from horizon container: {ErrBytes}",
    "translation": "Error during removing policy files from horizon container: {ErrBytes}"
  },
  {
    "id": "Error during restarting the anax container: {ErrBytes}",
    "translation": "Error during restarting the anax container: {ErrBytes}"
  },
  {
    "id": "Could not find anax container by {ContainerName} name",
    "translation": "Could not find anax container by {ContainerName} name"
  },
  {
    "id": "Stopping horizon...",
    "translation": "Stopping horizon..."
  },
  {
    "id": "Deleting service containers...",
    "translation": "Deleting service containers..."
  },
  {
    "id": "Starting horizon...",
    "translation": "Starting horizon..."
  },
  {
    "id": "Waiting for agent service to restart and checking the node configuration state...",
    "translation": "Waiting for agent service to restart and checking the node configuration state..."
  },
  {
    "id": "Node configuration state: {State}",
    "translation": "Node configuration state: {State}"
  },
  {
    "id": "Timeout waiting for node change to 'unconfigured' state.",
    "translation": "Timeout waiting for node change to 'unconfigured' state."
  },
  {
    "id": "Error deleting container {Names0}. {Err}",
    "translation": "Error deleting container {Names0}. {Err}"
  },
  {
    "id": "Removed service container: {Names0}",
    "translation": "Removed service container: {Names0}"
  },
  {
    "id": "Error pruning docker networks. {Err}",
    "translation": "Error pruning docker networks. {Err}"
  },
  {
    "id": "Backing up eventlogs...",
    "translation": "Backing up eventlogs..."
  },
  {
    "id": "cannot marshal eventlogs from local anax DB, eventlogs will not be saved",
    "translation": "cannot marshal eventlogs from local anax DB, eventlogs will not be saved"
  },
  {
    "id": "failed to backup eventlogs file {FileName}. {Err}",
    "translation": "failed to backup eventlogs file {FileName}. {Err}"
  },
  {
    "id": "failed to save the eventlogs to file {FileName}. {Err}",
    "translation": "failed to save the eventlogs to file {FileName}. {Err}"
  },
  {
    "id": "Saved eventlog into file {FileName}",
    "translation": "Saved eventlog into file {FileName}"
  },
  {
    "id": "Unable to marshal userinput object: {Err}",
    "translation": "Unable to marshal userinput object: {Err}"
  },
  {
    "id": "A list of objects, each one containing the user inputs required for a specified service.",
    "translation": "A list of objects, each one containing the user inputs required for a specified service."
  },
  {
    "id": "The horizon org of the specified service.",
    "translation": "The horizon org of the specified service."
  },
  {
    "id": "The unique string used to identify the specified service.",
    "translation": "The unique string used to identify the specified service."
  },
  {
    "id": "The service architecture that these inputs apply to. Omit or leave blank to mean all architectures.",
    "translation": "The service architecture that these inputs apply to. Omit or leave blank to mean all architectures."
  },
  {
    "id": "The service versions that these inputs apply to. Omit or specify \"[0.0.0,INFINITY)\" to mean all versions.",
    "translation": "The service versions that these inputs apply to. Omit or specify \"[0.0.0,INFINITY)\" to mean all versions."
  },
  {
    "id": "A list of objects with the names and values for the user inputs used by this service.",
    "translation": "A list of objects with the names and values for the user inputs used by this service."
  },
  {
    "id": "Horizon node user inputs updated.",
    "translation": "Horizon node user inputs updated."
  },
  {
    "id": "Are you sure you want to remove the node user inputs?",
    "translation": "Are you sure you want to remove the node user inputs?"
  },
  {
    "id": "Horizon user inputs removed.",
    "translation": "Horizon user inputs removed."
  },
  {
    "id": "problem signing stdin with {PrivKeyFilePath}: {Err}",
    "translation": "problem signing stdin with {PrivKeyFilePath}: {Err}"
  },
  {
    "id": "problem verifying deployment string with {PubKeyFilePath}: {Err}",
    "translation": "problem verifying deployment string with {PubKeyFilePath}: {Err}"
  },
  {
    "id": "This is not a valid signature for stdin.",
    "translation": "This is not a valid signature for stdin."
  },
  {
    "id": "Signature is valid.",
    "translation": "Signature is valid."
  },
  {
    "id": "Failed to get project configuration file. Error: {Err}",
    "translation": "Failed to get project configuration file. Error: {Err}"
  },
  {
    "id": "Please use the -f flag to specify a configuration file.",
    "translation": "Please use the -f flag to specify a configuration file."
  },
  {
    "id": "Failed to get the variables from configuration file {ConfigFile}. Error: {Err}",
    "translation": "Failed to get the variables from configuration file {ConfigFile}. Error: {Err}"
  },
  {
    "id": "no service name",
    "translation": "no service name"
  },
  {
    "id": "no docker image for service {ServiceName}",
    "translation": "no docker image for service {ServiceName}"
  },
  {
    "id": "failed to unmarshal json for deployment field {StringjsonBytes}: {Err}",
    "translation": "failed to unmarshal json for deployment field {StringjsonBytes}: {Err}"
  },
  {
    "id": "user input {Name} has no default value and is not set",
    "translation": "user input {Name} has no default value and is not set"
  },
  {
    "id": "'requiredServices' is not supported for cluster type service.",
    "translation": "'requiredServices' is not supported for cluster type service."
  },
  {
    "id": "Failed to convert version {Ver} for service {ReqSvc} to version range expression.",
    "translation": "Failed to convert version {Ver} for service {ReqSvc} to version range expression."
  },
  {
    "id": "Error retrieving service from the Exchange for {ReqSvc}. {Err}",
    "translation": "Error retrieving service from the Exchange for {ReqSvc}. {Err}"
  },
  {
    "id": "The required service {SId} has the wrong service type: {SType}.",
    "translation": "The required service {SId} has the wrong service type: {SType}."
  },
  {
    "id": "The dependent service {Id} for the required service {SId} has the wrong service type: {SType1}.",
    "translation": "The dependent service {Id} for the required service {SId} has the wrong service type: {SType1}."
  },
  {
    "id": "failed to unmarshal json input {JsonBytes}: {Err}",
    "translation": "failed to unmarshal json input {JsonBytes}: {Err}"
  },
  {
    "id": "Error getting new user input format. {Err1}",
    "translation": "Error getting new user input format. {Err1}"
  },
  {
    "id": "Failed to create json object for user input. {Err1}",
    "translation": "Failed to create json object for user input. {Err1}"
  },
  {
    "id": "Deployment policy and pattern are mutually exclusive.",
    "translation": "Deployment policy and pattern are mutually exclusive."
  },
  {
    "id": "Neither deployment policy nor pattern is specified.",
    "translation": "Neither deployment policy nor pattern is specified."
  },
  {
    "id": "Incompatible",
    "translation": "Incompatible"
  },
  {
    "id": "The given node id is empty.",
    "translation": "The given node id is empty."
  },
  {
    "id": "Organization is not specified in the given node id: {NodeId}.",
    "translation": "Organization is not specified in the given node id: {NodeId}."
  },
  {
    "id": "Error getting node {NodeId} from the Exchange. {Err}",
    "translation": "Error getting node {NodeId} from the Exchange. {Err}"
  },
  {
    "id": "No node found for this node id {NodeId}.",
    "translation": "No node found for this node id {NodeId}."
  },
  {
    "id": "Error unmarshaling deployment string to internal deployment structure: {Err}",
    "translation": "Error unmarshaling deployment string to internal deployment structure: {Err}"
  },
  {
    "id": "Invalid node type: {NodeType}. It must be 'device' or 'cluster'.",
    "translation": "Invalid node type: {NodeType}. It must be 'device' or 'cluster'."
  },
  {
    "id": "The input node type '{NodeType}' does not match the node type '{ExchNodeType}' from the node {NodeId}.",
    "translation": "The input node type '{NodeType}' does not match the node type '{ExchNodeType}' from the node {NodeId}."
  },
  {
    "id": "Service does not have deployment configuration for node type 'device'.",
    "translation": "Service does not have deployment configuration for node type 'device'."
  },
  {
    "id": "Service does not have cluster deployment configuration for node type 'cluster'.",
    "translation": "Service does not have cluster deployment configuration for node type 'cluster'."
  },
  {
    "id": "Unable to create version expression from {VersionRange}. {Err}",
    "translation": "Unable to create version expression from {VersionRange}. {Err}"
  },
  {
    "id": "Error retrieving dependent services from the Exchange for {SDep}. {Err}",
    "translation": "Error retrieving dependent services from the Exchange for {SDep}. {Err}"
  },
  {
    "id": "Failed to find definition for dependent services of {TopId}. Compatability of {PROPNODEPRIVILEGED} cannot be fully evaluated until all services are in the Exchange.",
    "translation": "Failed to find definition for dependent services of {TopId}. Compatability of {PROPNODEPRIVILEGED} cannot be fully evaluated until all services are in the Exchange."
  },
  {
    "id": "The PolicyCheck input cannot be null",
    "translation": "The PolicyCheck input cannot be null"
  },
  {
    "id": "The input node architecture {NodeArch} does not match the Exchange node architecture {Arch} for node {NodeId}.",
    "translation": "The input node architecture {NodeArch} does not match the Exchange node architecture {Arch} for node {NodeId}."
  },
  {
    "id": "Policy Incompatible",
    "translation": "Policy Incompatible"
  },
  {
    "id": "Architecture does not match.",
    "translation": "Architecture does not match."
  },
  {
    "id": "Failed to get services for all archetctures for {Org}/{WorkloadURL} version {Version}. {Err}",
    "translation": "Failed to get services for all archetctures for {Org}/{WorkloadURL} version {Version}. {Err}"
  },
  {
    "id": "Failed to validate the service policy. {Err}",
    "translation": "Failed to validate the service policy. {Err}"
  },
  {
    "id": "Service with 'arch' {NodeArch} cannot be found in the deployment policy.",
    "translation": "Service with 'arch' {NodeArch} cannot be found in the deployment policy."
  },
  {
    "id": "No services found in the deployment policy.",
    "translation": "No services found in the deployment policy."
  },
  {
    "id": "Node policy cannot be null.",
    "translation": "Node policy cannot be null."
  },
  {
    "id": "Deployment policy cannot be null.",
    "translation": "Deployment policy cannot be null."
  },
  {
    "id": "Merged service policy cannot be null.",
    "translation": "Merged service policy cannot be null."
  },
  {
    "id": "Error merging node policy with arch property. {Err}",
    "translation": "Error merging node policy with arch property. {Err}"
  },
  {
    "id": "Failed to validate the node policy. {Err}",
    "translation": "Failed to validate the node policy. {Err}"
  },
  {
    "id": "Failed to convert node policy to internal policy format for node {NodeId}: {Err}",
    "translation": "Failed to convert node policy to internal policy format for node {NodeId}: {Err}"
  },
  {
    "id": "No node policy found for this node {NodeId}.",
    "translation": "No node policy found for this node {NodeId}."
  },
  {
    "id": "Neither node policy nor node id is specified.",
    "translation": "Neither node policy nor node id is specified."
  },
  {
    "id": "Node id is empty.",
    "translation": "Node id is empty."
  },
  {
    "id": "Organization is not specified in the node id: {NodeId}.",
    "translation": "Organization is not specified in the node id: {NodeId}."
  },
  {
    "id": "Error trying to query node policy for {NodeId}: {Err}",
    "translation": "Error trying to query node policy for {NodeId}: {Err}"
  },
  {
    "id": "Failed to validate the node policy for node {NodeId}. {Err}",
    "translation": "Failed to validate the node policy for node {NodeId}. {Err}"
  },
  {
    "id": "Failed to convert node policy to internal policy for node {NodeId}: {Err}",
    "translation": "Failed to convert node policy to internal policy for node {NodeId}: {Err}"
  },
  {
    "id": "Failed to convert deployment policy {BpId} to internal policy: {Err1}",
    "translation": "Failed to convert deployment policy {BpId} to internal policy: {Err1}"
  },
  {
    "id": "Validation failure for deployment policy {BpId}. {Err}",
    "translation": "Validation failure for deployment policy {BpId}. {Err}"
  },
  {
    "id": "No services specified in the given deployment policy {BpId}.",
    "translation": "No services specified in the given deployment policy {BpId}."
  },
  {
    "id": "No services specified in the deployment policy {Name}.",
    "translation": "No services specified in the deployment policy {Name}."
  },
  {
    "id": "Neither deployment policy nor deployment policy id is specified.",
    "translation": "Neither deployment policy nor deployment policy id is specified."
  },
  {
    "id": "Deployment policy id is empty.",
    "translation": "Deployment policy id is empty."
  },
  {
    "id": "Organization is not specified in the deployment policy id: {BpId}.",
    "translation": "Organization is not specified in the deployment policy id: {BpId}."
  },
  {
    "id": "Unable to get deployment policy for {BpId}, {Err}",
    "translation": "Unable to get deployment policy for {BpId}, {Err}"
  },
  {
    "id": "No deployment policy found for this id {BpId}.",
    "translation": "No deployment policy found for this id {BpId}."
  },
  {
    "id": "Failed to convert deployment policy {BpId} to internal policy format: {Err}",
    "translation": "Failed to convert deployment policy {BpId} to internal policy format: {Err}"
  },
  {
    "id": "Service policy id is empty.",
    "translation": "Service policy id is empty."
  },
  {
    "id": "Organization is not specified in the service policy id: {SvcId}.",
    "translation": "Organization is not specified in the service policy id: {SvcId}."
  },
  {
    "id": "Error trying to query service policy for service id {SvcId}: {Err}",
    "translation": "Error trying to query service policy for service id {SvcId}: {Err}"
  },
  {
    "id": "Error validating the service policy {SvcId}. {Err}",
    "translation": "Error validating the service policy {SvcId}. {Err}"
  },
  {
    "id": "Service name is empty.",
    "translation": "Service name is empty."
  },
  {
    "id": "Service organization is empty.",
    "translation": "Service organization is empty."
  },
  {
    "id": "Error trying to query service policy for {SvcOrg}/{SvcUrl} {SvcVersion} {SvcArch}. {Err}",
    "translation": "Error trying to query service policy for {SvcOrg}/{SvcUrl} {SvcVersion} {SvcArch}. {Err}"
  },
  {
    "id": "Failed to validate the service policy for {SvcOrg}/{SvcUrl} {SvcVersion} {SvcArch}. {Err}",
    "translation": "Failed to validate the service policy for {SvcOrg}/{SvcUrl} {SvcVersion} {SvcArch}. {Err}"
  },
  {
    "id": "The given deployment policy should not be null.",
    "translation": "The given deployment policy should not be null."
  },
  {
    "id": "Error merging deployment policy with service policy. {Err}",
    "translation": "Error merging deployment policy with service policy. {Err}"
  },
  {
    "id": "Unable to find service definition from the input services.",
    "translation": "Unable to find service definition from the input services."
  },
  {
    "id": "The SecretBindingCheck input cannot be null",
    "translation": "The SecretBindingCheck input cannot be null"
  },
  {
    "id": "Node type '{NodeType}' does not support secret binding check.",
    "translation": "Node type '{NodeType}' does not support secret binding check."
  },
  {
    "id": "No service versions with architecture {NodeArch} specified in the deployment policy or pattern.",
    "translation": "No service versions with architecture {NodeArch} specified in the deployment policy or pattern."
  },
  {
    "id": "No service versions specified in the deployment policy or pattern.",
    "translation": "No service versions specified in the deployment policy or pattern."
  },
  {
    "id": "Secret Binding Incompatible",
    "translation": "Secret Binding Incompatible"
  },
  {
    "id": "Type Incompatible",
    "translation": "Type Incompatible"
  },
  {
    "id": "Error getting services for all archetctures for {ServiceOrg}/{ServiceURL} version {Version}. {Err}",
    "translation": "Error getting services for all archetctures for {ServiceOrg}/{ServiceURL} version {Version}. {Err}"
  },
  {
    "id": "Service definition not found in the input.",
    "translation": "Service definition not found in the input."
  },
  {
    "id": "Warning: The following secret bindings are not required by any services: {ExtraneousSB}",
    "translation": "Warning: The following secret bindings are not required by any services: {ExtraneousSB}"
  },
  {
    "id": "Service with 'arch' {NodeArch} cannot be found in the deployment policy or pattern.",
    "translation": "Service with 'arch' {NodeArch} cannot be found in the deployment policy or pattern."
  },
  {
    "id": "No services found in the deployment policy or pattern.",
    "translation": "No services found in the deployment policy or pattern."
  },
  {
    "id": "The input service definition object cannot be null.",
    "translation": "The input service definition object cannot be null."
  },
  {
    "id": "Error verifying secret in the secret manager. {Err}",
    "translation": "Error verifying secret in the secret manager. {Err}"
  },
  {
    "id": "The input service spec object cannot be null.",
    "translation": "The input service spec object cannot be null."
  },
  {
    "id": "Failed to find the dependent services for {Org}/{URL} {Arch} {Version}. {Err}",
    "translation": "Failed to find the dependent services for {Org}/{URL} {Arch} {Version}. {Err}"
  },
  {
    "id": "Secret binding for a cluster service is not supported.",
    "translation": "Secret binding for a cluster service is not supported."
  },
  {
    "id": "No secret binding found for the following service secrets: {NbArray}.",
    "translation": "No secret binding found for the following service secrets: {NbArray}."
  },
  {
    "id": "Wrong version string {ServiceVersionRange} specified in secret binding for service {SvcOrg}/{SvcName} {SvcVersion} {SvcArch}, error {Err}",
    "translation": "Wrong version string {ServiceVersionRange} specified in secret binding for service {SvcOrg}/{SvcName} {SvcVersion} {SvcArch}, error {Err}"
  },
  {
    "id": "Error checking version {SvcVersion} in range {VExp}. {Err}",
    "translation": "Error checking version {SvcVersion} in range {VExp}. {Err}"
  },
  {
    "id": "agbot URL cannot be an empty string when checking secret binding. Please make sure HZN_AGBOT_URL is set.",
    "translation": "agbot URL cannot be an empty string when checking secret binding. Please make sure HZN_AGBOT_URL is set."
  },
  {
    "id": "The node organization must be provided.",
    "translation": "The node organization must be provided."
  },
  {
    "id": "Error parsing secret name in the secret binding. {Errparse}",
    "translation": "Error parsing secret name in the secret binding. {Errparse}"
  },
  {
    "id": "Error checking secret {VaultSecretName} in the secret manager. {Err}",
    "translation": "Error checking secret {VaultSecretName} in the secret manager. {Err}"
  },
  {
    "id": "The binding secret name cannot be an empty string. The valid formats are: '<secretname>' for the organization level secret and 'user/<username>/<secretname>' for the user level secret.",
    "translation": "The binding secret name cannot be an empty string. The valid formats are: '<secretname>' for the organization level secret and 'user/<username>/<secretname>' for the user level secret."
  },
  {
    "id": "Invalid format for the binding secret name: {SecretName}. The valid formats are: '<secretname>' for the organization level secret and 'user/<username>/<secretname>' for the user level secret.",
    "translation": "Invalid format for the binding secret name: {SecretName}. The valid formats are: '<secretname>' for the organization level secret and 'user/<username>/<secretname>' for the user level secret."
  },
  {
    "id": "The UserInputCheck input cannot be null",
    "translation": "The UserInputCheck input cannot be null"
  },
  {
    "id": "Neither node user input nor node id is specified.",
    "translation": "Neither node user input nor node id is specified."
  },
  {
    "id": "User Input Incompatible",
    "translation": "User Input Incompatible"
  },
  {
    "id": "Warning: checking node user input:  {Err}",
    "translation": "Warning: checking node user input:  {Err}"
  },
  {
    "id": "Warning: checking user input for the deployment policy: {Err}",
    "translation": "Warning: checking user input for the deployment policy: {Err}"
  },
  {
    "id": "Warning: checking user input for the pattern: {Err}",
    "translation": "Warning: checking user input for the pattern: {Err}"
  },
  {
    "id": "Error verifing user input for service {SId}. {Err}",
    "translation": "Error verifing user input for service {SId}. {Err}"
  },
  {
    "id": "Failed to verify user input for service {SId}. {Reason}",
    "translation": "Failed to verify user input for service {SId}. {Reason}"
  },
  {
    "id": "Error verifing user input for dependent service {Id}. {Err}",
    "translation": "Error verifing user input for dependent service {Id}. {Err}"
  },
  {
    "id": "Failed to verify user input for dependent service {Id}. {Reason}",
    "translation": "Failed to verify user input for dependent service {Id}. {Reason}"
  },
  {
    "id": "Failed to get the service from the Exchange. {Err}",
    "translation": "Failed to get the service from the Exchange. {Err}"
  },
  {
    "id": "Service does not exist on the Exchange.",
    "translation": "Service does not exist on the Exchange."
  },
  {
    "id": "No user input found for service.",
    "translation": "No user input found for service."
  },
  {
    "id": "Failed to validate the user input type for variable {Name}. {Err}",
    "translation": "Failed to validate the user input type for variable {Name}. {Err}"
  },
  {
    "id": "A required user input value is missing for variable {Name}.",
    "translation": "A required user input value is missing for variable {Name}."
  },
  {
    "id": "{Errmsg} Service {Org}/{URL} version {Version} arch {Arch} is missing in the node user input.",
    "translation": "{Errmsg} Service {Org}/{URL} version {Version} arch {Arch} is missing in the node user input."
  },
  {
    "id": "Service URL {URL} does not match the service URL {Name} specified in the deployment policy.",
    "translation": "Service URL {URL} does not match the service URL {Name} specified in the deployment policy."
  },
  {
    "id": "Service Org {Org} does not match the service org {Org_1} specified in the deployment policy.",
    "translation": "Service Org {Org} does not match the service org {Org_1} specified in the deployment policy."
  },
  {
    "id": "Service architecure {Arch} does not match the service architectrure {Arch_1} specified in the deployment policy.",
    "translation": "Service architecure {Arch} does not match the service architectrure {Arch_1} specified in the deployment policy."
  },
  {
    "id": "Service version {Version} does not match any service versions specified in the deployment policy.",
    "translation": "Service version {Version} does not match any service versions specified in the deployment policy."
  },
  {
    "id": "The service does not match any services in the pattern.",
    "translation": "The service does not match any services in the pattern."
  },
  {
    "id": "Pattern {PatId} cannot be found on the Exchange.",
    "translation": "Pattern {PatId} cannot be found on the Exchange."
  },
  {
    "id": "Neither pattern nor pattern id is specified.",
    "translation": "Neither pattern nor pattern id is specified."
  },
  {
    "id": "Pattern id is empty.",
    "translation": "Pattern id is empty."
  },
  {
    "id": "Organization is not specified in the pattern id: {PatId}.",
    "translation": "Organization is not specified in the pattern id: {PatId}."
  },
  {
    "id": "Error getting pattern {PatId} from the Exchange, {Err}",
    "translation": "Error getting pattern {PatId} from the Exchange, {Err}"
  },
  {
    "id": "No pattern found for this id {PatId}.",
    "translation": "No pattern found for this id {PatId}."
  },
  {
    "id": "Version must be specified in the service definition for service {URL}.",
    "translation": "Version must be specified in the service definition for service {URL}."
  },
  {
    "id": "Invalid version format {Version} for service {URL}.",
    "translation": "Invalid version format {Version} for service {URL}."
  },
  {
    "id": "Arch must be specified in the service definition for service {URL}.",
    "translation": "Arch must be specified in the service definition for service {URL}."
  },
  {
    "id": "Org must be specified in the service definition for service {URL}.",
    "translation": "Org must be specified in the service definition for service {URL}."
  },
  {
    "id": "Validation failure for input service {SId}. {Err}",
    "translation": "Validation failure for input service {SId}. {Err}"
  },
  {
    "id": "The service {ServiceOrgid}/{ServiceUrl} version {ServiceVersionRange} arch {ServiceArch} specified in the user input is not referenced by the pattern or deployment policy. Please make sure the serviceOrgid, serviceUrl, serviceArch and serviceVersionRange are correct.",
    "translation": "The service {ServiceOrgid}/{ServiceUrl} version {ServiceVersionRange} arch {ServiceArch} specified in the user input is not referenced by the pattern or deployment policy. Please make sure the serviceOrgid, serviceUrl, serviceArch and serviceVersionRange are correct."
  },
  {
    "id": "The service {ServiceOrgid}/{ServiceUrl} version {ServiceVersionRange} arch {ServiceArch} specified in the user input is not referenced by the pattern or deployment policy. Please make sure the service specification is correct.",
    "translation": "The service {ServiceOrgid}/{ServiceUrl} version {ServiceVersionRange} arch {ServiceArch} specified in the user input is not referenced by the pattern or deployment policy. Please make sure the service specification is correct."
  },
  {
    "id": "Variable {Name} for service {ServiceOrgid}/{ServiceUrl} version {ServiceVersionRange} arch {ServiceArch} specified in the user input is not used. Please make sure it is a correct name.",
    "translation": "Variable {Name} for service {ServiceOrgid}/{ServiceUrl} version {ServiceVersionRange} arch {ServiceArch} specified in the user input is not used. Please make sure it is a correct name."
  },
  {
    "id": "Deployment config {Arg_1} contains unsupported capability for a workload",
    "translation": "Deployment config {Arg_1} contains unsupported capability for a workload"
  },
  {
    "id": "Deployment config {Arg_1} contains unsupported capability for infrastructure container.",
    "translation": "Deployment config {Arg_1} contains unsupported capability for infrastructure container."
  },
  {
    "id": "Deployment config {Arg_1} contains unsupported bind for a workload, {Arg_2}",
    "translation": "Deployment config {Arg_1} contains unsupported bind for a workload, {Arg_2}"
  },
  {
    "id": "Deployment config {Arg_1} contains unsupported bind for {Arg_2}, {Arg_3}",
    "translation": "Deployment config {Arg_1} contains unsupported bind for {Arg_2}, {Arg_3}"
  },
  {
    "id": "Error Unmarshalling deployment string {Arg_1}, error: {Arg_2}",
    "translation": "Error Unmarshalling deployment string {Arg_1}, error: {Arg_2}"
  },
  {
    "id": "Error Unmarshalling deployment override string {Arg_1} for agreement {Arg_2}, error: {Arg_3}",
    "translation": "Error Unmarshalling deployment override string {Arg_1} for agreement {Arg_2}, error: {Arg_3}"
  },
  {
    "id": "Error starting containers: {Arg_1}",
    "translation": "Error starting containers: {Arg_1}"
  },
  {
    "id": "Error starting containers for agreement {Arg_1}: {Arg_2}",
    "translation": "Error starting containers for agreement {Arg_1}: {Arg_2}"
  },
  {
    "id": "Error restarting containers for agreements {Arg_1}: {Arg_2}",
    "translation": "Error restarting containers for agreements {Arg_1}: {Arg_2}"
  },
  {
    "id": "Error cleaning up old containers before starting up new containers for {Arg_1}. Error: {Arg_2}",
    "translation": "Error cleaning up old containers before starting up new containers for {Arg_1}. Error: {Arg_2}"
  },
  {
    "id": "Failed to get a list of parent containers for service retry for {Arg_1}. {Arg_2}",
    "translation": "Failed to get a list of parent containers for service retry for {Arg_1}. {Arg_2}"
  },
  {
    "id": "Failed to restoring the network connection with the parents for service {Arg_1}. {Arg_2}",
    "translation": "Failed to restoring the network connection with the parents for service {Arg_1}. {Arg_2}"
  },
  {
    "id": "anax terminating. Unable to access service storage direcotry specified in config: {Arg_1}. {Arg_2}",
    "translation": "anax terminating. Unable to access service storage direcotry specified in config: {Arg_1}. {Arg_2}"
  },
  {
    "id": "anax terminating. Failed to instantiate iptables client. {Arg_1}",
    "translation": "anax terminating. Failed to instantiate iptables client. {Arg_1}"
  },
  {
    "id": "anax terminating. Failed to instantiate docker client. {Arg_1}",
    "translation": "anax terminating. Failed to instantiate docker client. {Arg_1}"
  },
  {
    "id": "Failed to verify digital signature because the hashAlgorithm is empty",
    "translation": "Failed to verify digital signature because the hashAlgorithm is empty"
  },
  {
    "id": "Failed to verify digital signature because the publicKey string is empty",
    "translation": "Failed to verify digital signature because the publicKey string is empty"
  },
  {
    "id": "Failed to verify digital signature because the signature string is empty",
    "translation": "Failed to verify digital signature because the signature string is empty"
  },
  {
    "id": "The start time must be in RFC3339 format or set to \"now\".",
    "translation": "The start time must be in RFC3339 format or set to \"now\"."
  },
  {
    "id": "Property {PROPNODEPRIVILEGED} must have a boolean value (true or false).",
    "translation": "Property {PROPNODEPRIVILEGED} must have a boolean value (true or false)."
  },
  {
    "id": "Property must include a name and a value: {Property}",
    "translation": "Property must include a name and a value: {Property}"
  },
  {
    "id": "Property {Name} has invalid property type {DeclaredType}. Allowed property types are: version, string, int, boolean, float, and list of strings.",
    "translation": "Property {Name} has invalid property type {DeclaredType}. Allowed property types are: version, string, int, boolean, float, and list of strings."
  },
  {
    "id": "Property value is of type {ActualType}, expected type {DeclaredType}",
    "translation": "Property value is of type {ActualType}, expected type {DeclaredType}"
  },
  {
    "id": "Value {Value} of property {Name} is not an integer type",
    "translation": "Value {Value} of property {Name} is not an integer type"
  },
  {
    "id": "Value {Value} of property {Name} is not a valid string. Please define type or change value to a string.",
    "translation": "Value {Value} of property {Name} is not a valid string. Please define type or change value to a string."
  },
  {
    "id": "Property {Name} with value {Value} is not a valid verion string",
    "translation": "Property {Name} with value {Value} is not a valid verion string"
  },
  {
    "id": "Property {Name} has invalid value type {ActualType}",
    "translation": "Property {Name} has invalid value type {ActualType}"
  },
  {
    "id": "The constraint expression: {Dconstraints} is type {Dconstraints_1}, but is expected to be an array of strings",
    "translation": "The constraint expression: {Dconstraints} is type {Dconstraints_1}, but is expected to be an array of strings"
  },
  {
    "id": "The constraint expression contains unmatched parentheses.",
    "translation": "The constraint expression contains unmatched parentheses."
  },
  {
    "id": "New node management policy status created for policy {Arg_1}.",
    "translation": "New node management policy status created for policy {Arg_1}."
  },
  {
    "id": "Node management status for {Arg_1} changed to {Arg_2}.",
    "translation": "Node management status for {Arg_1} changed to {Arg_2}."
  },
  {
    "id": "Compatibility Error: Schema versions are not the same, Consumer policy: {Version}, Producer policy {Version_1}",
    "translation": "Compatibility Error: Schema versions are not the same, Consumer policy: {Version}, Producer policy {Version_1}"
  },
  {
    "id": "Compatibility Error: Node properties {Properties} do not satisfy constraint requirements {Constraints}. Underlying error: {Err}",
    "translation": "Compatibility Error: Node properties {Properties} do not satisfy constraint requirements {Constraints}. Underlying error: {Err}"
  },
  {
    "id": "Compatibility Error: Node properties do not satisfy constraint requirements. {Err}",
    "translation": "Compatibility Error: Node properties do not satisfy constraint requirements. {Err}"
  },
  {
    "id": "Compatibility Error: Properties {Properties} do not satisfy Node constraint  {Constraints}. Underlying error: {Err}",
    "translation": "Compatibility Error: Properties {Properties} do not satisfy Node constraint  {Constraints}. Underlying error: {Err}"
  },
  {
    "id": "Compatibility Error: Properties do not satisfy node constraint. {Err}",
    "translation": "Compatibility Error: Properties do not satisfy node constraint. {Err}"
  },
  {
    "id": "Compatibility Error: No common Agreement Protocols between {AgreementProtocols} and {AgreementProtocols_1}. Underlying error: {Err}",
    "translation": "Compatibility Error: No common Agreement Protocols between {AgreementProtocols} and {AgreementProtocols_1}. Underlying error: {Err}"
  },
  {
    "id": "Compatibility Error: Data verification must be compatible, producer has {DataVerify} and consumer has {DataVerify_1}.",
    "translation": "Compatibility Error: Data verification must be compatible, producer has {DataVerify} and consumer has {DataVerify_1}."
  },
  {
    "id": "unable to make directory for self signed MMS API certificate, error {Err}",
    "translation": "unable to make directory for self signed MMS API certificate, error {Err}"
  },
  {
    "id": "unable to generate random number for MMS API certificate serial number, error {Err}",
    "translation": "unable to generate random number for MMS API certificate serial number, error {Err}"
  },
  {
    "id": "unable to generate private key for MMS API certificate, error {Err}",
    "translation": "unable to generate private key for MMS API certificate, error {Err}"
  },
  {
    "id": "unable to create MMS API certificate, error {Err}",
    "translation": "unable to create MMS API certificate, error {Err}"
  },
  {
    "id": "unable to write MMS API certificate to file {ServerCertificate}, error {Err}",
    "translation": "unable to write MMS API certificate to file {ServerCertificate}, error {Err}"
  },
  {
    "id": "unable to encode MMS API certificate to file {ServerCertificate}, error {Err}",
    "translation": "unable to encode MMS API certificate to file {ServerCertificate}, error {Err}"
  },
  {
    "id": "unable to close MMS API certificate file {ServerCertificate}, error {Err}",
    "translation": "unable to close MMS API certificate file {ServerCertificate}, error {Err}"
  },
  {
    "id": "unable to write MMS API certificate private key to file {ServerKey}, error {Err}",
    "translation": "unable to write MMS API certificate private key to file {ServerKey}, error {Err}"
  },
  {
    "id": "unable to encode MMS API certificate private key to file {ServerKey}, error {Err}",
    "translation": "unable to encode MMS API certificate private key to file {ServerKey}, error {Err}"
  },
  {
    "id": "unable to close MMS API certificate private key file {ServerKey}, error {Err}",
    "translation": "unable to close MMS API certificate private key file {ServerKey}, error {Err}"
  },
  {
    "id": "Unable to authenticate nil request for secrets API",
    "translation": "Unable to authenticate nil request for secrets API"
  },
  {
    "id": "Unable to extract basic auth for request",
    "translation": "Unable to extract basic auth for request"
  },
  {
    "id": "unable to verify {AppKey}, error {Err}",
    "translation": "unable to verify {AppKey}, error {Err}"
  },
  {
    "id": "credentials for {AppKey} are not valid",
    "translation": "credentials for {AppKey} are not valid"
  },
  {
    "id": "Version_Expression: Empty string is not a valid version.",
    "translation": "Version_Expression: Empty string is not a valid version."
  },
  {
    "id": "Version_Expression: Whitespace is not permitted in {Expr}.",
    "translation": "Version_Expression: Whitespace is not permitted in {Expr}."
  },
  {
    "id": "Version_Expression: {Verstring} is not a valid version string.",
    "translation": "Version_Expression: {Verstring} is not a valid version string."
  },
  {
    "id": "Version_Expression: {Verstring} does not begin with an inclusion or exclusion directive.",
    "translation": "Version_Expression: {Verstring} does not begin with an inclusion or exclusion directive."
  },
  {
    "id": "Version_Expression: {Verstring} does not end with an inclusion or exclusion directive.",
    "translation": "Version_Expression: {Verstring} does not end with an inclusion or exclusion directive."
  },
  {
    "id": "Version_Expression: Incorrect number of versions in expression: {Expr}.",
    "translation": "Version_Expression: Incorrect number of versions in expression: {Expr}."
  },
  {
    "id": "No intersection found.",
    "translation": "No intersection found."
  },
  {
    "id": "The input string is not a version string, it is an empty string.",
    "translation": "The input string is not a version string, it is an empty string."
  },
  {
    "id": "The input string {Ceilingversion} is not a version string.",
    "translation": "The input string {Ceilingversion} is not a version string."
  },
  {
    "id": "The input ceiling version {Ceilingversion} is lower than the start version {Start}.",
    "translation": "The input ceiling version {Ceilingversion} is lower than the start version {Start}."
  },
  {
    "id": "The input ceiling version {Ceilingversion} is the same as the start version, but either the start or the end is not inclusive.",
    "translation": "The input ceiling version {Ceilingversion} is the same as the start version, but either the start or the end is not inclusive."
  },
  {
    "id": "Input version string {V1} or {V2} is not a valid single version string.",
    "translation": "Input version string {V1} or {V2} is not a valid single version string."
  }
]
