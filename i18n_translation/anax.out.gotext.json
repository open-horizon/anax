// NLS_CHARSET=UTF-8
{
  "language": "en",
  "messages": [
    {

      "id": "Deployment config {Arg_1} contains unsupported capability for a workload",

      "translation": "Deployment config {Arg_1} contains unsupported capability for a workload"
    },
    {

      "id": "Deployment config {Arg_1} contains unsupported capability for infrastructure container.",

      "translation": "Deployment config {Arg_1} contains unsupported capability for infrastructure container."
    },
    {

      "id": "Deployment config {Arg_1} contains unsupported bind for a workload, {Arg_2}",

      "translation": "Deployment config {Arg_1} contains unsupported bind for a workload, {Arg_2}"
    },
    {

      "id": "Deployment config {Arg_1} contains unsupported bind for {Arg_2}, {Arg_3}",

      "translation": "Deployment config {Arg_1} contains unsupported bind for {Arg_2}, {Arg_3}"
    },
    {

      "id": "Error Unmarshalling deployment string {Arg_1}, error: {Arg_2}",

      "translation": "Error Unmarshalling deployment string {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error Unmarshalling deployment override string {Arg_1} for agreement {Arg_2}, error: {Arg_3}",

      "translation": "Error Unmarshalling deployment override string {Arg_1} for agreement {Arg_2}, error: {Arg_3}"
    },
    {

      "id": "Error starting containers: {Arg_1}",

      "translation": "Error starting containers: {Arg_1}"
    },
    {

      "id": "Error starting containers for agreement {Arg_1}: {Arg_2}",

      "translation": "Error starting containers for agreement {Arg_1}: {Arg_2}"
    },
    {

      "id": "Error restarting containers for agreements {Arg_1}: {Arg_2}",

      "translation": "Error restarting containers for agreements {Arg_1}: {Arg_2}"
    },
    {

      "id": "Error cleaning up old containers before starting up new containers for {Arg_1}. Error: {Arg_2}",

      "translation": "Error cleaning up old containers before starting up new containers for {Arg_1}. Error: {Arg_2}"
    },
    {

      "id": "Failed to get a list of parent containers for service retry for {Arg_1}. {Arg_2}",

      "translation": "Failed to get a list of parent containers for service retry for {Arg_1}. {Arg_2}"
    },
    {

      "id": "Failed to restoring the network connection with the parents for service {Arg_1}. {Arg_2}",

      "translation": "Failed to restoring the network connection with the parents for service {Arg_1}. {Arg_2}"
    },
    {

      "id": "Version_Expression: Whitespace is not permitted in {Expr}.",

      "translation": "Version_Expression: Whitespace is not permitted in {Expr}."
    },
    {

      "id": "Version_Expression: {Verstring} is not a valid version string.",

      "translation": "Version_Expression: {Verstring} is not a valid version string."
    },
    {

      "id": "Version_Expression: {Verstring} does not begin with an inclusion or exclusion directive.",

      "translation": "Version_Expression: {Verstring} does not begin with an inclusion or exclusion directive."
    },
    {

      "id": "Version_Expression: {Verstring} does not end with an inclusion or exclusion directive.",

      "translation": "Version_Expression: {Verstring} does not end with an inclusion or exclusion directive."
    },
    {

      "id": "Version_Expression: Incorrect number of versions in expression: {Expr}.",

      "translation": "Version_Expression: Incorrect number of versions in expression: {Expr}."
    },
    {

      "id": "Input version string {V1} or {V2} is not a valid single version string.",

      "translation": "Input version string {V1} or {V2} is not a valid single version string."
    },
    {

      "id": "properties contains an invalid property: {Err}",

      "translation": "properties contains an invalid property: {Err}"
    },
    {

      "id": "Property must include a name and a value: {Property}",

      "translation": "Property must include a name and a value: {Property}"
    },
    {

      "id": "Property {Name} has invalid property type {DeclaredType}. Allowed property types are: version, string, int, boolean, float, and list of string.",

      "translation": "Property {Name} has invalid property type {DeclaredType}. Allowed property types are: version, string, int, boolean, float, and list of string."
    },
    {

      "id": "Property value is of type {ActualType}, expected type {DeclaredType}",

      "translation": "Property value is of type {ActualType}, expected type {DeclaredType}"
    },
    {

      "id": "Value {Value} of property {Name} is not an integer type",

      "translation": "Value {Value} of property {Name} is not an integer type"
    },
    {

      "id": "Value {Value} of property {Name} is not a valid string. Please define type or change value to a string.",

      "translation": "Value {Value} of property {Name} is not a valid string. Please define type or change value to a string."
    },
    {

      "id": "Property {Name} with value {Value} is not a valid verion string",

      "translation": "Property {Name} with value {Value} is not a valid verion string"
    },
    {

      "id": "Property {Name} has invalid value type {ActualType}",

      "translation": "Property {Name} has invalid value type {ActualType}"
    },
    {

      "id": "Agreement {Arg_1} already exists, ignoring proposal: {Arg_2}",

      "translation": "Agreement {Arg_1} already exists, ignoring proposal: {Arg_2}"
    },
    {

      "id": "received error demarshalling TsAndCs for agrement {Arg_1}, {Arg_2}",

      "translation": "received error demarshalling TsAndCs for agrement {Arg_1}, {Arg_2}"
    },
    {

      "id": "Node received Proposal message using agreement {Arg_1} for service {Arg_2}/{Arg_3} from the agbot {Arg_4}.",

      "translation": "Node received Proposal message using agreement {Arg_1} for service {Arg_2}/{Arg_3} from the agbot {Arg_4}."
    },
    {

      "id": "Node rejected the proposal for service {Arg_1}/{Arg_2}.",

      "translation": "Node rejected the proposal for service {Arg_1}/{Arg_2}."
    },
    {

      "id": "Error handling proposal for service {Arg_1}/{Arg_2}. Error: {Arg_3}",

      "translation": "Error handling proposal for service {Arg_1}/{Arg_2}. Error: {Arg_3}"
    },
    {

      "id": "Unable to read policy file {Arg_1} for service {Arg_2}, error: {Arg_3}",

      "translation": "Unable to read policy file {Arg_1} for service {Arg_2}, error: {Arg_3}"
    },
    {

      "id": "Start policy advertising with the exchange for service {Arg_1}/{Arg_2}.",

      "translation": "Start policy advertising with the exchange for service {Arg_1}/{Arg_2}."
    },
    {

      "id": "Unable to advertise policies with exchange for service {Arg_1}/{Arg_2}, error: {Arg_3}",

      "translation": "Unable to advertise policies with exchange for service {Arg_1}/{Arg_2}, error: {Arg_3}"
    },
    {

      "id": "Complete policy advertising with the exchange for service {Arg_1}/{Arg_2}.",

      "translation": "Complete policy advertising with the exchange for service {Arg_1}/{Arg_2}."
    },
    {

      "id": "Node heartbeat failed for node {Arg_1}/{Arg_2}. Error: {Arg_3}",

      "translation": "Node heartbeat failed for node {Arg_1}/{Arg_2}. Error: {Arg_3}"
    },
    {

      "id": "Node heartbeat restored for node {Arg_1}/{Arg_2}.",

      "translation": "Node heartbeat restored for node {Arg_1}/{Arg_2}."
    },
    {

      "id": "unable to read node policy from the local database. {Arg_1}",

      "translation": "unable to read node policy from the local database. {Arg_1}"
    },
    {

      "id": "Unable to read node object from the local database. {Arg_1}",

      "translation": "Unable to read node object from the local database. {Arg_1}"
    },
    {

      "id": "Unable to sync the local node policy with the exchange copy. Error: {Arg_1}",

      "translation": "Unable to sync the local node policy with the exchange copy. Error: {Arg_1}"
    },
    {

      "id": "Node policy updated with the exchange copy: {Arg_1}",

      "translation": "Node policy updated with the exchange copy: {Arg_1}"
    },
    {

      "id": "Unable to sync the local node user input with the exchange copy. Error: {Arg_1}",

      "translation": "Unable to sync the local node user input with the exchange copy. Error: {Arg_1}"
    },
    {

      "id": "Node user input updated with the exchange copy. The changed user inputs are: {Arg_1}",

      "translation": "Node user input updated with the exchange copy. The changed user inputs are: {Arg_1}"
    },
    {

      "id": "Node could not verify the agreement {Arg_1} with the consumer. Will cancel it",

      "translation": "Node could not verify the agreement {Arg_1} with the consumer. Will cancel it"
    },
    {

      "id": "Node is offline. Logging of periodic offline error messages will be curtailed until connection is restored",

      "translation": "Node is offline. Logging of periodic offline error messages will be curtailed until connection is restored"
    },
    {

      "id": "Name, or Org is empty string.",

      "translation": "Name, or Org is empty string."
    },
    {

      "id": "The serviceVersions array is empty.",

      "translation": "The serviceVersions array is empty."
    },
    {

      "id": "The constraint expression: {Dconstraints} is type {Dconstraints_1}, but is expected to be an array of strings",

      "translation": "The constraint expression: {Dconstraints} is type {Dconstraints_1}, but is expected to be an array of strings"
    },
    {

      "id": "unable to convert policy constraint {Remainder} into internal format, error {Err}",

      "translation": "unable to convert policy constraint {Remainder} into internal format, error {Err}"
    },
    {

      "id": "Logical operator {NextLogicalOperator} is not valid, expecting AND, OR, &&, ||",

      "translation": "Logical operator {NextLogicalOperator} is not valid, expecting AND, OR, &&, ||"
    },
    {

      "id": "found {Lenpieces} token(s), expecting 3 in an expression {Expression}, expected form is <property> == <value>",

      "translation": "found {Lenpieces} token(s), expecting 3 in an expression {Expression}, expected form is <property> == <value>"
    },
    {

      "id": "found {Lenpieces} token(s), expecting 3 in an expression {Expression}, expected form is expression with 3 tokens: <property> <operator> <value> in constraint expression",

      "translation": "found {Lenpieces} token(s), expecting 3 in an expression {Expression}, expected form is expression with 3 tokens: <property> <operator> <value> in constraint expression"
    },
    {

      "id": "Expression: {Expression} should contain valid comparison operator - wrong operator {Pieces1}. Allowed operators: {Lessthan}, {Greaterthan}, {Equalto}, {Doubleequalto}, {Lessthaneq}, {Greaterthaneq}, {Notequalto}, {Inoperator}",

      "translation": "Expression: {Expression} should contain valid comparison operator - wrong operator {Pieces1}. Allowed operators: {Lessthan}, {Greaterthan}, {Equalto}, {Doubleequalto}, {Lessthaneq}, {Greaterthaneq}, {Notequalto}, {Inoperator}"
    },
    {

      "id": "Comparison operator: {CompOp} is not supported for numeric value: {Value}",

      "translation": "Comparison operator: {CompOp} is not supported for numeric value: {Value}"
    },
    {

      "id": "Comparison operator: {CompOp} is not supported for boolean value: {Value}",

      "translation": "Comparison operator: {CompOp} is not supported for boolean value: {Value}"
    },
    {

      "id": "Comparison operator: {CompOp} is not supported for string list value: {Value}",

      "translation": "Comparison operator: {CompOp} is not supported for string list value: {Value}"
    },
    {

      "id": "Comparison operator: {CompOp} is not supported for string value: {Value}",

      "translation": "Comparison operator: {CompOp} is not supported for string value: {Value}"
    },
    {

      "id": "Comparison operator: {CompOp} is not supported for single version: {Value}",

      "translation": "Comparison operator: {CompOp} is not supported for single version: {Value}"
    },
    {

      "id": "Comparison operator: {CompOp} is not supported for version expression: {Value}",

      "translation": "Comparison operator: {CompOp} is not supported for version expression: {Value}"
    },
    {

      "id": "Expression: {Expression} is not valid",

      "translation": "Expression: {Expression} is not valid"
    },
    {

      "id": "unable to make directory for self signed MMS API certificate, error {Err}",

      "translation": "unable to make directory for self signed MMS API certificate, error {Err}"
    },
    {

      "id": "unable to generate random number for MMS API certificate serial number, error {Err}",

      "translation": "unable to generate random number for MMS API certificate serial number, error {Err}"
    },
    {

      "id": "unable to generate private key for MMS API certificate, error {Err}",

      "translation": "unable to generate private key for MMS API certificate, error {Err}"
    },
    {

      "id": "unable to create MMS API certificate, error {Err}",

      "translation": "unable to create MMS API certificate, error {Err}"
    },
    {

      "id": "unable to write MMS API certificate to file {ServerCertificate}, error {Err}",

      "translation": "unable to write MMS API certificate to file {ServerCertificate}, error {Err}"
    },
    {

      "id": "unable to encode MMS API certificate to file {ServerCertificate}, error {Err}",

      "translation": "unable to encode MMS API certificate to file {ServerCertificate}, error {Err}"
    },
    {

      "id": "unable to close MMS API certificate file {ServerCertificate}, error {Err}",

      "translation": "unable to close MMS API certificate file {ServerCertificate}, error {Err}"
    },
    {

      "id": "unable to write MMS API certificate private key to file {ServerKey}, error {Err}",

      "translation": "unable to write MMS API certificate private key to file {ServerKey}, error {Err}"
    },
    {

      "id": "unable to encode MMS API certificate private key to file {ServerKey}, error {Err}",

      "translation": "unable to encode MMS API certificate private key to file {ServerKey}, error {Err}"
    },
    {

      "id": "unable to close MMS API certificate private key file {ServerKey}, error {Err}",

      "translation": "unable to close MMS API certificate private key file {ServerKey}, error {Err}"
    },
    {

      "id": "Error parsing the selections {Form}. {Err}",

      "translation": "Error parsing the selections {Form}. {Err}"
    },
    {

      "id": "Error getting {Resource} for output, error {Err}",

      "translation": "Error getting {Resource} for output, error {Err}"
    },
    {

      "id": "Error parsing input for node configuration/registration. Input body couldn't be deserialized to node object: {Arg_1}, error: {Arg_2}",

      "translation": "Error parsing input for node configuration/registration. Input body couldn't be deserialized to node object: {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error parsing input for node configuration/registration. Input body couldn't be deserialized to configstate object: {Arg_1}, error: {Arg_2}",

      "translation": "Error parsing input for node configuration/registration. Input body couldn't be deserialized to configstate object: {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error parsing input for node update. Input body couldn't be deserialized to node object: {Arg_1}, error: {Arg_2}",

      "translation": "Error parsing input for node update. Input body couldn't be deserialized to node object: {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error parsing input for node policy. Input body could not be deserialized as a policy object: {Arg_1}, error: {Arg_2}",

      "translation": "Error parsing input for node policy. Input body could not be deserialized as a policy object: {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error parsing input for node policy patch. Input body could not be deserialized into a Constraint Expression or Property List: {Arg_1}, error: {Arg_2}",

      "translation": "Error parsing input for node policy patch. Input body could not be deserialized into a Constraint Expression or Property List: {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error parsing input for node policy patch. Input body did not contain a Constraint Expression or Property List: {Arg_1}, error: {Arg_2}",

      "translation": "Error parsing input for node policy patch. Input body did not contain a Constraint Expression or Property List: {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error parsing input for node user input. Input body could not be deserialized as a UserInput object: {Arg_1}, error: {Arg_2}",

      "translation": "Error parsing input for node user input. Input body could not be deserialized as a UserInput object: {Arg_1}, error: {Arg_2}"
    },
    {

      "id": "Error in node configuration/registration for node {Arg_1}. {Arg_2}",

      "translation": "Error in node configuration/registration for node {Arg_1}. {Arg_2}"
    },
    {

      "id": "Error in updating node {Arg_1}. {Arg_2}",

      "translation": "Error in updating node {Arg_1}. {Arg_2}"
    },
    {

      "id": "Error in node unregistration. {Arg_1}",

      "translation": "Error in node unregistration. {Arg_1}"
    },
    {

      "id": "Error verifiying exchange version. error: {Arg_1}",

      "translation": "Error verifiying exchange version. error: {Arg_1}"
    },
    {

      "id": "Error in creating or replacing node policy. {Arg_1}",

      "translation": "Error in creating or replacing node policy. {Arg_1}"
    },
    {

      "id": "Error in patching node policy. {Arg_1}",

      "translation": "Error in patching node policy. {Arg_1}"
    },
    {

      "id": "Error in deleting node policy. {Arg_1}",

      "translation": "Error in deleting node policy. {Arg_1}"
    },
    {

      "id": "Error in updating node user input. {Arg_1}",

      "translation": "Error in updating node user input. {Arg_1}"
    },
    {

      "id": "Error in patching node user input. {Arg_1}",

      "translation": "Error in patching node user input. {Arg_1}"
    },
    {

      "id": "Error in deleting node userinput. {Arg_1}",

      "translation": "Error in deleting node userinput. {Arg_1}"
    },
    {

      "id": "Start node configuration/registration for node {Arg_1}.",

      "translation": "Start node configuration/registration for node {Arg_1}."
    },
    {

      "id": "Start updating node {Arg_1}.",

      "translation": "Start updating node {Arg_1}."
    },
    {

      "id": "Complete node update for {Arg_1}.",

      "translation": "Complete node update for {Arg_1}."
    },
    {

      "id": "Start node unregistration.",

      "translation": "Start node unregistration."
    },
    {

      "id": "Node unregistration complete for node {Arg_1}.",

      "translation": "Node unregistration complete for node {Arg_1}."
    },
    {

      "id": "Error unregistring the node. The node is not found from the database.",

      "translation": "Error unregistring the node. The node is not found from the database."
    },
    {

      "id": "Error unregistring the node. The node must be in 'configured' or 'configuring' state in order to unconfigure it.",

      "translation": "Error unregistring the node. The node must be in 'configured' or 'configuring' state in order to unconfigure it."
    },
    {

      "id": "Input error for node unregistration. {Arg_1} is an incorrect value for removeNode",

      "translation": "Input error for node unregistration. {Arg_1} is an incorrect value for removeNode"
    },
    {

      "id": "Input error for node unregistration. {Arg_1} is an incorrect value for deepClean",

      "translation": "Input error for node unregistration. {Arg_1} is an incorrect value for deepClean"
    },
    {

      "id": "Input error for node unregistration. {Arg_1} is an incorrect value for block",

      "translation": "Input error for node unregistration. {Arg_1} is an incorrect value for block"
    },
    {

      "id": "Unable to read node object from database, error {Arg_1}",

      "translation": "Unable to read node object from database, error {Arg_1}"
    },
    {

      "id": "Error saving new node config state (unconfiguring) in the database: {Arg_1}",

      "translation": "Error saving new node config state (unconfiguring) in the database: {Arg_1}"
    },
    {

      "id": "Error in node configuration. The node is not found from the database.",

      "translation": "Error in node configuration. The node is not found from the database."
    },
    {

      "id": "Error in node configuration. The node must be in 'configured' or 'configuring' state in order to change the state to {Arg_1}.",

      "translation": "Error in node configuration. The node must be in 'configured' or 'configuring' state in order to change the state to {Arg_1}."
    },
    {

      "id": "Node state transition from '{Arg_1}' to '{Arg_2}' is not supported.",

      "translation": "Node state transition from '{Arg_1}' to '{Arg_2}' is not supported."
    },
    {

      "id": "Failed get user input from local db. {Arg_1}",

      "translation": "Failed get user input from local db. {Arg_1}"
    },
    {

      "id": "Failed to find preferences for service {Arg_1}/{Arg_2} from the local user input, error: {Arg_3}",

      "translation": "Failed to find preferences for service {Arg_1}/{Arg_2} from the local user input, error: {Arg_3}"
    },
    {

      "id": "Error saving new node config state to database: {Arg_1}",

      "translation": "Error saving new node config state to database: {Arg_1}"
    },
    {

      "id": "Complete node configuration/registration for node {Arg_1}.",

      "translation": "Complete node configuration/registration for node {Arg_1}."
    },
    {

      "id": "Error in service configuration for {Arg_1}. {Arg_2}",

      "translation": "Error in service configuration for {Arg_1}. {Arg_2}"
    },
    {

      "id": "Error getting service references for pattern {Arg_1}. {Arg_2}",

      "translation": "Error getting service references for pattern {Arg_1}. {Arg_2}"
    },
    {

      "id": "New node policy: {Arg_1}",

      "translation": "New node policy: {Arg_1}"
    },
    {

      "id": "Deleted node policy",

      "translation": "Deleted node policy"
    },
    {

      "id": "New node user input: {Arg_1}",

      "translation": "New node user input: {Arg_1}"
    },
    {

      "id": "No node user input to detele",

      "translation": "No node user input to detele"
    },
    {

      "id": "Deleted all node user input",

      "translation": "Deleted all node user input"
    },
    {

      "id": "Start service configuration with user input for {Arg_1}/{Arg_2}.",

      "translation": "Start service configuration with user input for {Arg_1}/{Arg_2}."
    },
    {

      "id": "Start service auto configuration for {Arg_1}/{Arg_2}.",

      "translation": "Start service auto configuration for {Arg_1}/{Arg_2}."
    },
    {

      "id": "Complete service configuration for {Arg_1}/{Arg_2}.",

      "translation": "Complete service configuration for {Arg_1}/{Arg_2}."
    },
    {

      "id": "Complete service auto configuration for {Arg_1}/{Arg_2}.",

      "translation": "Complete service auto configuration for {Arg_1}/{Arg_2}."
    },
    {

      "id": "Variable {Arg_1} is missing in the service configuration for {Arg_2}/{Arg_3}. It may cause agreement not formed if the business policy does not contain the setting for the missing variable.",

      "translation": "Variable {Arg_1} is missing in the service configuration for {Arg_2}/{Arg_3}. It may cause agreement not formed if the business policy does not contain the setting for the missing variable."
    },
    {

      "id": "Error configuring service {Arg_1}. {Arg_2}",

      "translation": "Error configuring service {Arg_1}. {Arg_2}"
    },
    {

      "id": "Error changing service configstate {Arg_1}, error {Arg_2}",

      "translation": "Error changing service configstate {Arg_1}, error {Arg_2}"
    },
    {

      "id": "Start changing service configuration state to {Arg_1} for {Arg_2} for the node.",

      "translation": "Start changing service configuration state to {Arg_1} for {Arg_2} for the node."
    },
    {

      "id": "Complete changing service configuration state to {Arg_1} for {Arg_2} for the node.",

      "translation": "Complete changing service configuration state to {Arg_1} for {Arg_2} for the node."
    },
    {

      "id": "Error converting the selections into Selectors: {Err}",

      "translation": "Error converting the selections into Selectors: {Err}"
    },
    {

      "id": "Error retrieving agreement {Arg_1} from database, error {Arg_2}",

      "translation": "Error retrieving agreement {Arg_1} from database, error {Arg_2}"
    },
    {

      "id": "Unable to retrieve agreement {Arg_1} from database for MeteringNotification message, error {Arg_2}",

      "translation": "Unable to retrieve agreement {Arg_1} from database for MeteringNotification message, error {Arg_2}"
    },
    {

      "id": "Unable to retrieve agreement {Arg_1} from database for Cancel message, error {Arg_2}",

      "translation": "Unable to retrieve agreement {Arg_1} from database for Cancel message, error {Arg_2}"
    },
    {

      "id": "Unable to retrieve agreement {Arg_1} from database for ReplyAck message, error {Arg_2}",

      "translation": "Unable to retrieve agreement {Arg_1} from database for ReplyAck message, error {Arg_2}"
    },
    {

      "id": "Unable to retrieve agreement {Arg_1} from database for DataReceived message, error {Arg_2}",

      "translation": "Unable to retrieve agreement {Arg_1} from database for DataReceived message, error {Arg_2}"
    },
    {

      "id": "Unable to retrieve unarchived agreements from database. {Arg_1}",

      "translation": "Unable to retrieve unarchived agreements from database. {Arg_1}"
    },
    {

      "id": "Error marking agreement {Arg_1} terminated in database: {Arg_2}.",

      "translation": "Error marking agreement {Arg_1} terminated in database: {Arg_2}."
    },
    {

      "id": "Error getting service definitions {Arg_1} from db. {Arg_2}",

      "translation": "Error getting service definitions {Arg_1} from db. {Arg_2}"
    },
    {

      "id": "Error retrieving all service instances from database for {Arg_1}/{Arg_2} version {Arg_3} key {Arg_4}. {Arg_5}",

      "translation": "Error retrieving all service instances from database for {Arg_1}/{Arg_2} version {Arg_3} key {Arg_4}. {Arg_5}"
    },
    {

      "id": "Error retrieving all service instances from database for {Arg_1}. {Arg_2}",

      "translation": "Error retrieving all service instances from database for {Arg_1}. {Arg_2}"
    },
    {

      "id": "Error retrieving all service instances from database, error: {Arg_1}",

      "translation": "Error retrieving all service instances from database, error: {Arg_1}"
    },
    {

      "id": "Error getting service instance {Arg_1} from db. {Arg_2}",

      "translation": "Error getting service instance {Arg_1} from db. {Arg_2}"
    },
    {

      "id": "Error retrieving matching agreements from database for workloads {Arg_1}. Error: {Arg_2}",

      "translation": "Error retrieving matching agreements from database for workloads {Arg_1}. Error: {Arg_2}"
    },
    {

      "id": "Unable to retrieve the service configuration state for node resource {Arg_1} from the exchange, error {Arg_2}",

      "translation": "Unable to retrieve the service configuration state for node resource {Arg_1} from the exchange, error {Arg_2}"
    },
    {

      "id": "Error retrieving node {Arg_1} from the exchange: {Arg_2}",

      "translation": "Error retrieving node {Arg_1} from the exchange: {Arg_2}"
    },
    {

      "id": "Error updating registeredServices for node {Arg_1} in the exchange: {Arg_2}",

      "translation": "Error updating registeredServices for node {Arg_1} in the exchange: {Arg_2}"
    },
    {

      "id": "Image loaded for {Arg_1}/{Arg_2}.",

      "translation": "Image loaded for {Arg_1}/{Arg_2}."
    },
    {

      "id": "Image loaded for service {Arg_1}/{Arg_2}.",

      "translation": "Image loaded for service {Arg_1}/{Arg_2}."
    },
    {

      "id": "Error loading image for {Arg_1}/{Arg_2}.",

      "translation": "Error loading image for {Arg_1}/{Arg_2}."
    },
    {

      "id": "Error loading image for service {Arg_1}/{Arg_2}.",

      "translation": "Error loading image for service {Arg_1}/{Arg_2}."
    },
    {

      "id": "Start terminating agreement for {Arg_1}. Termination reason: {Arg_2}",

      "translation": "Start terminating agreement for {Arg_1}. Termination reason: {Arg_2}"
    },
    {

      "id": "Agreement reached for service {Arg_1}. The agreement id is {Arg_2}.",

      "translation": "Agreement reached for service {Arg_1}. The agreement id is {Arg_2}."
    },
    {

      "id": "Agreement for {Arg_1} no longer valid on the agbot. Node will cancel it.",

      "translation": "Agreement for {Arg_1} no longer valid on the agbot. Node will cancel it."
    },
    {

      "id": "Workload service containers for {Arg_1}/{Arg_2} are up and running.",

      "translation": "Workload service containers for {Arg_1}/{Arg_2} are up and running."
    },
    {

      "id": "Complete terminating agreement for {Arg_1}. Termination reason: {Arg_2}",

      "translation": "Complete terminating agreement for {Arg_1}. Termination reason: {Arg_2}"
    },
    {

      "id": "Error deleting agreement for {Arg_1} in exchange: {Arg_2}. Will retry.",

      "translation": "Error deleting agreement for {Arg_1} in exchange: {Arg_2}. Will retry."
    },
    {

      "id": "Encountered error for AgreementVerification for {Arg_1} with agbot, error {Arg_2}",

      "translation": "Encountered error for AgreementVerification for {Arg_1} with agbot, error {Arg_2}"
    },
    {

      "id": "ReplyAck indicated that the agbot did not want to pursue the agreement for {Arg_1}. Node will cancel the agreement",

      "translation": "ReplyAck indicated that the agbot did not want to pursue the agreement for {Arg_1}. Node will cancel the agreement"
    },
    {

      "id": "Node received Cancel message for {Arg_1}/{Arg_2} from agbot {Arg_3}.",

      "translation": "Node received Cancel message for {Arg_1}/{Arg_2} from agbot {Arg_3}."
    },
    {

      "id": "Error handling ReplyAck message for {Arg_1}. {Arg_2}",

      "translation": "Error handling ReplyAck message for {Arg_1}. {Arg_2}"
    },
    {

      "id": "Error handling ReplyAck message. {Arg_1}",

      "translation": "Error handling ReplyAck message. {Arg_1}"
    },
    {

      "id": "Error handling DataReceived message for {Arg_1}. {Arg_2}",

      "translation": "Error handling DataReceived message for {Arg_1}. {Arg_2}"
    },
    {

      "id": "Error handling DataReceived message. {Arg_1}",

      "translation": "Error handling DataReceived message. {Arg_1}"
    },
    {

      "id": "Error handling MeterNotification message for {Arg_1}. {Arg_2}",

      "translation": "Error handling MeterNotification message for {Arg_1}. {Arg_2}"
    },
    {

      "id": "Error handling MeterNotification message. {Arg_1}",

      "translation": "Error handling MeterNotification message. {Arg_1}"
    },
    {

      "id": "Error handling Cancel message for {Arg_1}. {Arg_2}",

      "translation": "Error handling Cancel message for {Arg_1}. {Arg_2}"
    },
    {

      "id": "Error handling Cancel message. {Arg_1}",

      "translation": "Error handling Cancel message. {Arg_1}"
    },
    {

      "id": "Start workload service for {Arg_1}/{Arg_2}.",

      "translation": "Start workload service for {Arg_1}/{Arg_2}."
    },
    {

      "id": "Workload destroyed for {Arg_1}",

      "translation": "Workload destroyed for {Arg_1}"
    },
    {

      "id": "Service containers for {Arg_1} started.",

      "translation": "Service containers for {Arg_1} started."
    },
    {

      "id": "Complete cleaning up the service instance {Arg_1}.",

      "translation": "Complete cleaning up the service instance {Arg_1}."
    },
    {

      "id": "Start dependent services for {Arg_1}/{Arg_2}.",

      "translation": "Start dependent services for {Arg_1}/{Arg_2}."
    },
    {

      "id": "Encountered error starting dependen services for {Arg_1}/{Arg_2}. {Arg_3}",

      "translation": "Encountered error starting dependen services for {Arg_1}/{Arg_2}. {Arg_3}"
    },
    {

      "id": "Error starting dependen service {Arg_1}/{Arg_2} version {Arg_3} for agreement {Arg_4}. {Arg_5}",

      "translation": "Error starting dependen service {Arg_1}/{Arg_2} version {Arg_3} for agreement {Arg_4}. {Arg_5}"
    },
    {

      "id": "Start cleaning up service {Arg_1} because agreement {Arg_2} ended.",

      "translation": "Start cleaning up service {Arg_1} because agreement {Arg_2} ended."
    },
    {

      "id": "Error starting service {Arg_1}/{Arg_2} version {Arg_3}, error: {Arg_4}",

      "translation": "Error starting service {Arg_1}/{Arg_2} version {Arg_3}, error: {Arg_4}"
    },
    {

      "id": "Error getting all the services from agreements: {Arg_1}",

      "translation": "Error getting all the services from agreements: {Arg_1}"
    },
    {

      "id": "Start agreement-less service {Arg_1}/{Arg_2}.",

      "translation": "Start agreement-less service {Arg_1}/{Arg_2}."
    },
    {

      "id": "Complete starting agreement-less service {Arg_1}/{Arg_2} and its dependents.",

      "translation": "Complete starting agreement-less service {Arg_1}/{Arg_2} and its dependents."
    },
    {

      "id": "Unable to start agreement-less service {Arg_1}/{Arg_2}, error {Arg_3}",

      "translation": "Unable to start agreement-less service {Arg_1}/{Arg_2}, error {Arg_3}"
    },
    {

      "id": "Unable to start agreement-less services, error searching for pattern {Arg_1} in exchange, error: {Arg_2}",

      "translation": "Unable to start agreement-less services, error searching for pattern {Arg_1} in exchange, error: {Arg_2}"
    },
    {

      "id": "Unable to start agreement-less services, pattern {Arg_1} not found in exchange",

      "translation": "Unable to start agreement-less services, pattern {Arg_1} not found in exchange"
    },
    {

      "id": "Unable to start agreement-less service {Arg_1}/{Arg_2}, local service definition not found",

      "translation": "Unable to start agreement-less service {Arg_1}/{Arg_2}, local service definition not found"
    },
    {

      "id": "Start upgrading service {Arg_1}/{Arg_2} from version {Arg_3} to version {Arg_4}.",

      "translation": "Start upgrading service {Arg_1}/{Arg_2} from version {Arg_3} to version {Arg_4}."
    },
    {

      "id": "Complete upgrading service {Arg_1}/{Arg_2} from version {Arg_3} to version {Arg_4}.",

      "translation": "Complete upgrading service {Arg_1}/{Arg_2} from version {Arg_3} to version {Arg_4}."
    },
    {

      "id": "Failed to upgrade service {Arg_1}/{Arg_2} from version {Arg_3} to version {Arg_4}, error: {Arg_5}",

      "translation": "Failed to upgrade service {Arg_1}/{Arg_2} from version {Arg_3} to version {Arg_4}, error: {Arg_5}"
    },
    {

      "id": "Start downgrading service {Arg_1}/{Arg_2} version {Arg_3} because service for agreement failed to start.",

      "translation": "Start downgrading service {Arg_1}/{Arg_2} version {Arg_3} because service for agreement failed to start."
    },
    {

      "id": "Start downgrading service {Arg_1}/{Arg_2} version {Arg_3} because service failed to start.",

      "translation": "Start downgrading service {Arg_1}/{Arg_2} version {Arg_3} because service failed to start."
    },
    {

      "id": "Start downgrading service {Arg_1}/{Arg_2} version {Arg_3} because upgrade failed.",

      "translation": "Start downgrading service {Arg_1}/{Arg_2} version {Arg_3} because upgrade failed."
    },
    {

      "id": "Failed to downgrade service {Arg_1}/{Arg_2} version {Arg_3}, error: {Arg_4}",

      "translation": "Failed to downgrade service {Arg_1}/{Arg_2} version {Arg_3}, error: {Arg_4}"
    },
    {

      "id": "Complete downgrading service {Arg_1}/{Arg_2} from version {Arg_3} to version {Arg_4}.",

      "translation": "Complete downgrading service {Arg_1}/{Arg_2} from version {Arg_3} to version {Arg_4}."
    },
    {

      "id": "Error finding the new service definition to downgrade to for {Arg_1}/{Arg_2} version {Arg_3} key {Arg_4}. error: {Arg_5}",

      "translation": "Error finding the new service definition to downgrade to for {Arg_1}/{Arg_2} version {Arg_3} key {Arg_4}. error: {Arg_5}"
    },
    {

      "id": "Could not find lower version to downgrade for {Arg_1}/{Arg_2} version {Arg_3}.",

      "translation": "Could not find lower version to downgrade for {Arg_1}/{Arg_2} version {Arg_3}."
    },
    {

      "id": "Error downgrading service {Arg_1}/{Arg_2} from version {Arg_3} to version {Arg_4}. Eror: {Arg_5}",

      "translation": "Error downgrading service {Arg_1}/{Arg_2} from version {Arg_3} to version {Arg_4}. Eror: {Arg_5}"
    },
    {

      "id": "Error downgrading service {Arg_1}/{Arg_2} version {Arg_3}. {Arg_4}",

      "translation": "Error downgrading service {Arg_1}/{Arg_2} version {Arg_3}. {Arg_4}"
    },
    {

      "id": "Start retrying number {Arg_1} for dependent service {Arg_2} version {Arg_3} because service failed.",

      "translation": "Start retrying number {Arg_1} for dependent service {Arg_2} version {Arg_3} because service failed."
    },
    {

      "id": "Failed retrying number {Arg_1} for dependent service {Arg_2} version {Arg_3}.",

      "translation": "Failed retrying number {Arg_1} for dependent service {Arg_2} version {Arg_3}."
    },
    {

      "id": "Failed to get the service retry count for {Arg_1} version {Arg_2}. {Arg_3}",

      "translation": "Failed to get the service retry count for {Arg_1} version {Arg_2}. {Arg_3}"
    },
    {

      "id": "Error updating retry start state for service instance {Arg_1} in dadabase. {Arg_2}",

      "translation": "Error updating retry start state for service instance {Arg_1} in dadabase. {Arg_2}"
    }
  ]
}
