#!/bin/bash

# This script starts or stops the horizon edge node agent in a container. Supports linux and mac os x.

usage() {
	cat <<ENDUSAGE
Usage: $0 {start|stop|update} [index-num] [default-file]
  start:  pull the latest horizon docker image and start it
  stop:   unregister the node and stop/remove the horizon docker container
  update: stop the horizon container (w/o unregistering), pull the latest docker image, and start it. Any running services will remain running.

Arguments:
  index-num:      an integer number identifying this instance of horizon when running multiple horizon containers on the same host. Default is 1.
  default-file:   a default file to use to set common environment variables for the horizon agent like HZN_EXCHANGE_URL, HZN_FSS_CSSURL, HZN_AGBOT_URL, HZN_DEVICE_ID, HZN_NODE_ID, HZN_AGENT_PORT and HZN_MGMT_HUB_CERT_PATH. If not specified and /etc/default/horizon exists on the host, that will be used.
ENDUSAGE
	exit 1
}

# Check the exit status of the previously run command and exit if nonzero
checkrc() {
  if [[ $1 -ne 0 ]]; then
  	if [[ -n "$2" ]]; then
  		fromStr="from: $2"
  	else
  		fromStr="from the last command"
  	fi
    echo "Error: exit code $1 $fromStr"
    exit $1
  fi
}

isMacos() {
	if [[ "$SYSTEM_TYPE" == "Darwin" ]]; then
		return 0
	else
		return 1
	fi
}

function is_linux() {
    if [[ $OS == 'linux' ]]; then return 0
    else return 1; fi
}

# Turn a potentially relative path, with symlinks at any level, into the absolute canonical path. Works on both linux and mac.
canonicalPath() {
	relPath="$1"
	dirName=$(dirname "$relPath")
	baseName=$(basename "$relPath")
	# Handle if basename is a sym link
	if [[ -L "$relPath" ]]; then
		symLink=$(ls -l "$relPath" | sed -e 's/.* -> //')
		if [[ "$symLink" == /* ]]; then
			# Its a fully qualified path, so this is our new path to resolve
			relPath="$symLink"
			dirName=$(dirname "$relPath")
			baseName=$(basename "$relPath")
		else
			# Its relative so treat it as the new basename
			baseName="$symLink"
		fi
	fi

	# Now use pwd -P to resolve links in dirName
	echo "$(cd "$dirName"; pwd -P)/$baseName"
}

# Bash cant do AND of cmd and checking a string (afaik), so bury it in this function
isDefaultIndex() {
	if [[ "$INDEX_NUM" == "1" ]]; then
		return 0
	else
		return 1
	fi
}

isSocatRunning() {
	ps aux | grep -v 'grep ' | grep -q "socat TCP-LISTEN:$SOCAT_LISTEN_PORT"
	return $?
}

isContainerRunning() {
	${DOCKER_ENGINE} ps --filter "name=$1" | tail -n +2 | grep -q -w "$1"
	return $?
}

killSocat() {
	# killall only works on procname (not args), so do it ourselves
	pids=$(ps aux | grep -v 'grep ' | grep "socat TCP-LISTEN:$SOCAT_LISTEN_PORT" | awk '{ print $2 }')
	if [[ -n "$pids" ]]; then
		echo "Killing socat PIDs: $pids..."
		kill $pids 2>/dev/null 
		if [ $? -ne 0 ]; then
			# for the case where socat was brought up by "sudo horizon-container start" command,
			# but "horizon-container stop" was run without sudo, we must use sudo to kill the socat.
			echo "sudo kill $pids"
			sudo kill $pids

			checkrc $? "kill socat"
		fi
	fi
}

# Check that they have the necessary software installed
checkRequirements() {
	if ! which ${DOCKER_ENGINE} >/dev/null; then
		echo "You must have docker or podman installed to run this command."
		if isMacos; then
			echo "Install docker on Mac OS X: https://docs.docker.com/docker-for-mac/install/"
		fi
		exit 2
	fi

	if isMacos; then
		if ! which socat >/dev/null; then
			echo "You must have socat installed to run this command."
			echo "Install socat using homebrew: http://macappstore.org/socat/, or using MacPorts: https://www.macports.org/ then 'sudo port install socat'"
			exit 2
		fi
	fi

	if ! which hzn >/dev/null; then
		echo "You must have the hzn command installed to use Horizon in a container."
		exit 2
	fi
}

# Creates and copies a file similar to os-release on Linux systems to the docker container
# for anax-in-container installs. This allows the container to know which horizon-cli package
# to download during automatic upgrades.
copyHostOSInfo() {
	# determine host os, distribution and version
	local os='linux'
	local distro=''
	local distroVersionNum=''
	if isMacos; then
		os='macos'
        distro=$(sw_vers | grep ProductName | awk '{ print$2 }')
        distroVersionNum=$(sw_vers | grep ProductVersion | awk '{ print$2 }')
    elif [[ -f /etc/os-release ]]; then
        . /etc/os-release
        os=$ID
        distro=$os
        distroVersionNum=$VERSION_ID
    elif [[ -f /etc/lsb-release ]]; then
        . /etc/lsb-release
        os=$DISTRIB_ID
        distro=$os
        distroVersionNum=$DISTRIB_RELEASE
    else
        echo "Cannot detect OS version"
		exit 2
    fi

	# determine host architecture and convert to hzn-friendly form
	local image_arch=$(uname -m)
    if [[ $image_arch == 'x86_64' ]]; then
        image_arch='amd64'
    elif [[ $image_arch == 'aarch64' ]]; then
        image_arch='arm64'
    fi

	# write os, distro, distro version and architecture to file
    tmpfile="/tmp/host-os-release-${DOCKER_NAME}"
    echo "OS=$os" > $tmpfile
    echo "DISTRO=$distro" >> $tmpfile
    echo "DISTRO_VERSION_NUM=$distroVersionNum" >> $tmpfile
    echo "ARCH=$image_arch" >> $tmpfile

    # copy file to docker container
    ${DOCKER_ENGINE} cp $tmpfile $DOCKER_NAME:/etc/host-os-release
    if [[ $? -ne 0 ]]; then
        echo "Could not copy host os info into agent docker container"
        exit 2
    fi

    # cleanup
    rm $tmpfile
}

# Pull the latest horizon docker image, get some prereqs established, and start the image
# First arg is optional host default file, second arg has value 'updating' if we are called by restart
start() {
	#variables sourced from the default file are available in this script but not its children
	if [[ -n "$1" ]]; then
		defaultFileMountArg="-v ${1}:/etc/default/horizon:ro"
		source $1
	else
		source /etc/default/horizon
	fi

	checkRequirements	# this will exit with msg if requirements are not met

	# not needed as of 2.19.0...
	#if isMacos; then
	#	serviceStorageDir=/private/var/tmp/horizon
	#else
	#	serviceStorageDir=/var/tmp/horizon
	#fi

	# setup directories for file sync service
	if isMacos; then
		fssBasePath=/private/var/tmp/horizon
	else
		fssBasePath=/var/tmp/horizon
	fi

	# set this base path to 777 to allow other users create directories under it
	if [ -d $fssBasePath ]; then
		# this is for backward comatibility because older version created this directory with root owned
		if [ ! -w $fssBasePath ]; then
			echo "sudo chmod 777 $fssBasePath"
			sudo chmod 777 $fssBasePath
		fi
	else
		mkdir -m 777 -p ${fssBasePath}
	fi

	# this is container name specific, like "horizon1" for example. 
	fssHostSharePath=${fssBasePath}/${DOCKER_NAME}

    if [[ "$2" != "updating" ]]; then
		# clean up everything under the container name directory
		# just incase there are left over files by other user
		# especially the ones that are not readable by the login user 
		if [ -d $fssHostSharePath ]; then
			rm -Rf $fssHostSharePath 2>/dev/null 
			if [ $? -ne 0 ]; then
				echo "sudo rm -Rf $fssHostSharePath"
				sudo rm -Rf $fssHostSharePath
			fi
		fi

		# create fss domain socket path, ess auth path and secret path
		mkdir -p ${fssHostSharePath}/fss-domain-socket
		mkdir -p ${fssHostSharePath}/ess-auth
		mkdir -p ${fssHostSharePath}/secrets
		mkdir -p ${fssHostSharePath}/nmp
	else
		: # updating will keep files inside $fssHostSharePath
	fi

	# for mac, docker container has the filesystem privilge of the login user instead of root
	# even if the `docker run` command was run by a root user.
	# so in the case when this script is run by a root user using sudo, we need to get the login user's name
	# and create the directories for ess with login user as the ownner. Otherwise
	# the service container will be unable to create subdirectories under it.
	if isMacos; then 
		login_user=$(logname 2>/dev/null || echo $SUDO_USER)
		if [ -n "$login_user" ] && [ "$login_user" != "$USER" ]; then
			# this is for the sudo case, change the owner to login user
			chown -R ${login_user} $fssHostSharePath
		fi
	fi

	# Start socat, if not already running
	if isMacos; then
		if ! isSocatRunning; then
			# have docker api listen on a port, in addition to a unix socket
			echo "Starting socat to listen on port $SOCAT_LISTEN_PORT and forward it to the docker API socket..."
			socat TCP-LISTEN:$SOCAT_LISTEN_PORT,reuseaddr,fork UNIX-CONNECT:/var/run/docker.sock &
		fi
	fi

	# not needed as of 2.19.0...
	# Create service storage dir because anax will check for this, because this will be mounted into service containers
	#mkdir -p $serviceStorageDir/service_storage
	#checkrc $? "mkdir -p $serviceStorageDir/service_storage"

	# Get the horizon image. The image version is the same as the hzn CLI version unless it is
	# overwitten by $HC_DOCKER_IMAGE and $HC_DOCKER_TAG.
	# $HC_DOCKER_IMAGE and $HC_DOCKER_TAG are intentionally undocumented env vars that allow us to test the staging version of the docker image

	# get the architecture from hzn
	arch=$(LANG=en_US hzn architecture)
	if [ $? -ne 0 ]; then
			arch="amd64"
	fi

	dockerImage='openhorizon/'$arch'_anax'
	dockerTag='latest'
	if [[ -n "$HC_DOCKER_IMAGE" ]]; then
		dockerImage="$HC_DOCKER_IMAGE"
	fi
	if [[ -n "$HC_DOCKER_TAG" ]]; then
		dockerTag="$HC_DOCKER_TAG"
	else
		# get the image tag from the hzn version
		local hzn_version=$(LANG=en_US HZN_LANG=en_US hzn version | grep "^Horizon CLI")
		if [ $? -eq 0 ]; then 
        	dockerTag=${hzn_version##* }   # remove all of the space-separated words, except the last one
        fi
	fi

	local pull_image=1
	# HC_DONT_PULL is an intentionally undocumented env var that allows us to test a new image before pushing it to docker hub
	if [[ -n "$HC_DONT_PULL" ]]; then
		# check if the image exists,if not exit out
		${DOCKER_ENGINE} inspect $dockerImage:$dockerTag > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			pull_image=0
		else
			echo "Image $dockerImage:$dockerTag cannot be found locally. Please unset HC_DONT_PULL or use 'docker pull' command to pull it from the registry."
			exit 2
		fi
	fi 
	# Use local image if the tag is not latest and testing
	if [[ "$dockerTag" != "latest" ]] && [[ "$dockerTag" != "testing" ]]; then
		pull_image=0
	fi

	if [[ $pull_image -eq 1 ]];  then
		${DOCKER_ENGINE} pull $dockerImage:$dockerTag
		checkrc $? "docker pull $dockerImage:$dockerTag"
	fi

	if [[ -n $HZN_ICP_CA_CERT_PATH ]]; then
		icpCertMount="-v $(canonicalPath "$HZN_ICP_CA_CERT_PATH"):$HZN_ICP_CA_CERT_PATH"
	elif  [[ -n $HZN_MGMT_HUB_CERT_PATH ]]; then
		icpCertMount="-v $(canonicalPath "$HZN_MGMT_HUB_CERT_PATH"):$HZN_MGMT_HUB_CERT_PATH"
	fi

	# Start the horizon container
	echo "Starting the Horizon agent container $dockerImage:$dockerTag..."
	# Note: docker will automatically create the ${DOCKER_NAME}_var and ${DOCKER_NAME}_etc volumes if necessary

	anaxPort=$HZN_AGENT_PORT
	if [[ "$HZN_AGENT_PORT" == "" ]]; then
		anaxPort='8510'
	fi

	DOCKER_ADD_HOSTS=""
	if [[ ! -z "$HZN_EXCHANGE_HOSTS" ]]; then
		DOCKER_ADD_HOSTS="--add-host=$HZN_EXCHANGE_HOSTS"
	fi

	DOMAIN_SOCKET_MOUNT="/var/run/docker.sock:/var/run/docker.sock"
        if [[ $DOCKER_ENGINE == "podman" ]]; then
		# In the container, leave the mount as /var/run/docker.sock so the anax.service can stay the same
	        DOMAIN_SOCKET_MOUNT="/var/run/podman/podman.sock:/var/run/docker.sock"
        fi

	if isMacos; then
		DOCKER_HOST=tcp://host.docker.internal:$SOCAT_LISTEN_PORT
		docker run $DOCKER_ADD_HOSTS -d -t --restart always --name $DOCKER_NAME --privileged -p 127.0.0.1:$HORIZON_AGENT_PORT:$anaxPort -e ANAX_DOCKER_ENDPOINT=${DOCKER_HOST} -e DOCKER_HOST=${DOCKER_HOST} -e HOST_OS=mac -e DOCKER_NAME=${DOCKER_NAME} -e HZN_VAR_RUN_BASE=/var/tmp/horizon/${DOCKER_NAME} $defaultFileMountArg $icpCertMount -v ${DOCKER_NAME}_var:/var/horizon/ -v ${DOCKER_NAME}_etc:/etc/horizon/ -v ${fssHostSharePath}:/var/tmp/horizon/${DOCKER_NAME} $dockerImage:$dockerTag
		checkrc $? "docker run"
	else
		${DOCKER_ENGINE} run $DOCKER_ADD_HOSTS -d -t --restart always --name $DOCKER_NAME --privileged -p 127.0.0.1:$HORIZON_AGENT_PORT:$anaxPort -e DOCKER_NAME=${DOCKER_NAME} -e HZN_VAR_RUN_BASE=${fssHostSharePath} -v ${DOMAIN_SOCKET_MOUNT} $defaultFileMountArg $icpCertMount -v ${DOCKER_NAME}_var:/var/horizon/ -v ${DOCKER_NAME}_etc:/etc/horizon/ -v ${fssHostSharePath}:${fssHostSharePath} $dockerImage:$dockerTag
		checkrc $? "docker run"
	fi

	if [[ "$2" == "updating" ]]; then
		echo "Horizon agent updated/restarted successfully."
	else
		# add the cron job for agent auto upgrade in cron.d
		add_horizon_upgrade_cronjob $INDEX_NUM

		if isDefaultIndex; then
			# hzn on mac sets HORIZON_URL correctly by default for index 1, so the user does not need to do it
			echo "Horizon agent started successfully. Now use 'hzn node list', 'hzn register ...', and 'hzn agreement list'"
		else
			echo "Horizon agent started successfully. Now export HORIZON_URL=http://localhost:$HORIZON_AGENT_PORT, then use 'hzn node list', 'hzn register ...', and 'hzn agreement list'"
		fi
	fi

	# now copy over the host OS info to the container so that automatic upgrades can be enabled
	copyHostOSInfo

}		# end start()


# Unregister the node, then stop/remove the container
stop() {
	checkRequirements	# this will exit with msg if requirements are not met

	# Remove the agent auto upgrade cronjob from the cron.d
	remove_horizon_upgrade_cronjob $INDEX_NUM

	# Stop the anax container
	echo "Unregistering the node, removing the node resource, and then stopping/removing the horizon container (this may take a minute)..."
	export HORIZON_URL=http://localhost:$HORIZON_AGENT_PORT
	hzn unregister -f -r 
	${DOCKER_ENGINE} stop -t 120 $DOCKER_NAME  # give it time to unregister and stop the service containers
	if [[ $? -ne 0 ]]; then
		echo "Error stopping container: $DOCKER_NAME. Resuming stop procedures."
	fi
	${DOCKER_ENGINE} rm -f $DOCKER_NAME
	if [[ $? -ne 0 ]]; then
		echo "Error removing container: $DOCKER_NAME. Resuming stop procedures."
	fi

	# Remove the volumes
	${DOCKER_ENGINE} volume rm ${DOCKER_NAME}_var ${DOCKER_NAME}_etc

	# Stop socat
	killSocat
}


# Stop the container without deleting the volumes, pull the latest horizon docker image, and start it (so this accomplishes an anax update too)
# Note: since we do not delete the volumes for /var/horizon and /etc/horizon, anax still has its "memory", so the services dont need to be unregistered
restart() {
	checkRequirements	# this will exit with msg if requirements are not met

	# Stop the anax container, but 1st tell it not to unregister when stopping, and dont delete the volumes
	echo "Stopping/removing the horizon container..."

	# check if the container is running or not
	ret=$(${DOCKER_ENGINE} inspect -f '{{.State.Running}}' $DOCKER_NAME)
	if [ $? -eq 0 ]; then
		# if not running, bring it up
		if [ "$ret" == "false" ]; then
			${DOCKER_ENGINE} start $DOCKER_NAME
			checkrc $? "docker start"
		fi

		${DOCKER_ENGINE} stop $DOCKER_NAME
		checkrc $? "docker stop"
		${DOCKER_ENGINE} rm $DOCKER_NAME
		checkrc $? "docker rm"
	fi

	start "$1" 'updating'
}

add_horizon_upgrade_cronjob() {
	local container_number=$1
	if isMacos; then
		echo "Adding a cronjob for agent auto-upgrade. A dialog box may be shown to ask your permission, please click the OK button."
		cronjobs=$(sudo crontab -l 2>/dev/null; echo "*/5 * * * * /usr/local/bin/agent-auto-upgrade.sh ${container_number} 2>&1|/usr/bin/logger -t AgentAutoUpgrade-${container_number}")
		echo "$cronjobs" | sudo crontab -
	else
		echo "Adding a cron job for agent auto-upgrade..."
		mkdir -p /etc/cron.d/
		sudo echo "*/5 * * * * root /usr/horizon/bin/agent-auto-upgrade.sh ${container_number} 2>&1|/usr/bin/logger -t AgentAutoUpgrade-${container_number}" > /etc/cron.d/horizon${container_number}_agent_upgrade
	fi
}

remove_horizon_upgrade_cronjob() {
	local container_number=$1
	echo "Removing agent upgrade cron job..."
	if isMacos; then
		echo "A dialog box may be shown to ask your permission, please click the OK button."
		cronjobs=$(sudo crontab -l 2>/dev/null)
		cronjobs_new=$(echo "$cronjobs" | sed "/agent-auto-upgrade.sh ${container_number} /d")
		echo "$cronjobs_new" | sudo crontab -
	else
		sudo rm -f /etc/cron.d/horizon${container_number}_agent_upgrade
	fi
}

# Returns operating system.
function get_os() {
    # OSTYPE is set automatically by the shell
    if [[ $OSTYPE == linux* ]]; then
        echo 'linux'
    elif [[ $OSTYPE == darwin* ]]; then
        echo 'macos'
    else
        echo 'unknown'
    fi
}

# Returns exit code 0 if the specified cmd is in the path
function isCmdInstalled() {
    local cmd=$1
    command -v $cmd >/dev/null 2>&1
}

# A RedHat system might use podman instead of docker; default to docker
function get_docker_engine() {

    if is_linux; then
        if isCmdInstalled docker; then
            : # use docker
        elif isCmdInstalled podman;  then
            # podman is installed... lets make sure it is acceptable version (ie > 4.0.0)
            podman_ver=$(podman --version)
            rc=$?
            if [[ $rc -eq 0 ]]; then
               # should be of form 'podman version 4.0.0'
               OLDIFS=${IFS}
               IFS=' '
               read -a podman_ver_array <<< "${podman_ver}"
               if [[ ${#podman_ver_array[@]} -eq 3 ]]; then
                  IFS='.'
                  read -a podman_ver_num_array <<< "${podman_ver_array[2]}"
                  major_version=$(expr "${podman_ver_num_array[0]}" + 0)
                  if [[ $major_version -ge 4 ]]; then
                     DOCKER_ENGINE="podman"
                  fi
               fi
               IFS=${OLDIFS}
            fi
        fi
    fi
}

# Main

# Environment Variables
SOCAT_LISTEN_PORT=${SOCAT_LISTEN_PORT:-2375}
SYSTEM_TYPE=${SYSTEM_TYPE:-$(uname -s)}

# The 2nd arg is optionally the instance number
if [[ -n "$2" ]]; then
	if [[ "$2" -lt 1 ]]; then
		echo "Error: index-num must be > 0"
		exit 2
	fi
	INDEX_NUM="$2"
else
	INDEX_NUM=1
fi

# The 3rd arg is optionally the default file
if [[ -n "$3" ]]; then
	DEFAULT_FILE="$3"
	if [[ ! -f "$DEFAULT_FILE" ]]; then
		echo "Error: default file '$DEFAULT_FILE' specified, but does not exist on the host."
		exit 2
	fi
else
	# Default file not specified, try /etc/default/horizon
	if [[ -f /etc/default/horizon ]]; then
		DEFAULT_FILE=/etc/default/horizon
	fi
	# otherwise leave DEFAULT_FILE unset
fi
if [[ -n "$DEFAULT_FILE" ]]; then
	DEFAULT_FILE=$(canonicalPath "$DEFAULT_FILE")
fi

# use arithmetic addition in case index num is > 9
HORIZON_AGENT_PORT=$(( 8080 + $INDEX_NUM ))
DOCKER_NAME="horizon$INDEX_NUM"


OS=$(get_os)

DOCKER_ENGINE=docker   # Default to docker
get_docker_engine


case "$1" in
	start)
		start "$DEFAULT_FILE"
		;;
	stop)
		stop
		;;
	restart|update)
		restart "$DEFAULT_FILE"
		;;
	#status)
	#	status
	#	;;
	*)
		usage
esac

exit
